# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PackageResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_occurance': 'int',
        'unique_id': 'str',
        'tracking_number': 'str',
        'tracking_url': 'str',
        'carrier_code': 'str',
        'primary2_d_barcode_image': 'str',
        'primary2_d_barcode_data': 'str',
        'formatted_unique_id': 'str',
        'high_volume_barcode_data': 'str',
        'high_volume_barcode_image': 'str',
        'high_volume_sort_code': 'str',
        'primary1_d_barcode_data': 'str',
        'primary1_d_barcode_image': 'str'
    }

    attribute_map = {
        'package_occurance': 'PackageOccurance',
        'unique_id': 'UniqueId',
        'tracking_number': 'TrackingNumber',
        'tracking_url': 'TrackingUrl',
        'carrier_code': 'CarrierCode',
        'primary2_d_barcode_image': 'Primary2DBarcodeImage',
        'primary2_d_barcode_data': 'Primary2DBarcodeData',
        'formatted_unique_id': 'FormattedUniqueId',
        'high_volume_barcode_data': 'HighVolumeBarcodeData',
        'high_volume_barcode_image': 'HighVolumeBarcodeImage',
        'high_volume_sort_code': 'HighVolumeSortCode',
        'primary1_d_barcode_data': 'Primary1DBarcodeData',
        'primary1_d_barcode_image': 'Primary1DBarcodeImage'
    }

    def __init__(self, package_occurance=None, unique_id=None, tracking_number=None, tracking_url=None, carrier_code=None, primary2_d_barcode_image=None, primary2_d_barcode_data=None, formatted_unique_id=None, high_volume_barcode_data=None, high_volume_barcode_image=None, high_volume_sort_code=None, primary1_d_barcode_data=None, primary1_d_barcode_image=None):  # noqa: E501
        """PackageResponse - a model defined in Swagger"""  # noqa: E501
        self._package_occurance = None
        self._unique_id = None
        self._tracking_number = None
        self._tracking_url = None
        self._carrier_code = None
        self._primary2_d_barcode_image = None
        self._primary2_d_barcode_data = None
        self._formatted_unique_id = None
        self._high_volume_barcode_data = None
        self._high_volume_barcode_image = None
        self._high_volume_sort_code = None
        self._primary1_d_barcode_data = None
        self._primary1_d_barcode_image = None
        self.discriminator = None
        self.package_occurance = package_occurance
        if unique_id is not None:
            self.unique_id = unique_id
        if tracking_number is not None:
            self.tracking_number = tracking_number
        if tracking_url is not None:
            self.tracking_url = tracking_url
        if carrier_code is not None:
            self.carrier_code = carrier_code
        if primary2_d_barcode_image is not None:
            self.primary2_d_barcode_image = primary2_d_barcode_image
        if primary2_d_barcode_data is not None:
            self.primary2_d_barcode_data = primary2_d_barcode_data
        if formatted_unique_id is not None:
            self.formatted_unique_id = formatted_unique_id
        if high_volume_barcode_data is not None:
            self.high_volume_barcode_data = high_volume_barcode_data
        if high_volume_barcode_image is not None:
            self.high_volume_barcode_image = high_volume_barcode_image
        if high_volume_sort_code is not None:
            self.high_volume_sort_code = high_volume_sort_code
        if primary1_d_barcode_data is not None:
            self.primary1_d_barcode_data = primary1_d_barcode_data
        if primary1_d_barcode_image is not None:
            self.primary1_d_barcode_image = primary1_d_barcode_image

    @property
    def package_occurance(self):
        """Gets the package_occurance of this PackageResponse.  # noqa: E501

        Package Occurence<br />Unique package number within this shipment  # noqa: E501

        :return: The package_occurance of this PackageResponse.  # noqa: E501
        :rtype: int
        """
        return self._package_occurance

    @package_occurance.setter
    def package_occurance(self, package_occurance):
        """Sets the package_occurance of this PackageResponse.

        Package Occurence<br />Unique package number within this shipment  # noqa: E501

        :param package_occurance: The package_occurance of this PackageResponse.  # noqa: E501
        :type: int
        """
        if package_occurance is None:
            raise ValueError("Invalid value for `package_occurance`, must not be `None`")  # noqa: E501

        self._package_occurance = package_occurance

    @property
    def unique_id(self):
        """Gets the unique_id of this PackageResponse.  # noqa: E501

        Unique Shipment ID<br />All shipments are assigned a unique Shipment ID.  # noqa: E501

        :return: The unique_id of this PackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this PackageResponse.

        Unique Shipment ID<br />All shipments are assigned a unique Shipment ID.  # noqa: E501

        :param unique_id: The unique_id of this PackageResponse.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def tracking_number(self):
        """Gets the tracking_number of this PackageResponse.  # noqa: E501

        Shipment Tracking Number<br />Final Mile carrier tracking number.<br />Only populated for services that support tracking numbers.  # noqa: E501

        :return: The tracking_number of this PackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this PackageResponse.

        Shipment Tracking Number<br />Final Mile carrier tracking number.<br />Only populated for services that support tracking numbers.  # noqa: E501

        :param tracking_number: The tracking_number of this PackageResponse.  # noqa: E501
        :type: str
        """

        self._tracking_number = tracking_number

    @property
    def tracking_url(self):
        """Gets the tracking_url of this PackageResponse.  # noqa: E501

        Tracking URL<br />Final Mile Tracking, if available.  # noqa: E501

        :return: The tracking_url of this PackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """Sets the tracking_url of this PackageResponse.

        Tracking URL<br />Final Mile Tracking, if available.  # noqa: E501

        :param tracking_url: The tracking_url of this PackageResponse.  # noqa: E501
        :type: str
        """

        self._tracking_url = tracking_url

    @property
    def carrier_code(self):
        """Gets the carrier_code of this PackageResponse.  # noqa: E501

        Carrier Code<br />The allocated carrier.  # noqa: E501

        :return: The carrier_code of this PackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this PackageResponse.

        Carrier Code<br />The allocated carrier.  # noqa: E501

        :param carrier_code: The carrier_code of this PackageResponse.  # noqa: E501
        :type: str
        """

        self._carrier_code = carrier_code

    @property
    def primary2_d_barcode_image(self):
        """Gets the primary2_d_barcode_image of this PackageResponse.  # noqa: E501

        Primary 2D Barcode Image<br />Only populated for Data Stream response.<br />Base64 Encoded PNG Image of the 2D data matrix barcode.  # noqa: E501

        :return: The primary2_d_barcode_image of this PackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._primary2_d_barcode_image

    @primary2_d_barcode_image.setter
    def primary2_d_barcode_image(self, primary2_d_barcode_image):
        """Sets the primary2_d_barcode_image of this PackageResponse.

        Primary 2D Barcode Image<br />Only populated for Data Stream response.<br />Base64 Encoded PNG Image of the 2D data matrix barcode.  # noqa: E501

        :param primary2_d_barcode_image: The primary2_d_barcode_image of this PackageResponse.  # noqa: E501
        :type: str
        """

        self._primary2_d_barcode_image = primary2_d_barcode_image

    @property
    def primary2_d_barcode_data(self):
        """Gets the primary2_d_barcode_data of this PackageResponse.  # noqa: E501

        Primary 2D Barcode Data - Base 64 Encoded<br />Only populated for Data Stream response.<br />Data required to create your own 2D data matrix barcode. Please decode before use.  # noqa: E501

        :return: The primary2_d_barcode_data of this PackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._primary2_d_barcode_data

    @primary2_d_barcode_data.setter
    def primary2_d_barcode_data(self, primary2_d_barcode_data):
        """Sets the primary2_d_barcode_data of this PackageResponse.

        Primary 2D Barcode Data - Base 64 Encoded<br />Only populated for Data Stream response.<br />Data required to create your own 2D data matrix barcode. Please decode before use.  # noqa: E501

        :param primary2_d_barcode_data: The primary2_d_barcode_data of this PackageResponse.  # noqa: E501
        :type: str
        """

        self._primary2_d_barcode_data = primary2_d_barcode_data

    @property
    def formatted_unique_id(self):
        """Gets the formatted_unique_id of this PackageResponse.  # noqa: E501

        Formatted Unique Id<br />Only populated for Data Stream response.<br />Label for 2D data matrix barcode.  # noqa: E501

        :return: The formatted_unique_id of this PackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._formatted_unique_id

    @formatted_unique_id.setter
    def formatted_unique_id(self, formatted_unique_id):
        """Sets the formatted_unique_id of this PackageResponse.

        Formatted Unique Id<br />Only populated for Data Stream response.<br />Label for 2D data matrix barcode.  # noqa: E501

        :param formatted_unique_id: The formatted_unique_id of this PackageResponse.  # noqa: E501
        :type: str
        """

        self._formatted_unique_id = formatted_unique_id

    @property
    def high_volume_barcode_data(self):
        """Gets the high_volume_barcode_data of this PackageResponse.  # noqa: E501

        High Volume Barcode Data<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Data required to create your own High Volume barcode.  # noqa: E501

        :return: The high_volume_barcode_data of this PackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._high_volume_barcode_data

    @high_volume_barcode_data.setter
    def high_volume_barcode_data(self, high_volume_barcode_data):
        """Sets the high_volume_barcode_data of this PackageResponse.

        High Volume Barcode Data<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Data required to create your own High Volume barcode.  # noqa: E501

        :param high_volume_barcode_data: The high_volume_barcode_data of this PackageResponse.  # noqa: E501
        :type: str
        """

        self._high_volume_barcode_data = high_volume_barcode_data

    @property
    def high_volume_barcode_image(self):
        """Gets the high_volume_barcode_image of this PackageResponse.  # noqa: E501

        High Volume Barcode Image<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Base64 Encoded PNG Image of the High Volume barcode.  # noqa: E501

        :return: The high_volume_barcode_image of this PackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._high_volume_barcode_image

    @high_volume_barcode_image.setter
    def high_volume_barcode_image(self, high_volume_barcode_image):
        """Sets the high_volume_barcode_image of this PackageResponse.

        High Volume Barcode Image<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Base64 Encoded PNG Image of the High Volume barcode.  # noqa: E501

        :param high_volume_barcode_image: The high_volume_barcode_image of this PackageResponse.  # noqa: E501
        :type: str
        """

        self._high_volume_barcode_image = high_volume_barcode_image

    @property
    def high_volume_sort_code(self):
        """Gets the high_volume_sort_code of this PackageResponse.  # noqa: E501

        High Volume Sort Code<br />Only populated for Data Stream response where the service requires the sort code on the label.  # noqa: E501

        :return: The high_volume_sort_code of this PackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._high_volume_sort_code

    @high_volume_sort_code.setter
    def high_volume_sort_code(self, high_volume_sort_code):
        """Sets the high_volume_sort_code of this PackageResponse.

        High Volume Sort Code<br />Only populated for Data Stream response where the service requires the sort code on the label.  # noqa: E501

        :param high_volume_sort_code: The high_volume_sort_code of this PackageResponse.  # noqa: E501
        :type: str
        """

        self._high_volume_sort_code = high_volume_sort_code

    @property
    def primary1_d_barcode_data(self):
        """Gets the primary1_d_barcode_data of this PackageResponse.  # noqa: E501

        Primary 1D Barcode Data<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Data required to create your own 1D barcode.  # noqa: E501

        :return: The primary1_d_barcode_data of this PackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._primary1_d_barcode_data

    @primary1_d_barcode_data.setter
    def primary1_d_barcode_data(self, primary1_d_barcode_data):
        """Sets the primary1_d_barcode_data of this PackageResponse.

        Primary 1D Barcode Data<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Data required to create your own 1D barcode.  # noqa: E501

        :param primary1_d_barcode_data: The primary1_d_barcode_data of this PackageResponse.  # noqa: E501
        :type: str
        """

        self._primary1_d_barcode_data = primary1_d_barcode_data

    @property
    def primary1_d_barcode_image(self):
        """Gets the primary1_d_barcode_image of this PackageResponse.  # noqa: E501

        Primary 1D Barcode Image<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Base64 Encoded PNG Image of the 1D barcode.  # noqa: E501

        :return: The primary1_d_barcode_image of this PackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._primary1_d_barcode_image

    @primary1_d_barcode_image.setter
    def primary1_d_barcode_image(self, primary1_d_barcode_image):
        """Sets the primary1_d_barcode_image of this PackageResponse.

        Primary 1D Barcode Image<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Base64 Encoded PNG Image of the 1D barcode.  # noqa: E501

        :param primary1_d_barcode_image: The primary1_d_barcode_image of this PackageResponse.  # noqa: E501
        :type: str
        """

        self._primary1_d_barcode_image = primary1_d_barcode_image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
