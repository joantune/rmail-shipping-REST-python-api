# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Item(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'str',
        'description': 'str',
        'value': 'float',
        'currency': 'str',
        'weight': 'float',
        'weight_unit_of_measure': 'str',
        'hs_code': 'str',
        'sku_code': 'str',
        'country_of_origin': 'str',
        'image_url': 'str'
    }

    attribute_map = {
        'item_id': 'ItemId',
        'description': 'Description',
        'value': 'Value',
        'currency': 'Currency',
        'weight': 'Weight',
        'weight_unit_of_measure': 'WeightUnitOfMeasure',
        'hs_code': 'HsCode',
        'sku_code': 'SkuCode',
        'country_of_origin': 'CountryOfOrigin',
        'image_url': 'ImageUrl'
    }

    def __init__(self, item_id=None, description=None, value=None, currency=None, weight=None, weight_unit_of_measure='KG', hs_code=None, sku_code=None, country_of_origin=None, image_url=None):  # noqa: E501
        """Item - a model defined in Swagger"""  # noqa: E501
        self._item_id = None
        self._description = None
        self._value = None
        self._currency = None
        self._weight = None
        self._weight_unit_of_measure = None
        self._hs_code = None
        self._sku_code = None
        self._country_of_origin = None
        self._image_url = None
        self.discriminator = None
        if item_id is not None:
            self.item_id = item_id
        self.description = description
        self.value = value
        self.currency = currency
        if weight is not None:
            self.weight = weight
        if weight_unit_of_measure is not None:
            self.weight_unit_of_measure = weight_unit_of_measure
        if hs_code is not None:
            self.hs_code = hs_code
        if sku_code is not None:
            self.sku_code = sku_code
        if country_of_origin is not None:
            self.country_of_origin = country_of_origin
        if image_url is not None:
            self.image_url = image_url

    @property
    def item_id(self):
        """Gets the item_id of this Item.  # noqa: E501

        Unique ID<br />Your unique identifier for this item.<br />If not provided, a GUID will be generated.  # noqa: E501

        :return: The item_id of this Item.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Item.

        Unique ID<br />Your unique identifier for this item.<br />If not provided, a GUID will be generated.  # noqa: E501

        :param item_id: The item_id of this Item.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def description(self):
        """Gets the description of this Item.  # noqa: E501

        Item Description  # noqa: E501

        :return: The description of this Item.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Item.

        Item Description  # noqa: E501

        :param description: The description of this Item.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def value(self):
        """Gets the value of this Item.  # noqa: E501

        Item Value  # noqa: E501

        :return: The value of this Item.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Item.

        Item Value  # noqa: E501

        :param value: The value of this Item.  # noqa: E501
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def currency(self):
        """Gets the currency of this Item.  # noqa: E501

        Currency<br />3 digit ISO Currency Code  # noqa: E501

        :return: The currency of this Item.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Item.

        Currency<br />3 digit ISO Currency Code  # noqa: E501

        :param currency: The currency of this Item.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def weight(self):
        """Gets the weight of this Item.  # noqa: E501

        Item Weight<br />The weight of this item.<br />Min weight: 1 gram.  # noqa: E501

        :return: The weight of this Item.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Item.

        Item Weight<br />The weight of this item.<br />Min weight: 1 gram.  # noqa: E501

        :param weight: The weight of this Item.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def weight_unit_of_measure(self):
        """Gets the weight_unit_of_measure of this Item.  # noqa: E501

        Weight Unit of Measure<br />If using Grams, minimum weight is 1 and partial numbers will be ignored.  # noqa: E501

        :return: The weight_unit_of_measure of this Item.  # noqa: E501
        :rtype: str
        """
        return self._weight_unit_of_measure

    @weight_unit_of_measure.setter
    def weight_unit_of_measure(self, weight_unit_of_measure):
        """Sets the weight_unit_of_measure of this Item.

        Weight Unit of Measure<br />If using Grams, minimum weight is 1 and partial numbers will be ignored.  # noqa: E501

        :param weight_unit_of_measure: The weight_unit_of_measure of this Item.  # noqa: E501
        :type: str
        """
        allowed_values = ["KG", "Grams"]  # noqa: E501
        if weight_unit_of_measure not in allowed_values:
            raise ValueError(
                "Invalid value for `weight_unit_of_measure` ({0}), must be one of {1}"  # noqa: E501
                .format(weight_unit_of_measure, allowed_values)
            )

        self._weight_unit_of_measure = weight_unit_of_measure

    @property
    def hs_code(self):
        """Gets the hs_code of this Item.  # noqa: E501

        HS Code<br />The [standardised commodity code](https://www.gov.uk/trade-tariff). It must be 6-12 digits only.<br />Used by Customs to calculate potential duties / taxes.  # noqa: E501

        :return: The hs_code of this Item.  # noqa: E501
        :rtype: str
        """
        return self._hs_code

    @hs_code.setter
    def hs_code(self, hs_code):
        """Sets the hs_code of this Item.

        HS Code<br />The [standardised commodity code](https://www.gov.uk/trade-tariff). It must be 6-12 digits only.<br />Used by Customs to calculate potential duties / taxes.  # noqa: E501

        :param hs_code: The hs_code of this Item.  # noqa: E501
        :type: str
        """

        self._hs_code = hs_code

    @property
    def sku_code(self):
        """Gets the sku_code of this Item.  # noqa: E501

        SKU Code.<br />Used by Customs to calculate potential duties / taxes.  # noqa: E501

        :return: The sku_code of this Item.  # noqa: E501
        :rtype: str
        """
        return self._sku_code

    @sku_code.setter
    def sku_code(self, sku_code):
        """Sets the sku_code of this Item.

        SKU Code.<br />Used by Customs to calculate potential duties / taxes.  # noqa: E501

        :param sku_code: The sku_code of this Item.  # noqa: E501
        :type: str
        """

        self._sku_code = sku_code

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this Item.  # noqa: E501

        Country of Origin<br />[ISO Alpha-2 Country Code](https://www.nationsonline.org/oneworld/country_code_list.htm) of item country of origin, per ISO 3166 Standard  # noqa: E501

        :return: The country_of_origin of this Item.  # noqa: E501
        :rtype: str
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this Item.

        Country of Origin<br />[ISO Alpha-2 Country Code](https://www.nationsonline.org/oneworld/country_code_list.htm) of item country of origin, per ISO 3166 Standard  # noqa: E501

        :param country_of_origin: The country_of_origin of this Item.  # noqa: E501
        :type: str
        """

        self._country_of_origin = country_of_origin

    @property
    def image_url(self):
        """Gets the image_url of this Item.  # noqa: E501

        Image URL<br />Used to save a link to an image of the item with the shipment details, so that this can be used in the Returns<br />system for consumers to see an image of the item when selecting items for return.<br />URL must be a publicly accessible image.  # noqa: E501

        :return: The image_url of this Item.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Item.

        Image URL<br />Used to save a link to an image of the item with the shipment details, so that this can be used in the Returns<br />system for consumers to see an image of the item when selecting items for return.<br />URL must be a publicly accessible image.  # noqa: E501

        :param image_url: The image_url of this Item.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Item, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
