# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ServiceAvailabilityServiceOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_format': 'str',
        'tracked': 'bool',
        'signature_required': 'bool',
        'safeplace': 'bool',
        'local_collect': 'bool',
        'saturday_guaranteed': 'bool',
        'consequential_loss': 'bool'
    }

    attribute_map = {
        'service_format': 'ServiceFormat',
        'tracked': 'Tracked',
        'signature_required': 'SignatureRequired',
        'safeplace': 'Safeplace',
        'local_collect': 'LocalCollect',
        'saturday_guaranteed': 'SaturdayGuaranteed',
        'consequential_loss': 'ConsequentialLoss'
    }

    def __init__(self, service_format=None, tracked=None, signature_required=None, safeplace=None, local_collect=None, saturday_guaranteed=None, consequential_loss=None):  # noqa: E501
        """ServiceAvailabilityServiceOptions - a model defined in Swagger"""  # noqa: E501
        self._service_format = None
        self._tracked = None
        self._signature_required = None
        self._safeplace = None
        self._local_collect = None
        self._saturday_guaranteed = None
        self._consequential_loss = None
        self.discriminator = None
        if service_format is not None:
            self.service_format = service_format
        if tracked is not None:
            self.tracked = tracked
        if signature_required is not None:
            self.signature_required = signature_required
        if safeplace is not None:
            self.safeplace = safeplace
        if local_collect is not None:
            self.local_collect = local_collect
        if saturday_guaranteed is not None:
            self.saturday_guaranteed = saturday_guaranteed
        if consequential_loss is not None:
            self.consequential_loss = consequential_loss

    @property
    def service_format(self):
        """Gets the service_format of this ServiceAvailabilityServiceOptions.  # noqa: E501

        Service Format<br />If provided, only return services that support the given service format.<br />            <br />**L** - Letter<br />**F** - Large Letter<br />**P** - Parcel<br />**S** - Printed Papers - International Services Only  # noqa: E501

        :return: The service_format of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :rtype: str
        """
        return self._service_format

    @service_format.setter
    def service_format(self, service_format):
        """Sets the service_format of this ServiceAvailabilityServiceOptions.

        Service Format<br />If provided, only return services that support the given service format.<br />            <br />**L** - Letter<br />**F** - Large Letter<br />**P** - Parcel<br />**S** - Printed Papers - International Services Only  # noqa: E501

        :param service_format: The service_format of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["L", "F", "P", "S"]  # noqa: E501
        if service_format not in allowed_values:
            raise ValueError(
                "Invalid value for `service_format` ({0}), must be one of {1}"  # noqa: E501
                .format(service_format, allowed_values)
            )

        self._service_format = service_format

    @property
    def tracked(self):
        """Gets the tracked of this ServiceAvailabilityServiceOptions.  # noqa: E501

        Tracked Services<br />If true, only return Tracked Services.  # noqa: E501

        :return: The tracked of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :rtype: bool
        """
        return self._tracked

    @tracked.setter
    def tracked(self, tracked):
        """Sets the tracked of this ServiceAvailabilityServiceOptions.

        Tracked Services<br />If true, only return Tracked Services.  # noqa: E501

        :param tracked: The tracked of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :type: bool
        """

        self._tracked = tracked

    @property
    def signature_required(self):
        """Gets the signature_required of this ServiceAvailabilityServiceOptions.  # noqa: E501

        Signature Required<br />If true, only return services that are either with signature or support the Recorded Signed For enhancement.  # noqa: E501

        :return: The signature_required of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :rtype: bool
        """
        return self._signature_required

    @signature_required.setter
    def signature_required(self, signature_required):
        """Sets the signature_required of this ServiceAvailabilityServiceOptions.

        Signature Required<br />If true, only return services that are either with signature or support the Recorded Signed For enhancement.  # noqa: E501

        :param signature_required: The signature_required of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :type: bool
        """

        self._signature_required = signature_required

    @property
    def safeplace(self):
        """Gets the safeplace of this ServiceAvailabilityServiceOptions.  # noqa: E501

        Safe Place Enhancement<br />If true, only return services that support the Safe Place enhancement.  # noqa: E501

        :return: The safeplace of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :rtype: bool
        """
        return self._safeplace

    @safeplace.setter
    def safeplace(self, safeplace):
        """Sets the safeplace of this ServiceAvailabilityServiceOptions.

        Safe Place Enhancement<br />If true, only return services that support the Safe Place enhancement.  # noqa: E501

        :param safeplace: The safeplace of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :type: bool
        """

        self._safeplace = safeplace

    @property
    def local_collect(self):
        """Gets the local_collect of this ServiceAvailabilityServiceOptions.  # noqa: E501

        Local Collect Enhancement<br />If true, only return services that support the Local Collect enhancement.  # noqa: E501

        :return: The local_collect of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :rtype: bool
        """
        return self._local_collect

    @local_collect.setter
    def local_collect(self, local_collect):
        """Sets the local_collect of this ServiceAvailabilityServiceOptions.

        Local Collect Enhancement<br />If true, only return services that support the Local Collect enhancement.  # noqa: E501

        :param local_collect: The local_collect of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :type: bool
        """

        self._local_collect = local_collect

    @property
    def saturday_guaranteed(self):
        """Gets the saturday_guaranteed of this ServiceAvailabilityServiceOptions.  # noqa: E501

        Saturday Guaranteed Enhancement<br />If true, only return services that support the Saturday Guaranteed enhancement.  # noqa: E501

        :return: The saturday_guaranteed of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :rtype: bool
        """
        return self._saturday_guaranteed

    @saturday_guaranteed.setter
    def saturday_guaranteed(self, saturday_guaranteed):
        """Sets the saturday_guaranteed of this ServiceAvailabilityServiceOptions.

        Saturday Guaranteed Enhancement<br />If true, only return services that support the Saturday Guaranteed enhancement.  # noqa: E501

        :param saturday_guaranteed: The saturday_guaranteed of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :type: bool
        """

        self._saturday_guaranteed = saturday_guaranteed

    @property
    def consequential_loss(self):
        """Gets the consequential_loss of this ServiceAvailabilityServiceOptions.  # noqa: E501

        Consequential Loss Enhancement<br />If true, only return services that support the Consequential Loss enhancement.  # noqa: E501

        :return: The consequential_loss of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :rtype: bool
        """
        return self._consequential_loss

    @consequential_loss.setter
    def consequential_loss(self, consequential_loss):
        """Sets the consequential_loss of this ServiceAvailabilityServiceOptions.

        Consequential Loss Enhancement<br />If true, only return services that support the Consequential Loss enhancement.  # noqa: E501

        :param consequential_loss: The consequential_loss of this ServiceAvailabilityServiceOptions.  # noqa: E501
        :type: bool
        """

        self._consequential_loss = consequential_loss

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceAvailabilityServiceOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceAvailabilityServiceOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
