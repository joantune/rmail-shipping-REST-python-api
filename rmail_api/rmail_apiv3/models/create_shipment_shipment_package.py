# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateShipmentShipmentPackage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_occurrence': 'int',
        'packaging_id': 'str',
        'weight': 'float',
        'length': 'float',
        'width': 'float',
        'height': 'float'
    }

    attribute_map = {
        'package_occurrence': 'PackageOccurrence',
        'packaging_id': 'PackagingId',
        'weight': 'Weight',
        'length': 'Length',
        'width': 'Width',
        'height': 'Height'
    }

    def __init__(self, package_occurrence=None, packaging_id=None, weight=None, length=None, width=None, height=None):  # noqa: E501
        """CreateShipmentShipmentPackage - a model defined in Swagger"""  # noqa: E501
        self._package_occurrence = None
        self._packaging_id = None
        self._weight = None
        self._length = None
        self._width = None
        self._height = None
        self.discriminator = None
        self.package_occurrence = package_occurrence
        if packaging_id is not None:
            self.packaging_id = packaging_id
        self.weight = weight
        if length is not None:
            self.length = length
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height

    @property
    def package_occurrence(self):
        """Gets the package_occurrence of this CreateShipmentShipmentPackage.  # noqa: E501

        Package Occurrence<br />Unique package number within this shipment.<br />Cannot exceed total number of packages.  # noqa: E501

        :return: The package_occurrence of this CreateShipmentShipmentPackage.  # noqa: E501
        :rtype: int
        """
        return self._package_occurrence

    @package_occurrence.setter
    def package_occurrence(self, package_occurrence):
        """Sets the package_occurrence of this CreateShipmentShipmentPackage.

        Package Occurrence<br />Unique package number within this shipment.<br />Cannot exceed total number of packages.  # noqa: E501

        :param package_occurrence: The package_occurrence of this CreateShipmentShipmentPackage.  # noqa: E501
        :type: int
        """
        if package_occurrence is None:
            raise ValueError("Invalid value for `package_occurrence`, must not be `None`")  # noqa: E501

        self._package_occurrence = package_occurrence

    @property
    def packaging_id(self):
        """Gets the packaging_id of this CreateShipmentShipmentPackage.  # noqa: E501

        Packaging ID<br />If supplied, packaging details will be populated from the stored information.  # noqa: E501

        :return: The packaging_id of this CreateShipmentShipmentPackage.  # noqa: E501
        :rtype: str
        """
        return self._packaging_id

    @packaging_id.setter
    def packaging_id(self, packaging_id):
        """Sets the packaging_id of this CreateShipmentShipmentPackage.

        Packaging ID<br />If supplied, packaging details will be populated from the stored information.  # noqa: E501

        :param packaging_id: The packaging_id of this CreateShipmentShipmentPackage.  # noqa: E501
        :type: str
        """

        self._packaging_id = packaging_id

    @property
    def weight(self):
        """Gets the weight of this CreateShipmentShipmentPackage.  # noqa: E501

        Total Package Weight.<br />            <br />This field will be used as the Shipment Weight for single-package services such as RMG.<br />The package weight must be greater than or equal to the sum of all item weights and packaging, if this information is provided.<br />Min weight: 1 gram.<br />*Optional/Overwritten for Average Weight Services - Average Weight Customers only.*  # noqa: E501

        :return: The weight of this CreateShipmentShipmentPackage.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this CreateShipmentShipmentPackage.

        Total Package Weight.<br />            <br />This field will be used as the Shipment Weight for single-package services such as RMG.<br />The package weight must be greater than or equal to the sum of all item weights and packaging, if this information is provided.<br />Min weight: 1 gram.<br />*Optional/Overwritten for Average Weight Services - Average Weight Customers only.*  # noqa: E501

        :param weight: The weight of this CreateShipmentShipmentPackage.  # noqa: E501
        :type: float
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def length(self):
        """Gets the length of this CreateShipmentShipmentPackage.  # noqa: E501

        Package Length<br />Dimensions are in Centimetres.<br />*Dimensions are optional, however supplying accurate information helps ensure a smooth delivery experience.*  # noqa: E501

        :return: The length of this CreateShipmentShipmentPackage.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this CreateShipmentShipmentPackage.

        Package Length<br />Dimensions are in Centimetres.<br />*Dimensions are optional, however supplying accurate information helps ensure a smooth delivery experience.*  # noqa: E501

        :param length: The length of this CreateShipmentShipmentPackage.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def width(self):
        """Gets the width of this CreateShipmentShipmentPackage.  # noqa: E501

        Package Width<br />Dimensions are in Centimetres.<br />*Dimensions are optional, however supplying accurate information helps ensure a smooth delivery experience.*  # noqa: E501

        :return: The width of this CreateShipmentShipmentPackage.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this CreateShipmentShipmentPackage.

        Package Width<br />Dimensions are in Centimetres.<br />*Dimensions are optional, however supplying accurate information helps ensure a smooth delivery experience.*  # noqa: E501

        :param width: The width of this CreateShipmentShipmentPackage.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this CreateShipmentShipmentPackage.  # noqa: E501

        Package Height<br />Dimensions are in Centimetres.<br />*Dimensions are optional, however supplying accurate information helps ensure a smooth delivery experience.*  # noqa: E501

        :return: The height of this CreateShipmentShipmentPackage.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this CreateShipmentShipmentPackage.

        Package Height<br />Dimensions are in Centimetres.<br />*Dimensions are optional, however supplying accurate information helps ensure a smooth delivery experience.*  # noqa: E501

        :param height: The height of this CreateShipmentShipmentPackage.  # noqa: E501
        :type: float
        """

        self._height = height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateShipmentShipmentPackage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateShipmentShipmentPackage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
