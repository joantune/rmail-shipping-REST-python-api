# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ServiceAvailabilityDestination(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_id': 'str',
        'town': 'str',
        'country_code': 'str',
        'postcode': 'str'
    }

    attribute_map = {
        'address_id': 'AddressId',
        'town': 'Town',
        'country_code': 'CountryCode',
        'postcode': 'Postcode'
    }

    def __init__(self, address_id=None, town=None, country_code=None, postcode=None):  # noqa: E501
        """ServiceAvailabilityDestination - a model defined in Swagger"""  # noqa: E501
        self._address_id = None
        self._town = None
        self._country_code = None
        self._postcode = None
        self.discriminator = None
        if address_id is not None:
            self.address_id = address_id
        if town is not None:
            self.town = town
        if country_code is not None:
            self.country_code = country_code
        if postcode is not None:
            self.postcode = postcode

    @property
    def address_id(self):
        """Gets the address_id of this ServiceAvailabilityDestination.  # noqa: E501

        Destination Address ID<br />If supplied all destination address fields will be ignored and the stored address will be used.  # noqa: E501

        :return: The address_id of this ServiceAvailabilityDestination.  # noqa: E501
        :rtype: str
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this ServiceAvailabilityDestination.

        Destination Address ID<br />If supplied all destination address fields will be ignored and the stored address will be used.  # noqa: E501

        :param address_id: The address_id of this ServiceAvailabilityDestination.  # noqa: E501
        :type: str
        """

        self._address_id = address_id

    @property
    def town(self):
        """Gets the town of this ServiceAvailabilityDestination.  # noqa: E501

        Town<br />Required if Address Id is not provided.  # noqa: E501

        :return: The town of this ServiceAvailabilityDestination.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this ServiceAvailabilityDestination.

        Town<br />Required if Address Id is not provided.  # noqa: E501

        :param town: The town of this ServiceAvailabilityDestination.  # noqa: E501
        :type: str
        """

        self._town = town

    @property
    def country_code(self):
        """Gets the country_code of this ServiceAvailabilityDestination.  # noqa: E501

        Country Code<br />[ISO Alpha-2 Country Code](https://www.nationsonline.org/oneworld/country_code_list.htm)  per ISO 3166 Standard.  Required if Address Id is not provided  # noqa: E501

        :return: The country_code of this ServiceAvailabilityDestination.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ServiceAvailabilityDestination.

        Country Code<br />[ISO Alpha-2 Country Code](https://www.nationsonline.org/oneworld/country_code_list.htm)  per ISO 3166 Standard.  Required if Address Id is not provided  # noqa: E501

        :param country_code: The country_code of this ServiceAvailabilityDestination.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def postcode(self):
        """Gets the postcode of this ServiceAvailabilityDestination.  # noqa: E501

        Postcode / Zip<br />Mandatory for all domestic destinations and some international destinations if the Address Id is not provided.  # noqa: E501

        :return: The postcode of this ServiceAvailabilityDestination.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this ServiceAvailabilityDestination.

        Postcode / Zip<br />Mandatory for all domestic destinations and some international destinations if the Address Id is not provided.  # noqa: E501

        :param postcode: The postcode of this ServiceAvailabilityDestination.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceAvailabilityDestination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceAvailabilityDestination):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
