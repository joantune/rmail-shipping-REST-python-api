# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rmail_apiv3.api_client import ApiClient


class ItemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def items_create(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Create Item  # noqa: E501

        Add a new item to your stored items that you can then use in your shipment requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_create(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Item body: The item. (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.items_create_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
        else:
            (data) = self.items_create_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
            return data

    def items_create_with_http_info(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Create Item  # noqa: E501

        Add a new item to your stored items that you can then use in your shipment requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_create_with_http_info(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Item body: The item. (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method items_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `items_create`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `items_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID']  # noqa: E501

        return self.api_client.call_api(
            '/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def items_delete(self, x_rmg_auth_token, item_id, **kwargs):  # noqa: E501
        """Delete Item  # noqa: E501

        Deletes the specified item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_delete(x_rmg_auth_token, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str item_id: Your unique Item ID of the item to delete. (required)
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.items_delete_with_http_info(x_rmg_auth_token, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.items_delete_with_http_info(x_rmg_auth_token, item_id, **kwargs)  # noqa: E501
            return data

    def items_delete_with_http_info(self, x_rmg_auth_token, item_id, **kwargs):  # noqa: E501
        """Delete Item  # noqa: E501

        Deletes the specified item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_delete_with_http_info(x_rmg_auth_token, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str item_id: Your unique Item ID of the item to delete. (required)
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_rmg_auth_token', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method items_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `items_delete`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `items_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID']  # noqa: E501

        return self.api_client.call_api(
            '/items/{itemId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def items_get(self, x_rmg_auth_token, item_id, **kwargs):  # noqa: E501
        """Get Item  # noqa: E501

        Get the item specified by your unique Item ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_get(x_rmg_auth_token, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str item_id: Your unique Item ID. (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.items_get_with_http_info(x_rmg_auth_token, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.items_get_with_http_info(x_rmg_auth_token, item_id, **kwargs)  # noqa: E501
            return data

    def items_get_with_http_info(self, x_rmg_auth_token, item_id, **kwargs):  # noqa: E501
        """Get Item  # noqa: E501

        Get the item specified by your unique Item ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_get_with_http_info(x_rmg_auth_token, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str item_id: Your unique Item ID. (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_rmg_auth_token', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method items_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `items_get`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `items_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID']  # noqa: E501

        return self.api_client.call_api(
            '/items/{itemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Item',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def items_get_all(self, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Get Items  # noqa: E501

        Get all of your stored items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_get_all(x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: list[Item]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.items_get_all_with_http_info(x_rmg_auth_token, **kwargs)  # noqa: E501
        else:
            (data) = self.items_get_all_with_http_info(x_rmg_auth_token, **kwargs)  # noqa: E501
            return data

    def items_get_all_with_http_info(self, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Get Items  # noqa: E501

        Get all of your stored items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_get_all_with_http_info(x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: list[Item]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_rmg_auth_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method items_get_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `items_get_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID']  # noqa: E501

        return self.api_client.call_api(
            '/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Item]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def items_update(self, body, x_rmg_auth_token, item_id, **kwargs):  # noqa: E501
        """Update item  # noqa: E501

        Update an item that is already stored with new details. The whole item will be replaced with new details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_update(body, x_rmg_auth_token, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Item body: The item with the updated details. (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str item_id: Your unique Item ID of the item to update. (required)
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.items_update_with_http_info(body, x_rmg_auth_token, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.items_update_with_http_info(body, x_rmg_auth_token, item_id, **kwargs)  # noqa: E501
            return data

    def items_update_with_http_info(self, body, x_rmg_auth_token, item_id, **kwargs):  # noqa: E501
        """Update item  # noqa: E501

        Update an item that is already stored with new details. The whole item will be replaced with new details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_update_with_http_info(body, x_rmg_auth_token, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Item body: The item with the updated details. (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str item_id: Your unique Item ID of the item to update. (required)
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method items_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `items_update`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `items_update`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `items_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID']  # noqa: E501

        return self.api_client.call_api(
            '/items/{itemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
