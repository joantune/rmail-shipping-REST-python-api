# coding: utf-8

"""
    Royal Mail API Shipping V2 (REST)

    This API specification details the requirements for integrating with Royal Mail API Shipping V2 (REST). It specifically covers how the Royal Mail API Shipping V2 (REST) can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V2 (REST) exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail. Built on industry standards, Royal Mail API Shipping V2 (REST) provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels.  There are no costs to customers for using the Royal Mail API Shipping V2 (REST) services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating cancelling a shipment and manifesting click here&#58; www.royalmail.com/pro-shipping-help  # noqa: E501

    OpenAPI spec version: 1.0.21
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ShipmentBarcodeItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipment_number': 'str',
        'item_id': 'str',
        'status': 'str',
        'valid_from': 'date',
        'label': 'str'
    }

    attribute_map = {
        'shipment_number': 'shipmentNumber',
        'item_id': 'itemID',
        'status': 'status',
        'valid_from': 'validFrom',
        'label': 'label'
    }

    def __init__(self, shipment_number=None, item_id=None, status=None, valid_from=None, label=None):  # noqa: E501
        """ShipmentBarcodeItem - a model defined in Swagger"""  # noqa: E501
        self._shipment_number = None
        self._item_id = None
        self._status = None
        self._valid_from = None
        self._label = None
        self.discriminator = None
        self.shipment_number = shipment_number
        self.item_id = item_id
        self.status = status
        if valid_from is not None:
            self.valid_from = valid_from
        if label is not None:
            self.label = label

    @property
    def shipment_number(self):
        """Gets the shipment_number of this ShipmentBarcodeItem.  # noqa: E501

        For barcoded products i.e. you have used offline barcoding operation, this field will contain the 1D barcode number sent in the request. For nonbarcoded products, this field will contain the Shipping API V2 internal reference number. For requests where there are multiple items, there will be a corresponding shipmentNumber for each item.  # noqa: E501

        :return: The shipment_number of this ShipmentBarcodeItem.  # noqa: E501
        :rtype: str
        """
        return self._shipment_number

    @shipment_number.setter
    def shipment_number(self, shipment_number):
        """Sets the shipment_number of this ShipmentBarcodeItem.

        For barcoded products i.e. you have used offline barcoding operation, this field will contain the 1D barcode number sent in the request. For nonbarcoded products, this field will contain the Shipping API V2 internal reference number. For requests where there are multiple items, there will be a corresponding shipmentNumber for each item.  # noqa: E501

        :param shipment_number: The shipment_number of this ShipmentBarcodeItem.  # noqa: E501
        :type: str
        """
        if shipment_number is None:
            raise ValueError("Invalid value for `shipment_number`, must not be `None`")  # noqa: E501

        self._shipment_number = shipment_number

    @property
    def item_id(self):
        """Gets the item_id of this ShipmentBarcodeItem.  # noqa: E501

        This is the 2D item ID used in the label  # noqa: E501

        :return: The item_id of this ShipmentBarcodeItem.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this ShipmentBarcodeItem.

        This is the 2D item ID used in the label  # noqa: E501

        :param item_id: The item_id of this ShipmentBarcodeItem.  # noqa: E501
        :type: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501

        self._item_id = item_id

    @property
    def status(self):
        """Gets the status of this ShipmentBarcodeItem.  # noqa: E501

        This will be set to 'Allocated' or 'Printed'. 'Printed' when label is also returned when creating shipment, otherwise 'Allocated' set. For the full set of values the shipment status can hold, please go to Pro Shipping V2 API page on the Royal Mail API (Developer) Portal and refer to the Shipping API Reference Data sheet.  # noqa: E501

        :return: The status of this ShipmentBarcodeItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ShipmentBarcodeItem.

        This will be set to 'Allocated' or 'Printed'. 'Printed' when label is also returned when creating shipment, otherwise 'Allocated' set. For the full set of values the shipment status can hold, please go to Pro Shipping V2 API page on the Royal Mail API (Developer) Portal and refer to the Shipping API Reference Data sheet.  # noqa: E501

        :param status: The status of this ShipmentBarcodeItem.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def valid_from(self):
        """Gets the valid_from of this ShipmentBarcodeItem.  # noqa: E501

        Datetime value associated with when the shipment status code is valid from.  # noqa: E501

        :return: The valid_from of this ShipmentBarcodeItem.  # noqa: E501
        :rtype: date
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this ShipmentBarcodeItem.

        Datetime value associated with when the shipment status code is valid from.  # noqa: E501

        :param valid_from: The valid_from of this ShipmentBarcodeItem.  # noqa: E501
        :type: date
        """

        self._valid_from = valid_from

    @property
    def label(self):
        """Gets the label of this ShipmentBarcodeItem.  # noqa: E501

        Label in PDF format and Base64 encoded. Depending on the scenarios described below, the label contents returned here can vary depending on what is enabled in the Pro Shipping GUI.    For both domestic & international shipments:  1. A standard outward shipment label is returned if combined Create Shipment/ Include Label Image are enabled.  For domestic shipment only:  2. If #1. above is enabled and Include Returns Label is also enabled, then two shipments will be created and a standard outward shipment label is created for the outward shipment and a returns label is created for the return shipment.  For international shipment only:  3. If #1. above is enabled and Include CN Documentation is also enabled, then the label also includes the CN23 Customs document as well as the standard outward shipment label. Note, no Commercial Invoice is returned.  # noqa: E501

        :return: The label of this ShipmentBarcodeItem.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ShipmentBarcodeItem.

        Label in PDF format and Base64 encoded. Depending on the scenarios described below, the label contents returned here can vary depending on what is enabled in the Pro Shipping GUI.    For both domestic & international shipments:  1. A standard outward shipment label is returned if combined Create Shipment/ Include Label Image are enabled.  For domestic shipment only:  2. If #1. above is enabled and Include Returns Label is also enabled, then two shipments will be created and a standard outward shipment label is created for the outward shipment and a returns label is created for the return shipment.  For international shipment only:  3. If #1. above is enabled and Include CN Documentation is also enabled, then the label also includes the CN23 Customs document as well as the standard outward shipment label. Note, no Commercial Invoice is returned.  # noqa: E501

        :param label: The label of this ShipmentBarcodeItem.  # noqa: E501
        :type: str
        """

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentBarcodeItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentBarcodeItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
