# coding: utf-8

"""
    Royal Mail API Shipping V2 (REST)

    This API specification details the requirements for integrating with Royal Mail API Shipping V2 (REST). It specifically covers how the Royal Mail API Shipping V2 (REST) can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V2 (REST) exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail. Built on industry standards, Royal Mail API Shipping V2 (REST) provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels.  There are no costs to customers for using the Royal Mail API Shipping V2 (REST) services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating cancelling a shipment and manifesting click here&#58; www.royalmail.com/pro-shipping-help  # noqa: E501

    OpenAPI spec version: 1.0.21
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ManifestRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_occurence': 'str',
        'service_code': 'str',
        'your_description': 'str',
        'your_reference': 'str'
    }

    attribute_map = {
        'service_occurence': 'serviceOccurence',
        'service_code': 'serviceCode',
        'your_description': 'yourDescription',
        'your_reference': 'yourReference'
    }

    def __init__(self, service_occurence=None, service_code=None, your_description=None, your_reference=None):  # noqa: E501
        """ManifestRequest - a model defined in Swagger"""  # noqa: E501
        self._service_occurence = None
        self._service_code = None
        self._your_description = None
        self._your_reference = None
        self.discriminator = None
        if service_occurence is not None:
            self.service_occurence = service_occurence
        if service_code is not None:
            self.service_code = service_code
        if your_description is not None:
            self.your_description = your_description
        if your_reference is not None:
            self.your_reference = your_reference

    @property
    def service_occurence(self):
        """Gets the service_occurence of this ManifestRequest.  # noqa: E501

        All or one Service Occurrence. If not included then ALL Service Occurrences are included in the manifest.  # noqa: E501

        :return: The service_occurence of this ManifestRequest.  # noqa: E501
        :rtype: str
        """
        return self._service_occurence

    @service_occurence.setter
    def service_occurence(self, service_occurence):
        """Sets the service_occurence of this ManifestRequest.

        All or one Service Occurrence. If not included then ALL Service Occurrences are included in the manifest.  # noqa: E501

        :param service_occurence: The service_occurence of this ManifestRequest.  # noqa: E501
        :type: str
        """

        self._service_occurence = service_occurence

    @property
    def service_code(self):
        """Gets the service_code of this ManifestRequest.  # noqa: E501

        All or one Service Offerings. If not included then ALL Service Offerings are included in the manifest. Please note that this field is case sensitive.  # noqa: E501

        :return: The service_code of this ManifestRequest.  # noqa: E501
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this ManifestRequest.

        All or one Service Offerings. If not included then ALL Service Offerings are included in the manifest. Please note that this field is case sensitive.  # noqa: E501

        :param service_code: The service_code of this ManifestRequest.  # noqa: E501
        :type: str
        """

        self._service_code = service_code

    @property
    def your_description(self):
        """Gets the your_description of this ManifestRequest.  # noqa: E501

        This is a description field that corresponds to the Your Description field in RM's Online Business Account (OBA). This is for customer reference and will not appear on any paperwork.  # noqa: E501

        :return: The your_description of this ManifestRequest.  # noqa: E501
        :rtype: str
        """
        return self._your_description

    @your_description.setter
    def your_description(self, your_description):
        """Sets the your_description of this ManifestRequest.

        This is a description field that corresponds to the Your Description field in RM's Online Business Account (OBA). This is for customer reference and will not appear on any paperwork.  # noqa: E501

        :param your_description: The your_description of this ManifestRequest.  # noqa: E501
        :type: str
        """

        self._your_description = your_description

    @property
    def your_reference(self):
        """Gets the your_reference of this ManifestRequest.  # noqa: E501

        Included on the Customer Collection Receipt.  # noqa: E501

        :return: The your_reference of this ManifestRequest.  # noqa: E501
        :rtype: str
        """
        return self._your_reference

    @your_reference.setter
    def your_reference(self, your_reference):
        """Sets the your_reference of this ManifestRequest.

        Included on the Customer Collection Receipt.  # noqa: E501

        :param your_reference: The your_reference of this ManifestRequest.  # noqa: E501
        :type: str
        """

        self._your_reference = your_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManifestRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManifestRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
