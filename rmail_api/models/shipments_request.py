# coding: utf-8

"""
    Royal Mail API Shipping V2 (REST)

    This API specification details the requirements for integrating with Royal Mail API Shipping V2 (REST). It specifically covers how the Royal Mail API Shipping V2 (REST) can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V2 (REST) exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail. Built on industry standards, Royal Mail API Shipping V2 (REST) provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels.  There are no costs to customers for using the Royal Mail API Shipping V2 (REST) services, however customers’ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating cancelling a shipment and manifesting click here&#58; www.royalmail.com/pro-shipping-help  # noqa: E501

    OpenAPI spec version: 1.0.21
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from rmail_api.models.address import Address  # noqa: F401,E501
from rmail_api.models.contact import Contact  # noqa: F401,E501
from rmail_api.models.service import Service  # noqa: F401,E501
from rmail_api.models.shipment_request_item_international import ShipmentRequestItemInternational  # noqa: F401,E501


class ShipmentsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipment_type': 'str',
        'service': 'Service',
        'bfpo_code': 'str',
        'shipping_date': 'str',
        'items': 'list[ShipmentRequestItemInternational]',
        'recipient_contact': 'Contact',
        'recipient_address': 'Address',
        'sender_reference': 'str',
        'department_reference': 'str',
        'customer_reference': 'str',
        'safe_place': 'str',
        'international_info': 'object'
    }

    attribute_map = {
        'shipment_type': 'shipmentType',
        'service': 'service',
        'bfpo_code': 'bfpoCode',
        'shipping_date': 'shippingDate',
        'items': 'items',
        'recipient_contact': 'recipientContact',
        'recipient_address': 'recipientAddress',
        'sender_reference': 'senderReference',
        'department_reference': 'departmentReference',
        'customer_reference': 'customerReference',
        'safe_place': 'safePlace',
        'international_info': 'internationalInfo'
    }

    def __init__(self, shipment_type=None, service=None, bfpo_code=None, shipping_date=None, items=None, recipient_contact=None, recipient_address=None, sender_reference=None, department_reference=None, customer_reference=None, safe_place=None, international_info=None):  # noqa: E501
        """ShipmentsRequest - a model defined in Swagger"""  # noqa: E501
        self._shipment_type = None
        self._service = None
        self._bfpo_code = None
        self._shipping_date = None
        self._items = None
        self._recipient_contact = None
        self._recipient_address = None
        self._sender_reference = None
        self._department_reference = None
        self._customer_reference = None
        self._safe_place = None
        self._international_info = None
        self.discriminator = None
        self.shipment_type = shipment_type
        self.service = service
        if bfpo_code is not None:
            self.bfpo_code = bfpo_code
        if shipping_date is not None:
            self.shipping_date = shipping_date
        if items is not None:
            self.items = items
        self.recipient_contact = recipient_contact
        self.recipient_address = recipient_address
        if sender_reference is not None:
            self.sender_reference = sender_reference
        if department_reference is not None:
            self.department_reference = department_reference
        if customer_reference is not None:
            self.customer_reference = customer_reference
        if safe_place is not None:
            self.safe_place = safe_place
        self.international_info = international_info

    @property
    def shipment_type(self):
        """Gets the shipment_type of this ShipmentsRequest.  # noqa: E501

        Specifies whether the shipment being created is a standard delivery service or a returns service. Accepted values are ‘Delivery’ and ‘Return’. Please note that this field is not case sensitive.  # noqa: E501

        :return: The shipment_type of this ShipmentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._shipment_type

    @shipment_type.setter
    def shipment_type(self, shipment_type):
        """Sets the shipment_type of this ShipmentsRequest.

        Specifies whether the shipment being created is a standard delivery service or a returns service. Accepted values are ‘Delivery’ and ‘Return’. Please note that this field is not case sensitive.  # noqa: E501

        :param shipment_type: The shipment_type of this ShipmentsRequest.  # noqa: E501
        :type: str
        """
        if shipment_type is None:
            raise ValueError("Invalid value for `shipment_type`, must not be `None`")  # noqa: E501

        self._shipment_type = shipment_type

    @property
    def service(self):
        """Gets the service of this ShipmentsRequest.  # noqa: E501


        :return: The service of this ShipmentsRequest.  # noqa: E501
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ShipmentsRequest.


        :param service: The service of this ShipmentsRequest.  # noqa: E501
        :type: Service
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")  # noqa: E501

        self._service = service

    @property
    def bfpo_code(self):
        """Gets the bfpo_code of this ShipmentsRequest.  # noqa: E501

        For HM Forces (BFPO) Service Type only when the Service Format is not International Flat, International Letter or International Packet. For the list of permissible values, please go to API Shipping V2 page on the Royal Mail API (Developer) Portal and refer to API Shipping Reference Data.  # noqa: E501

        :return: The bfpo_code of this ShipmentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._bfpo_code

    @bfpo_code.setter
    def bfpo_code(self, bfpo_code):
        """Sets the bfpo_code of this ShipmentsRequest.

        For HM Forces (BFPO) Service Type only when the Service Format is not International Flat, International Letter or International Packet. For the list of permissible values, please go to API Shipping V2 page on the Royal Mail API (Developer) Portal and refer to API Shipping Reference Data.  # noqa: E501

        :param bfpo_code: The bfpo_code of this ShipmentsRequest.  # noqa: E501
        :type: str
        """

        self._bfpo_code = bfpo_code

    @property
    def shipping_date(self):
        """Gets the shipping_date of this ShipmentsRequest.  # noqa: E501

        This is the date that the item will be physically sent (in the format YYYY-MM-DD). This may be up to 28 days in the future. Please note that for returns a Shipping date must be provided.  # noqa: E501

        :return: The shipping_date of this ShipmentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._shipping_date

    @shipping_date.setter
    def shipping_date(self, shipping_date):
        """Sets the shipping_date of this ShipmentsRequest.

        This is the date that the item will be physically sent (in the format YYYY-MM-DD). This may be up to 28 days in the future. Please note that for returns a Shipping date must be provided.  # noqa: E501

        :param shipping_date: The shipping_date of this ShipmentsRequest.  # noqa: E501
        :type: str
        """

        self._shipping_date = shipping_date

    @property
    def items(self):
        """Gets the items of this ShipmentsRequest.  # noqa: E501


        :return: The items of this ShipmentsRequest.  # noqa: E501
        :rtype: list[ShipmentRequestItemInternational]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ShipmentsRequest.


        :param items: The items of this ShipmentsRequest.  # noqa: E501
        :type: list[ShipmentRequestItemInternational]
        """

        self._items = items

    @property
    def recipient_contact(self):
        """Gets the recipient_contact of this ShipmentsRequest.  # noqa: E501


        :return: The recipient_contact of this ShipmentsRequest.  # noqa: E501
        :rtype: Contact
        """
        return self._recipient_contact

    @recipient_contact.setter
    def recipient_contact(self, recipient_contact):
        """Sets the recipient_contact of this ShipmentsRequest.


        :param recipient_contact: The recipient_contact of this ShipmentsRequest.  # noqa: E501
        :type: Contact
        """
        if recipient_contact is None:
            raise ValueError("Invalid value for `recipient_contact`, must not be `None`")  # noqa: E501

        self._recipient_contact = recipient_contact

    @property
    def recipient_address(self):
        """Gets the recipient_address of this ShipmentsRequest.  # noqa: E501


        :return: The recipient_address of this ShipmentsRequest.  # noqa: E501
        :rtype: Address
        """
        return self._recipient_address

    @recipient_address.setter
    def recipient_address(self, recipient_address):
        """Sets the recipient_address of this ShipmentsRequest.


        :param recipient_address: The recipient_address of this ShipmentsRequest.  # noqa: E501
        :type: Address
        """
        if recipient_address is None:
            raise ValueError("Invalid value for `recipient_address`, must not be `None`")  # noqa: E501

        self._recipient_address = recipient_address

    @property
    def sender_reference(self):
        """Gets the sender_reference of this ShipmentsRequest.  # noqa: E501

        This field allows the user to supply their own reference number. Where supported (e.g. Tracked Returns) this number will appear on the label.  # noqa: E501

        :return: The sender_reference of this ShipmentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._sender_reference

    @sender_reference.setter
    def sender_reference(self, sender_reference):
        """Sets the sender_reference of this ShipmentsRequest.

        This field allows the user to supply their own reference number. Where supported (e.g. Tracked Returns) this number will appear on the label.  # noqa: E501

        :param sender_reference: The sender_reference of this ShipmentsRequest.  # noqa: E501
        :type: str
        """

        self._sender_reference = sender_reference

    @property
    def department_reference(self):
        """Gets the department_reference of this ShipmentsRequest.  # noqa: E501

        This is the department reference code that customers can define in OBA.  # noqa: E501

        :return: The department_reference of this ShipmentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._department_reference

    @department_reference.setter
    def department_reference(self, department_reference):
        """Sets the department_reference of this ShipmentsRequest.

        This is the department reference code that customers can define in OBA.  # noqa: E501

        :param department_reference: The department_reference of this ShipmentsRequest.  # noqa: E501
        :type: str
        """

        self._department_reference = department_reference

    @property
    def customer_reference(self):
        """Gets the customer_reference of this ShipmentsRequest.  # noqa: E501

        This field allows customers to supply a reference that applies to multiple shipments and is included to mirror the functionality offered by the Customer Reference field in OBA, whereby a reference can be associated to a group of items. For references that apply to a single shipment, the senderReference field should be used. **Warning** Misuse of this field may result in incorrect billing.  # noqa: E501

        :return: The customer_reference of this ShipmentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_reference

    @customer_reference.setter
    def customer_reference(self, customer_reference):
        """Sets the customer_reference of this ShipmentsRequest.

        This field allows customers to supply a reference that applies to multiple shipments and is included to mirror the functionality offered by the Customer Reference field in OBA, whereby a reference can be associated to a group of items. For references that apply to a single shipment, the senderReference field should be used. **Warning** Misuse of this field may result in incorrect billing.  # noqa: E501

        :param customer_reference: The customer_reference of this ShipmentsRequest.  # noqa: E501
        :type: str
        """

        self._customer_reference = customer_reference

    @property
    def safe_place(self):
        """Gets the safe_place of this ShipmentsRequest.  # noqa: E501

        For Tracked non-signature service offerings only; this field allows a string that gives details of the recipient's designated safeplace (e.g. “inside the porch”).  # noqa: E501

        :return: The safe_place of this ShipmentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._safe_place

    @safe_place.setter
    def safe_place(self, safe_place):
        """Sets the safe_place of this ShipmentsRequest.

        For Tracked non-signature service offerings only; this field allows a string that gives details of the recipient's designated safeplace (e.g. “inside the porch”).  # noqa: E501

        :param safe_place: The safe_place of this ShipmentsRequest.  # noqa: E501
        :type: str
        """

        self._safe_place = safe_place

    @property
    def international_info(self):
        """Gets the international_info of this ShipmentsRequest.  # noqa: E501


        :return: The international_info of this ShipmentsRequest.  # noqa: E501
        :rtype: object
        """
        return self._international_info

    @international_info.setter
    def international_info(self, international_info):
        """Sets the international_info of this ShipmentsRequest.


        :param international_info: The international_info of this ShipmentsRequest.  # noqa: E501
        :type: object
        """
        if international_info is None:
            raise ValueError("Invalid value for `international_info`, must not be `None`")  # noqa: E501

        self._international_info = international_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
