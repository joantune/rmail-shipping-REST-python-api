# coding: utf-8

"""
    Royal Mail API Shipping V2 (REST)

    This API specification details the requirements for integrating with Royal Mail API Shipping V2 (REST). It specifically covers how the Royal Mail API Shipping V2 (REST) can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V2 (REST) exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail. Built on industry standards, Royal Mail API Shipping V2 (REST) provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels.  There are no costs to customers for using the Royal Mail API Shipping V2 (REST) services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating cancelling a shipment and manifesting click here&#58; www.royalmail.com/pro-shipping-help  # noqa: E501

    OpenAPI spec version: 1.0.21
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from rmail_api.models.big_decimal import BigDecimal  # noqa: F401,E501


class Measurement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unit_of_measure': 'str',
        'value': 'BigDecimal'
    }

    attribute_map = {
        'unit_of_measure': 'unitOfMeasure',
        'value': 'value'
    }

    def __init__(self, unit_of_measure=None, value=None):  # noqa: E501
        """Measurement - a model defined in Swagger"""  # noqa: E501
        self._unit_of_measure = None
        self._value = None
        self.discriminator = None
        self.unit_of_measure = unit_of_measure
        self.value = value

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this Measurement.  # noqa: E501

        'g' for grams. 'kg' for kilograms. 'cm' for centimeters.  For shipment/items must be 'g'. For shipment/internationalInfo/parcels, use appropriate 'g' or 'kg' for weight measures. For length, width and height fields, use 'cm' for parcel dimensions.  # noqa: E501

        :return: The unit_of_measure of this Measurement.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this Measurement.

        'g' for grams. 'kg' for kilograms. 'cm' for centimeters.  For shipment/items must be 'g'. For shipment/internationalInfo/parcels, use appropriate 'g' or 'kg' for weight measures. For length, width and height fields, use 'cm' for parcel dimensions.  # noqa: E501

        :param unit_of_measure: The unit_of_measure of this Measurement.  # noqa: E501
        :type: str
        """
        if unit_of_measure is None:
            raise ValueError("Invalid value for `unit_of_measure`, must not be `None`")  # noqa: E501
        allowed_values = ["g", "kg", "cm"]  # noqa: E501
        if unit_of_measure not in allowed_values:
            raise ValueError(
                "Invalid value for `unit_of_measure` ({0}), must be one of {1}"  # noqa: E501
                .format(unit_of_measure, allowed_values)
            )

        self._unit_of_measure = unit_of_measure

    @property
    def value(self):
        """Gets the value of this Measurement.  # noqa: E501

        For shipment/items, this is the weight in grams of each item (no decimal places). If the service has a weight band, for example Special Delivery, then the upper band will be used. For example, 150 grams will use the 100 to 200 grams band. Tracked services, for example, do not have a band and therefore take the actual weight. **Note** Where Average Weight End of Day option is turned ON, for Average Weight Products populate with '0'. For more information go to Pro Shipping V2 API page on the Royal Mail API (Developer) Portal and refer to Shipping API Reference Data for Average Weight Products.  # noqa: E501

        :return: The value of this Measurement.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Measurement.

        For shipment/items, this is the weight in grams of each item (no decimal places). If the service has a weight band, for example Special Delivery, then the upper band will be used. For example, 150 grams will use the 100 to 200 grams band. Tracked services, for example, do not have a band and therefore take the actual weight. **Note** Where Average Weight End of Day option is turned ON, for Average Weight Products populate with '0'. For more information go to Pro Shipping V2 API page on the Royal Mail API (Developer) Portal and refer to Shipping API Reference Data for Average Weight Products.  # noqa: E501

        :param value: The value of this Measurement.  # noqa: E501
        :type: BigDecimal
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Measurement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Measurement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
