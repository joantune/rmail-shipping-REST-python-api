# coding: utf-8

"""
    Royal Mail API Shipping V2 (REST)

    This API specification details the requirements for integrating with Royal Mail API Shipping V2 (REST). It specifically covers how the Royal Mail API Shipping V2 (REST) can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V2 (REST) exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail. Built on industry standards, Royal Mail API Shipping V2 (REST) provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels.  There are no costs to customers for using the Royal Mail API Shipping V2 (REST) services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating cancelling a shipment and manifesting click here&#58; www.royalmail.com/pro-shipping-help  # noqa: E501

    OpenAPI spec version: 1.0.21
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RecipientAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'building_name': 'str',
        'building_number': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'address_line3': 'str',
        'state_or_province': 'str',
        'post_town': 'str',
        'county': 'str',
        'post_code': 'str',
        'country': 'str'
    }

    attribute_map = {
        'building_name': 'buildingName',
        'building_number': 'buildingNumber',
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'address_line3': 'addressLine3',
        'state_or_province': 'stateOrProvince',
        'post_town': 'postTown',
        'county': 'county',
        'post_code': 'postCode',
        'country': 'country'
    }

    def __init__(self, building_name=None, building_number=None, address_line1=None, address_line2=None, address_line3=None, state_or_province=None, post_town=None, county=None, post_code=None, country=None):  # noqa: E501
        """RecipientAddress - a model defined in Swagger"""  # noqa: E501
        self._building_name = None
        self._building_number = None
        self._address_line1 = None
        self._address_line2 = None
        self._address_line3 = None
        self._state_or_province = None
        self._post_town = None
        self._county = None
        self._post_code = None
        self._country = None
        self.discriminator = None
        if building_name is not None:
            self.building_name = building_name
        if building_number is not None:
            self.building_number = building_number
        self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if address_line3 is not None:
            self.address_line3 = address_line3
        if state_or_province is not None:
            self.state_or_province = state_or_province
        self.post_town = post_town
        if county is not None:
            self.county = county
        self.post_code = post_code
        if country is not None:
            self.country = country

    @property
    def building_name(self):
        """Gets the building_name of this RecipientAddress.  # noqa: E501

        This field will be used if supplied but is not necessary to process a shipment. It does not replace the need for a full addressLine1 input.  # noqa: E501

        :return: The building_name of this RecipientAddress.  # noqa: E501
        :rtype: str
        """
        return self._building_name

    @building_name.setter
    def building_name(self, building_name):
        """Sets the building_name of this RecipientAddress.

        This field will be used if supplied but is not necessary to process a shipment. It does not replace the need for a full addressLine1 input.  # noqa: E501

        :param building_name: The building_name of this RecipientAddress.  # noqa: E501
        :type: str
        """

        self._building_name = building_name

    @property
    def building_number(self):
        """Gets the building_number of this RecipientAddress.  # noqa: E501

        This field will be used if supplied but is not necessary to process a shipment. It does not replace the need for a full addressLine1 input.  # noqa: E501

        :return: The building_number of this RecipientAddress.  # noqa: E501
        :rtype: str
        """
        return self._building_number

    @building_number.setter
    def building_number(self, building_number):
        """Sets the building_number of this RecipientAddress.

        This field will be used if supplied but is not necessary to process a shipment. It does not replace the need for a full addressLine1 input.  # noqa: E501

        :param building_number: The building_number of this RecipientAddress.  # noqa: E501
        :type: str
        """

        self._building_number = building_number

    @property
    def address_line1(self):
        """Gets the address_line1 of this RecipientAddress.  # noqa: E501

        First line of the address.  # noqa: E501

        :return: The address_line1 of this RecipientAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this RecipientAddress.

        First line of the address.  # noqa: E501

        :param address_line1: The address_line1 of this RecipientAddress.  # noqa: E501
        :type: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")  # noqa: E501

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this RecipientAddress.  # noqa: E501

        Second line of the address  # noqa: E501

        :return: The address_line2 of this RecipientAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this RecipientAddress.

        Second line of the address  # noqa: E501

        :param address_line2: The address_line2 of this RecipientAddress.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """Gets the address_line3 of this RecipientAddress.  # noqa: E501

        Third line of the address  # noqa: E501

        :return: The address_line3 of this RecipientAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this RecipientAddress.

        Third line of the address  # noqa: E501

        :param address_line3: The address_line3 of this RecipientAddress.  # noqa: E501
        :type: str
        """

        self._address_line3 = address_line3

    @property
    def state_or_province(self):
        """Gets the state_or_province of this RecipientAddress.  # noqa: E501

        State or Province  # noqa: E501

        :return: The state_or_province of this RecipientAddress.  # noqa: E501
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this RecipientAddress.

        State or Province  # noqa: E501

        :param state_or_province: The state_or_province of this RecipientAddress.  # noqa: E501
        :type: str
        """

        self._state_or_province = state_or_province

    @property
    def post_town(self):
        """Gets the post_town of this RecipientAddress.  # noqa: E501

        Town or City. The postTown will be updated to match the postTown resolved postcode.  # noqa: E501

        :return: The post_town of this RecipientAddress.  # noqa: E501
        :rtype: str
        """
        return self._post_town

    @post_town.setter
    def post_town(self, post_town):
        """Sets the post_town of this RecipientAddress.

        Town or City. The postTown will be updated to match the postTown resolved postcode.  # noqa: E501

        :param post_town: The post_town of this RecipientAddress.  # noqa: E501
        :type: str
        """
        if post_town is None:
            raise ValueError("Invalid value for `post_town`, must not be `None`")  # noqa: E501

        self._post_town = post_town

    @property
    def county(self):
        """Gets the county of this RecipientAddress.  # noqa: E501

        County of address. Mandatory for state & provinces in the US, Canada or Australia.  # noqa: E501

        :return: The county of this RecipientAddress.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this RecipientAddress.

        County of address. Mandatory for state & provinces in the US, Canada or Australia.  # noqa: E501

        :param county: The county of this RecipientAddress.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def post_code(self):
        """Gets the post_code of this RecipientAddress.  # noqa: E501

        Mandatory for UK addresses.   # noqa: E501

        :return: The post_code of this RecipientAddress.  # noqa: E501
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this RecipientAddress.

        Mandatory for UK addresses.   # noqa: E501

        :param post_code: The post_code of this RecipientAddress.  # noqa: E501
        :type: str
        """
        if post_code is None:
            raise ValueError("Invalid value for `post_code`, must not be `None`")  # noqa: E501

        self._post_code = post_code

    @property
    def country(self):
        """Gets the country of this RecipientAddress.  # noqa: E501

        Recipient 2-digit ISO country code.  # noqa: E501

        :return: The country of this RecipientAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this RecipientAddress.

        Recipient 2-digit ISO country code.  # noqa: E501

        :param country: The country of this RecipientAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecipientAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecipientAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
