# coding: utf-8

"""
    Royal Mail API Shipping V2 (REST)

    This API specification details the requirements for integrating with Royal Mail API Shipping V2 (REST). It specifically covers how the Royal Mail API Shipping V2 (REST) can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V2 (REST) exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail. Built on industry standards, Royal Mail API Shipping V2 (REST) provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels.  There are no costs to customers for using the Royal Mail API Shipping V2 (REST) services, however customers’ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating cancelling a shipment and manifesting click here&#58; www.royalmail.com/pro-shipping-help  # noqa: E501

    OpenAPI spec version: 1.0.21
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from rmail_api.models.big_decimal import BigDecimal  # noqa: F401,E501
from rmail_api.models.content_detail import ContentDetail  # noqa: F401,E501
from rmail_api.models.measurement import Measurement  # noqa: F401,E501


class Parcel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'weight': 'Measurement',
        'length': 'Measurement',
        'height': 'Measurement',
        'width': 'Measurement',
        'purpose_of_shipment': 'str',
        'explanation': 'str',
        'invoice_number': 'str',
        'export_license_number': 'str',
        'certificate_number': 'str',
        'content_details': 'list[ContentDetail]',
        'fees': 'BigDecimal'
    }

    attribute_map = {
        'weight': 'weight',
        'length': 'length',
        'height': 'height',
        'width': 'width',
        'purpose_of_shipment': 'purposeOfShipment',
        'explanation': 'explanation',
        'invoice_number': 'invoiceNumber',
        'export_license_number': 'exportLicenseNumber',
        'certificate_number': 'certificateNumber',
        'content_details': 'contentDetails',
        'fees': 'fees'
    }

    def __init__(self, weight=None, length=None, height=None, width=None, purpose_of_shipment=None, explanation=None, invoice_number=None, export_license_number=None, certificate_number=None, content_details=None, fees=None):  # noqa: E501
        """Parcel - a model defined in Swagger"""  # noqa: E501
        self._weight = None
        self._length = None
        self._height = None
        self._width = None
        self._purpose_of_shipment = None
        self._explanation = None
        self._invoice_number = None
        self._export_license_number = None
        self._certificate_number = None
        self._content_details = None
        self._fees = None
        self.discriminator = None
        if weight is not None:
            self.weight = weight
        if length is not None:
            self.length = length
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if purpose_of_shipment is not None:
            self.purpose_of_shipment = purpose_of_shipment
        if explanation is not None:
            self.explanation = explanation
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if export_license_number is not None:
            self.export_license_number = export_license_number
        if certificate_number is not None:
            self.certificate_number = certificate_number
        self.content_details = content_details
        if fees is not None:
            self.fees = fees

    @property
    def weight(self):
        """Gets the weight of this Parcel.  # noqa: E501


        :return: The weight of this Parcel.  # noqa: E501
        :rtype: Measurement
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Parcel.


        :param weight: The weight of this Parcel.  # noqa: E501
        :type: Measurement
        """

        self._weight = weight

    @property
    def length(self):
        """Gets the length of this Parcel.  # noqa: E501


        :return: The length of this Parcel.  # noqa: E501
        :rtype: Measurement
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Parcel.


        :param length: The length of this Parcel.  # noqa: E501
        :type: Measurement
        """

        self._length = length

    @property
    def height(self):
        """Gets the height of this Parcel.  # noqa: E501


        :return: The height of this Parcel.  # noqa: E501
        :rtype: Measurement
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Parcel.


        :param height: The height of this Parcel.  # noqa: E501
        :type: Measurement
        """

        self._height = height

    @property
    def width(self):
        """Gets the width of this Parcel.  # noqa: E501


        :return: The width of this Parcel.  # noqa: E501
        :rtype: Measurement
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Parcel.


        :param width: The width of this Parcel.  # noqa: E501
        :type: Measurement
        """

        self._width = width

    @property
    def purpose_of_shipment(self):
        """Gets the purpose_of_shipment of this Parcel.  # noqa: E501

        Purpose of shipment (also known as Nature of Goods). These are 2-3 character codes as defined below&#58;   \"21\" for Returned Goods  “31” for Gift “32” for Commercial Sample \"91\" for Documents  “991” for Mixed Content \"999\" for Other  # noqa: E501

        :return: The purpose_of_shipment of this Parcel.  # noqa: E501
        :rtype: str
        """
        return self._purpose_of_shipment

    @purpose_of_shipment.setter
    def purpose_of_shipment(self, purpose_of_shipment):
        """Sets the purpose_of_shipment of this Parcel.

        Purpose of shipment (also known as Nature of Goods). These are 2-3 character codes as defined below&#58;   \"21\" for Returned Goods  “31” for Gift “32” for Commercial Sample \"91\" for Documents  “991” for Mixed Content \"999\" for Other  # noqa: E501

        :param purpose_of_shipment: The purpose_of_shipment of this Parcel.  # noqa: E501
        :type: str
        """

        self._purpose_of_shipment = purpose_of_shipment

    @property
    def explanation(self):
        """Gets the explanation of this Parcel.  # noqa: E501

        Comments regarding the parcel  # noqa: E501

        :return: The explanation of this Parcel.  # noqa: E501
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this Parcel.

        Comments regarding the parcel  # noqa: E501

        :param explanation: The explanation of this Parcel.  # noqa: E501
        :type: str
        """

        self._explanation = explanation

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Parcel.  # noqa: E501

        Invoice number  # noqa: E501

        :return: The invoice_number of this Parcel.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Parcel.

        Invoice number  # noqa: E501

        :param invoice_number: The invoice_number of this Parcel.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def export_license_number(self):
        """Gets the export_license_number of this Parcel.  # noqa: E501

        Export licence number  # noqa: E501

        :return: The export_license_number of this Parcel.  # noqa: E501
        :rtype: str
        """
        return self._export_license_number

    @export_license_number.setter
    def export_license_number(self, export_license_number):
        """Sets the export_license_number of this Parcel.

        Export licence number  # noqa: E501

        :param export_license_number: The export_license_number of this Parcel.  # noqa: E501
        :type: str
        """

        self._export_license_number = export_license_number

    @property
    def certificate_number(self):
        """Gets the certificate_number of this Parcel.  # noqa: E501

        Certificate number  # noqa: E501

        :return: The certificate_number of this Parcel.  # noqa: E501
        :rtype: str
        """
        return self._certificate_number

    @certificate_number.setter
    def certificate_number(self, certificate_number):
        """Sets the certificate_number of this Parcel.

        Certificate number  # noqa: E501

        :param certificate_number: The certificate_number of this Parcel.  # noqa: E501
        :type: str
        """

        self._certificate_number = certificate_number

    @property
    def content_details(self):
        """Gets the content_details of this Parcel.  # noqa: E501

        Content details list.  # noqa: E501

        :return: The content_details of this Parcel.  # noqa: E501
        :rtype: list[ContentDetail]
        """
        return self._content_details

    @content_details.setter
    def content_details(self, content_details):
        """Sets the content_details of this Parcel.

        Content details list.  # noqa: E501

        :param content_details: The content_details of this Parcel.  # noqa: E501
        :type: list[ContentDetail]
        """
        if content_details is None:
            raise ValueError("Invalid value for `content_details`, must not be `None`")  # noqa: E501

        self._content_details = content_details

    @property
    def fees(self):
        """Gets the fees of this Parcel.  # noqa: E501

        Parcel fees  # noqa: E501

        :return: The fees of this Parcel.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this Parcel.

        Parcel fees  # noqa: E501

        :param fees: The fees of this Parcel.  # noqa: E501
        :type: BigDecimal
        """

        self._fees = fees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Parcel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Parcel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
