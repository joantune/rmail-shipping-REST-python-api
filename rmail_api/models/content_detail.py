# coding: utf-8

"""
    Royal Mail API Shipping V2 (REST)

    This API specification details the requirements for integrating with Royal Mail API Shipping V2 (REST). It specifically covers how the Royal Mail API Shipping V2 (REST) can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V2 (REST) exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail. Built on industry standards, Royal Mail API Shipping V2 (REST) provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels.  There are no costs to customers for using the Royal Mail API Shipping V2 (REST) services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating cancelling a shipment and manifesting click here&#58; www.royalmail.com/pro-shipping-help  # noqa: E501

    OpenAPI spec version: 1.0.21
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from rmail_api.models.big_decimal import BigDecimal  # noqa: F401,E501
from rmail_api.models.measurement import Measurement  # noqa: F401,E501


class ContentDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_of_manufacture_code': 'str',
        'manufacturers_name': 'str',
        'description': 'str',
        'unit_weight': 'Measurement',
        'unit_quantity': 'int',
        'unit_value': 'BigDecimal',
        'currency_code': 'str',
        'tariff_code': 'BigDecimal',
        'tariff_description': 'str'
    }

    attribute_map = {
        'country_of_manufacture_code': 'countryOfManufactureCode',
        'manufacturers_name': 'manufacturersName',
        'description': 'description',
        'unit_weight': 'unitWeight',
        'unit_quantity': 'unitQuantity',
        'unit_value': 'unitValue',
        'currency_code': 'currencyCode',
        'tariff_code': 'tariffCode',
        'tariff_description': 'tariffDescription'
    }

    def __init__(self, country_of_manufacture_code=None, manufacturers_name=None, description=None, unit_weight=None, unit_quantity=None, unit_value=None, currency_code=None, tariff_code=None, tariff_description=None):  # noqa: E501
        """ContentDetail - a model defined in Swagger"""  # noqa: E501
        self._country_of_manufacture_code = None
        self._manufacturers_name = None
        self._description = None
        self._unit_weight = None
        self._unit_quantity = None
        self._unit_value = None
        self._currency_code = None
        self._tariff_code = None
        self._tariff_description = None
        self.discriminator = None
        self.country_of_manufacture_code = country_of_manufacture_code
        if manufacturers_name is not None:
            self.manufacturers_name = manufacturers_name
        if description is not None:
            self.description = description
        if unit_weight is not None:
            self.unit_weight = unit_weight
        self.unit_quantity = unit_quantity
        self.unit_value = unit_value
        self.currency_code = currency_code
        if tariff_code is not None:
            self.tariff_code = tariff_code
        if tariff_description is not None:
            self.tariff_description = tariff_description

    @property
    def country_of_manufacture_code(self):
        """Gets the country_of_manufacture_code of this ContentDetail.  # noqa: E501

        2-digit country ISO code representing the country in which the goods where manufactured. Note that this field is case sensitive. For the list of allowable values, please go to API Shipping V2 page on the Royal Mail API (Developer) Portal and refer to API Shipping Reference Data.  # noqa: E501

        :return: The country_of_manufacture_code of this ContentDetail.  # noqa: E501
        :rtype: str
        """
        return self._country_of_manufacture_code

    @country_of_manufacture_code.setter
    def country_of_manufacture_code(self, country_of_manufacture_code):
        """Sets the country_of_manufacture_code of this ContentDetail.

        2-digit country ISO code representing the country in which the goods where manufactured. Note that this field is case sensitive. For the list of allowable values, please go to API Shipping V2 page on the Royal Mail API (Developer) Portal and refer to API Shipping Reference Data.  # noqa: E501

        :param country_of_manufacture_code: The country_of_manufacture_code of this ContentDetail.  # noqa: E501
        :type: str
        """
        if country_of_manufacture_code is None:
            raise ValueError("Invalid value for `country_of_manufacture_code`, must not be `None`")  # noqa: E501

        self._country_of_manufacture_code = country_of_manufacture_code

    @property
    def manufacturers_name(self):
        """Gets the manufacturers_name of this ContentDetail.  # noqa: E501

        Name of manufacturer of goods in the shipment.  # noqa: E501

        :return: The manufacturers_name of this ContentDetail.  # noqa: E501
        :rtype: str
        """
        return self._manufacturers_name

    @manufacturers_name.setter
    def manufacturers_name(self, manufacturers_name):
        """Sets the manufacturers_name of this ContentDetail.

        Name of manufacturer of goods in the shipment.  # noqa: E501

        :param manufacturers_name: The manufacturers_name of this ContentDetail.  # noqa: E501
        :type: str
        """

        self._manufacturers_name = manufacturers_name

    @property
    def description(self):
        """Gets the description of this ContentDetail.  # noqa: E501

        Description of goods being delivered.  # noqa: E501

        :return: The description of this ContentDetail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContentDetail.

        Description of goods being delivered.  # noqa: E501

        :param description: The description of this ContentDetail.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def unit_weight(self):
        """Gets the unit_weight of this ContentDetail.  # noqa: E501


        :return: The unit_weight of this ContentDetail.  # noqa: E501
        :rtype: Measurement
        """
        return self._unit_weight

    @unit_weight.setter
    def unit_weight(self, unit_weight):
        """Sets the unit_weight of this ContentDetail.


        :param unit_weight: The unit_weight of this ContentDetail.  # noqa: E501
        :type: Measurement
        """

        self._unit_weight = unit_weight

    @property
    def unit_quantity(self):
        """Gets the unit_quantity of this ContentDetail.  # noqa: E501

        Quantity of content items within the shipment.  # noqa: E501

        :return: The unit_quantity of this ContentDetail.  # noqa: E501
        :rtype: int
        """
        return self._unit_quantity

    @unit_quantity.setter
    def unit_quantity(self, unit_quantity):
        """Sets the unit_quantity of this ContentDetail.

        Quantity of content items within the shipment.  # noqa: E501

        :param unit_quantity: The unit_quantity of this ContentDetail.  # noqa: E501
        :type: int
        """
        if unit_quantity is None:
            raise ValueError("Invalid value for `unit_quantity`, must not be `None`")  # noqa: E501

        self._unit_quantity = unit_quantity

    @property
    def unit_value(self):
        """Gets the unit_value of this ContentDetail.  # noqa: E501

        Value of content items within the shipment.  # noqa: E501

        :return: The unit_value of this ContentDetail.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._unit_value

    @unit_value.setter
    def unit_value(self, unit_value):
        """Sets the unit_value of this ContentDetail.

        Value of content items within the shipment.  # noqa: E501

        :param unit_value: The unit_value of this ContentDetail.  # noqa: E501
        :type: BigDecimal
        """
        if unit_value is None:
            raise ValueError("Invalid value for `unit_value`, must not be `None`")  # noqa: E501

        self._unit_value = unit_value

    @property
    def currency_code(self):
        """Gets the currency_code of this ContentDetail.  # noqa: E501

        3-digit ISO currency code for value of content item within the shipment.  # noqa: E501

        :return: The currency_code of this ContentDetail.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ContentDetail.

        3-digit ISO currency code for value of content item within the shipment.  # noqa: E501

        :param currency_code: The currency_code of this ContentDetail.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def tariff_code(self):
        """Gets the tariff_code of this ContentDetail.  # noqa: E501

        Tariff code for content item within the shipment. See https&#58;//www.gov.uk/trade-tariff.  # noqa: E501

        :return: The tariff_code of this ContentDetail.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._tariff_code

    @tariff_code.setter
    def tariff_code(self, tariff_code):
        """Sets the tariff_code of this ContentDetail.

        Tariff code for content item within the shipment. See https&#58;//www.gov.uk/trade-tariff.  # noqa: E501

        :param tariff_code: The tariff_code of this ContentDetail.  # noqa: E501
        :type: BigDecimal
        """

        self._tariff_code = tariff_code

    @property
    def tariff_description(self):
        """Gets the tariff_description of this ContentDetail.  # noqa: E501

        Description that compliments the tariff code supplied.  # noqa: E501

        :return: The tariff_description of this ContentDetail.  # noqa: E501
        :rtype: str
        """
        return self._tariff_description

    @tariff_description.setter
    def tariff_description(self, tariff_description):
        """Sets the tariff_description of this ContentDetail.

        Description that compliments the tariff code supplied.  # noqa: E501

        :param tariff_description: The tariff_description of this ContentDetail.  # noqa: E501
        :type: str
        """

        self._tariff_description = tariff_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
