# coding: utf-8

"""
    Royal Mail API Shipping V2 (REST)

    This API specification details the requirements for integrating with Royal Mail API Shipping V2 (REST). It specifically covers how the Royal Mail API Shipping V2 (REST) can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V2 (REST) exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail. Built on industry standards, Royal Mail API Shipping V2 (REST) provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels.  There are no costs to customers for using the Royal Mail API Shipping V2 (REST) services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating cancelling a shipment and manifesting click here&#58; www.royalmail.com/pro-shipping-help  # noqa: E501

    OpenAPI spec version: 1.0.21
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rmail_api.api_client import ApiClient


class ShipmentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def domestic_post(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Create a domestic shipment.  # noqa: E501

        This operation will take a domestic shipment request in the message body and return the newly created shipment numbers and item details. **Offline Shipment Not Currently Available.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domestic_post(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Shipment body: (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: CreatedShipmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.domestic_post_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
        else:
            (data) = self.domestic_post_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
            return data

    def domestic_post_with_http_info(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Create a domestic shipment.  # noqa: E501

        This operation will take a domestic shipment request in the message body and return the newly created shipment numbers and item details. **Offline Shipment Not Currently Available.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domestic_post_with_http_info(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Shipment body: (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: CreatedShipmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domestic_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `domestic_post`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `domestic_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID', 'clientSecret']  # noqa: E501

        return self.api_client.call_api(
            '/domestic', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatedShipmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipment_number_delete(self, shipment_number, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Cancel a shipment.  # noqa: E501

        Cancel a shipment with the specified *shipmentNumber*.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_number_delete(shipment_number, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipment_number: (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: CancelOrUpdateShipmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipment_number_delete_with_http_info(shipment_number, x_rmg_auth_token, **kwargs)  # noqa: E501
        else:
            (data) = self.shipment_number_delete_with_http_info(shipment_number, x_rmg_auth_token, **kwargs)  # noqa: E501
            return data

    def shipment_number_delete_with_http_info(self, shipment_number, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Cancel a shipment.  # noqa: E501

        Cancel a shipment with the specified *shipmentNumber*.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_number_delete_with_http_info(shipment_number, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipment_number: (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: CancelOrUpdateShipmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shipment_number', 'x_rmg_auth_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipment_number_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shipment_number' is set
        if ('shipment_number' not in params or
                params['shipment_number'] is None):
            raise ValueError("Missing the required parameter `shipment_number` when calling `shipment_number_delete`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `shipment_number_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipment_number' in params:
            path_params['shipmentNumber'] = params['shipment_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID', 'clientSecret']  # noqa: E501

        return self.api_client.call_api(
            '/{shipmentNumber}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CancelOrUpdateShipmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipment_number_label_put(self, shipment_number, x_rmg_auth_token, output_format, **kwargs):  # noqa: E501
        """Create shipment label.  # noqa: E501

        This method returns a label for the shipment identifier passed in the url.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_number_label_put(shipment_number, x_rmg_auth_token, output_format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipment_number: (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str output_format: Label Format Type. The content of the response.  > Unspecified / PDF: returns the standard Base64 Encoded PDF Label   DS: returns a data stream  DSPDF: returns both the data stream and the Base64 Encoded PDF Label.  PNG: returns Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode.  DSPNG: returns both the data stream and the Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode. (required)
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipment_number_label_put_with_http_info(shipment_number, x_rmg_auth_token, output_format, **kwargs)  # noqa: E501
        else:
            (data) = self.shipment_number_label_put_with_http_info(shipment_number, x_rmg_auth_token, output_format, **kwargs)  # noqa: E501
            return data

    def shipment_number_label_put_with_http_info(self, shipment_number, x_rmg_auth_token, output_format, **kwargs):  # noqa: E501
        """Create shipment label.  # noqa: E501

        This method returns a label for the shipment identifier passed in the url.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_number_label_put_with_http_info(shipment_number, x_rmg_auth_token, output_format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipment_number: (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str output_format: Label Format Type. The content of the response.  > Unspecified / PDF: returns the standard Base64 Encoded PDF Label   DS: returns a data stream  DSPDF: returns both the data stream and the Base64 Encoded PDF Label.  PNG: returns Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode.  DSPNG: returns both the data stream and the Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode. (required)
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shipment_number', 'x_rmg_auth_token', 'output_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipment_number_label_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shipment_number' is set
        if ('shipment_number' not in params or
                params['shipment_number'] is None):
            raise ValueError("Missing the required parameter `shipment_number` when calling `shipment_number_label_put`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `shipment_number_label_put`")  # noqa: E501
        # verify the required parameter 'output_format' is set
        if ('output_format' not in params or
                params['output_format'] is None):
            raise ValueError("Missing the required parameter `output_format` when calling `shipment_number_label_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipment_number' in params:
            path_params['shipmentNumber'] = params['shipment_number']  # noqa: E501

        query_params = []
        if 'output_format' in params:
            query_params.append(('outputFormat', params['output_format']))  # noqa: E501

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID', 'clientSecret']  # noqa: E501

        return self.api_client.call_api(
            '/{shipmentNumber}/label', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LabelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipment_number_put(self, body, x_rmg_auth_token, shipment_number, **kwargs):  # noqa: E501
        """Update a shipment.  # noqa: E501

        Update a shipment with the specified *shipmentNumber*. Fields to be updated populated in the body. Service related information cannot be updated, and if passed as part of request, will be ignored.  On successful update, the shipment number updated is returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_number_put(body, x_rmg_auth_token, shipment_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Shipment body: (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str shipment_number: (required)
        :return: CancelOrUpdateShipmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipment_number_put_with_http_info(body, x_rmg_auth_token, shipment_number, **kwargs)  # noqa: E501
        else:
            (data) = self.shipment_number_put_with_http_info(body, x_rmg_auth_token, shipment_number, **kwargs)  # noqa: E501
            return data

    def shipment_number_put_with_http_info(self, body, x_rmg_auth_token, shipment_number, **kwargs):  # noqa: E501
        """Update a shipment.  # noqa: E501

        Update a shipment with the specified *shipmentNumber*. Fields to be updated populated in the body. Service related information cannot be updated, and if passed as part of request, will be ignored.  On successful update, the shipment number updated is returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_number_put_with_http_info(body, x_rmg_auth_token, shipment_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Shipment body: (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str shipment_number: (required)
        :return: CancelOrUpdateShipmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token', 'shipment_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipment_number_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shipment_number_put`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `shipment_number_put`")  # noqa: E501
        # verify the required parameter 'shipment_number' is set
        if ('shipment_number' not in params or
                params['shipment_number'] is None):
            raise ValueError("Missing the required parameter `shipment_number` when calling `shipment_number_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipment_number' in params:
            path_params['shipmentNumber'] = params['shipment_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID', 'clientSecret']  # noqa: E501

        return self.api_client.call_api(
            '/{shipmentNumber}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CancelOrUpdateShipmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipments_post(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Create an international or domestic shipment.  # noqa: E501

        This operation will accept a shipment request(domestic or international) in the message body and return the newly created shipment numbers and item details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_post(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentsRequest body: (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: CreatedShipmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipments_post_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
        else:
            (data) = self.shipments_post_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
            return data

    def shipments_post_with_http_info(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Create an international or domestic shipment.  # noqa: E501

        This operation will accept a shipment request(domestic or international) in the message body and return the newly created shipment numbers and item details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_post_with_http_info(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentsRequest body: (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: CreatedShipmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shipments_post`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `shipments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID', 'clientSecret']  # noqa: E501

        return self.api_client.call_api(
            '/shipments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatedShipmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipments_shipment_number_documents_put(self, body, x_rmg_auth_token, shipment_number, **kwargs):  # noqa: E501
        """Create international documents.  # noqa: E501

        Create base64 encoded PDF international documents for the given shipment number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_shipment_number_documents_put(body, x_rmg_auth_token, shipment_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentsRequest body: (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str shipment_number: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipments_shipment_number_documents_put_with_http_info(body, x_rmg_auth_token, shipment_number, **kwargs)  # noqa: E501
        else:
            (data) = self.shipments_shipment_number_documents_put_with_http_info(body, x_rmg_auth_token, shipment_number, **kwargs)  # noqa: E501
            return data

    def shipments_shipment_number_documents_put_with_http_info(self, body, x_rmg_auth_token, shipment_number, **kwargs):  # noqa: E501
        """Create international documents.  # noqa: E501

        Create base64 encoded PDF international documents for the given shipment number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_shipment_number_documents_put_with_http_info(body, x_rmg_auth_token, shipment_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentsRequest body: (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str shipment_number: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token', 'shipment_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipments_shipment_number_documents_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shipments_shipment_number_documents_put`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `shipments_shipment_number_documents_put`")  # noqa: E501
        # verify the required parameter 'shipment_number' is set
        if ('shipment_number' not in params or
                params['shipment_number'] is None):
            raise ValueError("Missing the required parameter `shipment_number` when calling `shipments_shipment_number_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipment_number' in params:
            path_params['shipmentNumber'] = params['shipment_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID', 'clientSecret']  # noqa: E501

        return self.api_client.call_api(
            '/shipments/{shipmentNumber}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
