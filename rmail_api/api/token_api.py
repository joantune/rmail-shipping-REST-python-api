# coding: utf-8

"""
    Royal Mail API Shipping V2 (REST)

    This API specification details the requirements for integrating with Royal Mail API Shipping V2 (REST). It specifically covers how the Royal Mail API Shipping V2 (REST) can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V2 (REST) exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail. Built on industry standards, Royal Mail API Shipping V2 (REST) provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels.  There are no costs to customers for using the Royal Mail API Shipping V2 (REST) services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating cancelling a shipment and manifesting click here&#58; www.royalmail.com/pro-shipping-help  # noqa: E501

    OpenAPI spec version: 1.0.21
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rmail_api.api_client import ApiClient


class TokenApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_token(self, x_rmg_user_name, x_rmg_password, **kwargs):  # noqa: E501
        """Method to get a JSON Web Token (JWT).  # noqa: E501

        This method accepts a Royal Mail issued user name and (encoded SHA-1 hash) password. On successful validation of the user's credentials, a JWT valid for 4 hours is returned. The user must send this JWT in the *X-RMG-Auth-Token* header when making subsequent calls to this API's business operations. > **Use the Password Generator utility attachment on the Developer Portal API Shipping V2 (REST) page to hash and encode the plain text password.**   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_token(x_rmg_user_name, x_rmg_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_rmg_user_name: User Name (required)
        :param str x_rmg_password: Encoded SHA-1 hashed password. (required)
        :return: Token
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_token_with_http_info(x_rmg_user_name, x_rmg_password, **kwargs)  # noqa: E501
        else:
            (data) = self.get_token_with_http_info(x_rmg_user_name, x_rmg_password, **kwargs)  # noqa: E501
            return data

    def get_token_with_http_info(self, x_rmg_user_name, x_rmg_password, **kwargs):  # noqa: E501
        """Method to get a JSON Web Token (JWT).  # noqa: E501

        This method accepts a Royal Mail issued user name and (encoded SHA-1 hash) password. On successful validation of the user's credentials, a JWT valid for 4 hours is returned. The user must send this JWT in the *X-RMG-Auth-Token* header when making subsequent calls to this API's business operations. > **Use the Password Generator utility attachment on the Developer Portal API Shipping V2 (REST) page to hash and encode the plain text password.**   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_token_with_http_info(x_rmg_user_name, x_rmg_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_rmg_user_name: User Name (required)
        :param str x_rmg_password: Encoded SHA-1 hashed password. (required)
        :return: Token
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_rmg_user_name', 'x_rmg_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_rmg_user_name' is set
        if ('x_rmg_user_name' not in params or
                params['x_rmg_user_name'] is None):
            raise ValueError("Missing the required parameter `x_rmg_user_name` when calling `get_token`")  # noqa: E501
        # verify the required parameter 'x_rmg_password' is set
        if ('x_rmg_password' not in params or
                params['x_rmg_password'] is None):
            raise ValueError("Missing the required parameter `x_rmg_password` when calling `get_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_rmg_user_name' in params:
            header_params['X-RMG-User-Name'] = params['x_rmg_user_name']  # noqa: E501
        if 'x_rmg_password' in params:
            header_params['X-RMG-Password'] = params['x_rmg_password']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID', 'clientSecret']  # noqa: E501

        return self.api_client.call_api(
            '/token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Token',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
