# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rmail_apiv3.api_client import ApiClient


class ShipmentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def shipments_cancel(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Cancel Shipments  # noqa: E501

        Can be used to cancel/void one or more current shipping labels.<br />This service can only be used before the shipment has been confirmed either by calling the manifest create request or by closing out via the User Interface.<br />There can be a maximum of 99 cancellation requests per call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_cancel(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ShipmentCancelRequest] body: Shipment Cancel Requests (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ShipmentsCancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipments_cancel_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
        else:
            (data) = self.shipments_cancel_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
            return data

    def shipments_cancel_with_http_info(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Cancel Shipments  # noqa: E501

        Can be used to cancel/void one or more current shipping labels.<br />This service can only be used before the shipment has been confirmed either by calling the manifest create request or by closing out via the User Interface.<br />There can be a maximum of 99 cancellation requests per call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_cancel_with_http_info(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ShipmentCancelRequest] body: Shipment Cancel Requests (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ShipmentsCancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipments_cancel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shipments_cancel`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `shipments_cancel`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID']  # noqa: E501

        return self.api_client.call_api(
            '/shipments/cancel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShipmentsCancelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipments_create(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Create Shipment  # noqa: E501

        Use to generate the final delivery label for your packages.<br />            <br />The request is split into several sections:<br />            <br />**Shipper** - who and where the parcel is coming from - optional if the posting location is to be used.<br />**Destination** - who and where the parcel is going to.<br />**Shipment Information** - overall package details, individual item details and requested service information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_create(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateShipmentShipment body: The shipment. (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ShipmentCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipments_create_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
        else:
            (data) = self.shipments_create_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
            return data

    def shipments_create_with_http_info(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Create Shipment  # noqa: E501

        Use to generate the final delivery label for your packages.<br />            <br />The request is split into several sections:<br />            <br />**Shipper** - who and where the parcel is coming from - optional if the posting location is to be used.<br />**Destination** - who and where the parcel is going to.<br />**Shipment Information** - overall package details, individual item details and requested service information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_create_with_http_info(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateShipmentShipment body: The shipment. (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ShipmentCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipments_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shipments_create`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `shipments_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID']  # noqa: E501

        return self.api_client.call_api(
            '/shipments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShipmentCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipments_defer(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Defer Shipments  # noqa: E501

        Used to update the shipment shipping date for a current shipment.<br />A shipment can be deferred by a maximum of 28 days from the date of the request.<br />This service can only be used before the shipment has been confirmed either by calling the manifest create request or by closing out via the User Interface.<br />There can be a maximum of 99 defer requests per call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_defer(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ShipmentDeferRequest] body: The shipments to defer. (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ShipmentsDeferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipments_defer_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
        else:
            (data) = self.shipments_defer_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
            return data

    def shipments_defer_with_http_info(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Defer Shipments  # noqa: E501

        Used to update the shipment shipping date for a current shipment.<br />A shipment can be deferred by a maximum of 28 days from the date of the request.<br />This service can only be used before the shipment has been confirmed either by calling the manifest create request or by closing out via the User Interface.<br />There can be a maximum of 99 defer requests per call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_defer_with_http_info(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ShipmentDeferRequest] body: The shipments to defer. (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ShipmentsDeferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipments_defer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shipments_defer`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `shipments_defer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID']  # noqa: E501

        return self.api_client.call_api(
            '/shipments/defer', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShipmentsDeferResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipments_hold(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Hold Shipments  # noqa: E501

        Used to put a shipment on hold indefinitely.<br />A shipment on hold will not be included in any closeouts, but instead will remain in its current state.<br />Calling printLabel will release the shipment from being held.<br />This service can only be used before the shipment has been confirmed either by calling the manifest create request or by closing out via the User Interface.<br />            <br />A hold reason must be provided and must match those set in Pro Shipping under your maintenance screens.<br />If no hold reasons exist, then shipments cannot be put on hold.<br />            <br />There can be a maximum of 99 hold requests per call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_hold(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ShipmentHoldRequest] body: The shipments to hold. (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ShipmentsHoldResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipments_hold_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
        else:
            (data) = self.shipments_hold_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
            return data

    def shipments_hold_with_http_info(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Hold Shipments  # noqa: E501

        Used to put a shipment on hold indefinitely.<br />A shipment on hold will not be included in any closeouts, but instead will remain in its current state.<br />Calling printLabel will release the shipment from being held.<br />This service can only be used before the shipment has been confirmed either by calling the manifest create request or by closing out via the User Interface.<br />            <br />A hold reason must be provided and must match those set in Pro Shipping under your maintenance screens.<br />If no hold reasons exist, then shipments cannot be put on hold.<br />            <br />There can be a maximum of 99 hold requests per call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_hold_with_http_info(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ShipmentHoldRequest] body: The shipments to hold. (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ShipmentsHoldResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipments_hold" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shipments_hold`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `shipments_hold`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID']  # noqa: E501

        return self.api_client.call_api(
            '/shipments/hold', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShipmentsHoldResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipments_print_document(self, body, x_rmg_auth_token, shipment_id, **kwargs):  # noqa: E501
        """Print Document  # noqa: E501

        Prints the requested document for the shipment.<br />If item information, description of goods or reason for export have not been provided then the document cannot be printed.<br />            <br />This service can only be used before the shipment has been confirmed either by calling the manifest create request or by closing out via the User Interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_print_document(body, x_rmg_auth_token, shipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintDocumentRequest body: Print Document Request (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str shipment_id: Shipment Id<br />The tracking number or Unique Id of the shipment to print. (required)
        :return: PrintDocumentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipments_print_document_with_http_info(body, x_rmg_auth_token, shipment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.shipments_print_document_with_http_info(body, x_rmg_auth_token, shipment_id, **kwargs)  # noqa: E501
            return data

    def shipments_print_document_with_http_info(self, body, x_rmg_auth_token, shipment_id, **kwargs):  # noqa: E501
        """Print Document  # noqa: E501

        Prints the requested document for the shipment.<br />If item information, description of goods or reason for export have not been provided then the document cannot be printed.<br />            <br />This service can only be used before the shipment has been confirmed either by calling the manifest create request or by closing out via the User Interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_print_document_with_http_info(body, x_rmg_auth_token, shipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintDocumentRequest body: Print Document Request (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str shipment_id: Shipment Id<br />The tracking number or Unique Id of the shipment to print. (required)
        :return: PrintDocumentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token', 'shipment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipments_print_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shipments_print_document`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `shipments_print_document`")  # noqa: E501
        # verify the required parameter 'shipment_id' is set
        if ('shipment_id' not in params or
                params['shipment_id'] is None):
            raise ValueError("Missing the required parameter `shipment_id` when calling `shipments_print_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipment_id' in params:
            path_params['shipmentId'] = params['shipment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID']  # noqa: E501

        return self.api_client.call_api(
            '/shipments/{shipmentId}/printDocument', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrintDocumentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipments_print_label(self, body, x_rmg_auth_token, shipment_id, **kwargs):  # noqa: E501
        """Print Label  # noqa: E501

        Prints the label for the shipment.<br />Moves the shipment to processed, ready to manifest, if the shipment was not already in a processed state.<br />This service can only be used before the shipment has been confirmed either by calling the manifest create request or by closing out via the User Interface.<br />**On Hold Shipment**<br />Calling print label on a held shipment will release the shipment from hold and update the shipment date to today.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_print_label(body, x_rmg_auth_token, shipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintLabelRequest body: Print Label Request (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str shipment_id: Shipment Id<br />The tracking number or Unique Id of the shipment to print. (required)
        :return: PrintLabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipments_print_label_with_http_info(body, x_rmg_auth_token, shipment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.shipments_print_label_with_http_info(body, x_rmg_auth_token, shipment_id, **kwargs)  # noqa: E501
            return data

    def shipments_print_label_with_http_info(self, body, x_rmg_auth_token, shipment_id, **kwargs):  # noqa: E501
        """Print Label  # noqa: E501

        Prints the label for the shipment.<br />Moves the shipment to processed, ready to manifest, if the shipment was not already in a processed state.<br />This service can only be used before the shipment has been confirmed either by calling the manifest create request or by closing out via the User Interface.<br />**On Hold Shipment**<br />Calling print label on a held shipment will release the shipment from hold and update the shipment date to today.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_print_label_with_http_info(body, x_rmg_auth_token, shipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintLabelRequest body: Print Label Request (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :param str shipment_id: Shipment Id<br />The tracking number or Unique Id of the shipment to print. (required)
        :return: PrintLabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token', 'shipment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipments_print_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shipments_print_label`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `shipments_print_label`")  # noqa: E501
        # verify the required parameter 'shipment_id' is set
        if ('shipment_id' not in params or
                params['shipment_id'] is None):
            raise ValueError("Missing the required parameter `shipment_id` when calling `shipments_print_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipment_id' in params:
            path_params['shipmentId'] = params['shipment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID']  # noqa: E501

        return self.api_client.call_api(
            '/shipments/{shipmentId}/printLabel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrintLabelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipments_release(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Release Shipments  # noqa: E501

        Used to release a shipment from being on hold.<br />This service can only be used for shipments on hold.<br />            <br />Releasing a shipment from hold will update the shipment date to today's date and if the shipment is processed it will be included the next requested manifest.<br />            <br />There can be a maximum of 99 release requests per call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_release(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentsReleaseRequest body: Shipments Release Request (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ShipmentsReleaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipments_release_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
        else:
            (data) = self.shipments_release_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
            return data

    def shipments_release_with_http_info(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Release Shipments  # noqa: E501

        Used to release a shipment from being on hold.<br />This service can only be used for shipments on hold.<br />            <br />Releasing a shipment from hold will update the shipment date to today's date and if the shipment is processed it will be included the next requested manifest.<br />            <br />There can be a maximum of 99 release requests per call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_release_with_http_info(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentsReleaseRequest body: Shipments Release Request (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ShipmentsReleaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipments_release" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shipments_release`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `shipments_release`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID']  # noqa: E501

        return self.api_client.call_api(
            '/shipments/release', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShipmentsReleaseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipments_service_availability(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Service Availability  # noqa: E501

        Retrieve a list of available services for a potential shipment.<br />            <br />**Destination** - where the parcel is going to.<br />**Shipment Information** - overall package details and requested service requirements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_service_availability(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceAvailabilityShipment body: The shipment. (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ServiceAvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipments_service_availability_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
        else:
            (data) = self.shipments_service_availability_with_http_info(body, x_rmg_auth_token, **kwargs)  # noqa: E501
            return data

    def shipments_service_availability_with_http_info(self, body, x_rmg_auth_token, **kwargs):  # noqa: E501
        """Service Availability  # noqa: E501

        Retrieve a list of available services for a potential shipment.<br />            <br />**Destination** - where the parcel is going to.<br />**Shipment Information** - overall package details and requested service requirements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipments_service_availability_with_http_info(body, x_rmg_auth_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceAvailabilityShipment body: The shipment. (required)
        :param str x_rmg_auth_token: Authorisation token required to invoke this operation. Can be retrieved by invoking the **/token** operation. (required)
        :return: ServiceAvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_rmg_auth_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipments_service_availability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shipments_service_availability`")  # noqa: E501
        # verify the required parameter 'x_rmg_auth_token' is set
        if ('x_rmg_auth_token' not in params or
                params['x_rmg_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_rmg_auth_token` when calling `shipments_service_availability`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_rmg_auth_token' in params:
            header_params['X-RMG-Auth-Token'] = params['x_rmg_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['clientID']  # noqa: E501

        return self.api_client.call_api(
            '/shipments/serviceAvailability', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceAvailabilityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
