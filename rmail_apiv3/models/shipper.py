# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Shipper(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_id': 'str',
        'shipper_reference': 'str',
        'shipper_department': 'str',
        'company_name': 'str',
        'contact_name': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'address_line3': 'str',
        'town': 'str',
        'county': 'str',
        'country_code': 'str',
        'postcode': 'str',
        'phone_number': 'str',
        'email_address': 'str',
        'vat_number': 'str'
    }

    attribute_map = {
        'address_id': 'AddressId',
        'shipper_reference': 'ShipperReference',
        'shipper_department': 'ShipperDepartment',
        'company_name': 'CompanyName',
        'contact_name': 'ContactName',
        'address_line1': 'AddressLine1',
        'address_line2': 'AddressLine2',
        'address_line3': 'AddressLine3',
        'town': 'Town',
        'county': 'County',
        'country_code': 'CountryCode',
        'postcode': 'Postcode',
        'phone_number': 'PhoneNumber',
        'email_address': 'EmailAddress',
        'vat_number': 'VatNumber'
    }

    def __init__(self, address_id=None, shipper_reference=None, shipper_department=None, company_name=None, contact_name=None, address_line1=None, address_line2=None, address_line3=None, town=None, county=None, country_code=None, postcode=None, phone_number=None, email_address=None, vat_number=None):  # noqa: E501
        """Shipper - a model defined in Swagger"""  # noqa: E501
        self._address_id = None
        self._shipper_reference = None
        self._shipper_department = None
        self._company_name = None
        self._contact_name = None
        self._address_line1 = None
        self._address_line2 = None
        self._address_line3 = None
        self._town = None
        self._county = None
        self._country_code = None
        self._postcode = None
        self._phone_number = None
        self._email_address = None
        self._vat_number = None
        self.discriminator = None
        if address_id is not None:
            self.address_id = address_id
        if shipper_reference is not None:
            self.shipper_reference = shipper_reference
        if shipper_department is not None:
            self.shipper_department = shipper_department
        if company_name is not None:
            self.company_name = company_name
        if contact_name is not None:
            self.contact_name = contact_name
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if address_line3 is not None:
            self.address_line3 = address_line3
        if town is not None:
            self.town = town
        if county is not None:
            self.county = county
        if country_code is not None:
            self.country_code = country_code
        if postcode is not None:
            self.postcode = postcode
        if phone_number is not None:
            self.phone_number = phone_number
        if email_address is not None:
            self.email_address = email_address
        if vat_number is not None:
            self.vat_number = vat_number

    @property
    def address_id(self):
        """Gets the address_id of this Shipper.  # noqa: E501

        Shipper Address Id<br />If supplied all shipper address fields will be ignored and the address from the Address Book will be used.  # noqa: E501

        :return: The address_id of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this Shipper.

        Shipper Address Id<br />If supplied all shipper address fields will be ignored and the address from the Address Book will be used.  # noqa: E501

        :param address_id: The address_id of this Shipper.  # noqa: E501
        :type: str
        """

        self._address_id = address_id

    @property
    def shipper_reference(self):
        """Gets the shipper_reference of this Shipper.  # noqa: E501

        Shipper Reference<br />Your reference for this shipment.<br />This field is used for Returns processing and is usually the shippers order number provided to the consumer.  # noqa: E501

        :return: The shipper_reference of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._shipper_reference

    @shipper_reference.setter
    def shipper_reference(self, shipper_reference):
        """Sets the shipper_reference of this Shipper.

        Shipper Reference<br />Your reference for this shipment.<br />This field is used for Returns processing and is usually the shippers order number provided to the consumer.  # noqa: E501

        :param shipper_reference: The shipper_reference of this Shipper.  # noqa: E501
        :type: str
        """

        self._shipper_reference = shipper_reference

    @property
    def shipper_department(self):
        """Gets the shipper_department of this Shipper.  # noqa: E501

        Shipper Department Code<br />For Royal Mail shipments, this code must be a valid 10-digit OBA department code.  # noqa: E501

        :return: The shipper_department of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._shipper_department

    @shipper_department.setter
    def shipper_department(self, shipper_department):
        """Sets the shipper_department of this Shipper.

        Shipper Department Code<br />For Royal Mail shipments, this code must be a valid 10-digit OBA department code.  # noqa: E501

        :param shipper_department: The shipper_department of this Shipper.  # noqa: E501
        :type: str
        """

        self._shipper_department = shipper_department

    @property
    def company_name(self):
        """Gets the company_name of this Shipper.  # noqa: E501

        Company Name  # noqa: E501

        :return: The company_name of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Shipper.

        Company Name  # noqa: E501

        :param company_name: The company_name of this Shipper.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def contact_name(self):
        """Gets the contact_name of this Shipper.  # noqa: E501

        Contact Name  # noqa: E501

        :return: The contact_name of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this Shipper.

        Contact Name  # noqa: E501

        :param contact_name: The contact_name of this Shipper.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def address_line1(self):
        """Gets the address_line1 of this Shipper.  # noqa: E501

        Address Line 1<br />Populate with Shipper's address if provided.  # noqa: E501

        :return: The address_line1 of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Shipper.

        Address Line 1<br />Populate with Shipper's address if provided.  # noqa: E501

        :param address_line1: The address_line1 of this Shipper.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Shipper.  # noqa: E501

        Address Line 2  # noqa: E501

        :return: The address_line2 of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Shipper.

        Address Line 2  # noqa: E501

        :param address_line2: The address_line2 of this Shipper.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """Gets the address_line3 of this Shipper.  # noqa: E501

        Address Line 3  # noqa: E501

        :return: The address_line3 of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this Shipper.

        Address Line 3  # noqa: E501

        :param address_line3: The address_line3 of this Shipper.  # noqa: E501
        :type: str
        """

        self._address_line3 = address_line3

    @property
    def town(self):
        """Gets the town of this Shipper.  # noqa: E501

        Town<br />Required if address is populated.  # noqa: E501

        :return: The town of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this Shipper.

        Town<br />Required if address is populated.  # noqa: E501

        :param town: The town of this Shipper.  # noqa: E501
        :type: str
        """

        self._town = town

    @property
    def county(self):
        """Gets the county of this Shipper.  # noqa: E501

        County / State / Province<br />Whether this is required or not is dependent on the country settings.  # noqa: E501

        :return: The county of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Shipper.

        County / State / Province<br />Whether this is required or not is dependent on the country settings.  # noqa: E501

        :param county: The county of this Shipper.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def country_code(self):
        """Gets the country_code of this Shipper.  # noqa: E501

        Country Code<br />[ISO Alpha-2 Country Code](https://www.nationsonline.org/oneworld/country_code_list.htm) per ISO 3166 Standard.<br />Required if address is populated.<br />Must be GB, IM, GG or JE.  # noqa: E501

        :return: The country_code of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Shipper.

        Country Code<br />[ISO Alpha-2 Country Code](https://www.nationsonline.org/oneworld/country_code_list.htm) per ISO 3166 Standard.<br />Required if address is populated.<br />Must be GB, IM, GG or JE.  # noqa: E501

        :param country_code: The country_code of this Shipper.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def postcode(self):
        """Gets the postcode of this Shipper.  # noqa: E501

        Postcode / Zip<br />Mandatory for all domestic addresses and some international shipments if address is populated.  # noqa: E501

        :return: The postcode of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this Shipper.

        Postcode / Zip<br />Mandatory for all domestic addresses and some international shipments if address is populated.  # noqa: E501

        :param postcode: The postcode of this Shipper.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def phone_number(self):
        """Gets the phone_number of this Shipper.  # noqa: E501

        Contact Phone Number<br />Must be a valid phone number.  # noqa: E501

        :return: The phone_number of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Shipper.

        Contact Phone Number<br />Must be a valid phone number.  # noqa: E501

        :param phone_number: The phone_number of this Shipper.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def email_address(self):
        """Gets the email_address of this Shipper.  # noqa: E501

        Contact Email Address<br />Must be a valid email address.  # noqa: E501

        :return: The email_address of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Shipper.

        Contact Email Address<br />Must be a valid email address.  # noqa: E501

        :param email_address: The email_address of this Shipper.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def vat_number(self):
        """Gets the vat_number of this Shipper.  # noqa: E501

        VAT Number  # noqa: E501

        :return: The vat_number of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this Shipper.

        VAT Number  # noqa: E501

        :param vat_number: The vat_number of this Shipper.  # noqa: E501
        :type: str
        """

        self._vat_number = vat_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Shipper, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Shipper):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
