# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ShipmentsDeferResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipment_ids': 'list[str]',
        'http_status_code': 'int',
        'http_status_description': 'str',
        'message': 'str',
        'errors': 'list[ErrorDetail]'
    }

    attribute_map = {
        'shipment_ids': 'ShipmentIds',
        'http_status_code': 'HttpStatusCode',
        'http_status_description': 'HttpStatusDescription',
        'message': 'Message',
        'errors': 'Errors'
    }

    def __init__(self, shipment_ids=None, http_status_code=None, http_status_description=None, message=None, errors=None):  # noqa: E501
        """ShipmentsDeferResponse - a model defined in Swagger"""  # noqa: E501
        self._shipment_ids = None
        self._http_status_code = None
        self._http_status_description = None
        self._message = None
        self._errors = None
        self.discriminator = None
        if shipment_ids is not None:
            self.shipment_ids = shipment_ids
        self.http_status_code = http_status_code
        self.http_status_description = http_status_description
        if message is not None:
            self.message = message
        if errors is not None:
            self.errors = errors

    @property
    def shipment_ids(self):
        """Gets the shipment_ids of this ShipmentsDeferResponse.  # noqa: E501

        Shipment Ids<br />Tracking Numbers / Unique Ids of each shipment involved in the request.  # noqa: E501

        :return: The shipment_ids of this ShipmentsDeferResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._shipment_ids

    @shipment_ids.setter
    def shipment_ids(self, shipment_ids):
        """Sets the shipment_ids of this ShipmentsDeferResponse.

        Shipment Ids<br />Tracking Numbers / Unique Ids of each shipment involved in the request.  # noqa: E501

        :param shipment_ids: The shipment_ids of this ShipmentsDeferResponse.  # noqa: E501
        :type: list[str]
        """

        self._shipment_ids = shipment_ids

    @property
    def http_status_code(self):
        """Gets the http_status_code of this ShipmentsDeferResponse.  # noqa: E501

        HTTP Status Code  # noqa: E501

        :return: The http_status_code of this ShipmentsDeferResponse.  # noqa: E501
        :rtype: int
        """
        return self._http_status_code

    @http_status_code.setter
    def http_status_code(self, http_status_code):
        """Sets the http_status_code of this ShipmentsDeferResponse.

        HTTP Status Code  # noqa: E501

        :param http_status_code: The http_status_code of this ShipmentsDeferResponse.  # noqa: E501
        :type: int
        """
        if http_status_code is None:
            raise ValueError("Invalid value for `http_status_code`, must not be `None`")  # noqa: E501

        self._http_status_code = http_status_code

    @property
    def http_status_description(self):
        """Gets the http_status_description of this ShipmentsDeferResponse.  # noqa: E501

        HTTP Status Description  # noqa: E501

        :return: The http_status_description of this ShipmentsDeferResponse.  # noqa: E501
        :rtype: str
        """
        return self._http_status_description

    @http_status_description.setter
    def http_status_description(self, http_status_description):
        """Sets the http_status_description of this ShipmentsDeferResponse.

        HTTP Status Description  # noqa: E501

        :param http_status_description: The http_status_description of this ShipmentsDeferResponse.  # noqa: E501
        :type: str
        """
        if http_status_description is None:
            raise ValueError("Invalid value for `http_status_description`, must not be `None`")  # noqa: E501

        self._http_status_description = http_status_description

    @property
    def message(self):
        """Gets the message of this ShipmentsDeferResponse.  # noqa: E501

        Message<br />Successful response may include a success message.<br />Failure responses will have general reason as to why. Further details may be contained in the list of errors.  # noqa: E501

        :return: The message of this ShipmentsDeferResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ShipmentsDeferResponse.

        Message<br />Successful response may include a success message.<br />Failure responses will have general reason as to why. Further details may be contained in the list of errors.  # noqa: E501

        :param message: The message of this ShipmentsDeferResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def errors(self):
        """Gets the errors of this ShipmentsDeferResponse.  # noqa: E501

        Errors<br />Details about why a request failed.  # noqa: E501

        :return: The errors of this ShipmentsDeferResponse.  # noqa: E501
        :rtype: list[ErrorDetail]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ShipmentsDeferResponse.

        Errors<br />Details about why a request failed.  # noqa: E501

        :param errors: The errors of this ShipmentsDeferResponse.  # noqa: E501
        :type: list[ErrorDetail]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentsDeferResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentsDeferResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
