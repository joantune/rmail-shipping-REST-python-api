# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateShipmentServiceOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'posting_location': 'str',
        'service_level': 'str',
        'service_format': 'str',
        'safeplace': 'str',
        'saturday_guaranteed': 'bool',
        'consequential_loss': 'str',
        'local_collect': 'bool',
        'tracking_notifications': 'str',
        'recorded_signed_for': 'bool'
    }

    attribute_map = {
        'posting_location': 'PostingLocation',
        'service_level': 'ServiceLevel',
        'service_format': 'ServiceFormat',
        'safeplace': 'Safeplace',
        'saturday_guaranteed': 'SaturdayGuaranteed',
        'consequential_loss': 'ConsequentialLoss',
        'local_collect': 'LocalCollect',
        'tracking_notifications': 'TrackingNotifications',
        'recorded_signed_for': 'RecordedSignedFor'
    }

    def __init__(self, posting_location=None, service_level=None, service_format=None, safeplace=None, saturday_guaranteed=None, consequential_loss=None, local_collect=None, tracking_notifications=None, recorded_signed_for=None):  # noqa: E501
        """CreateShipmentServiceOptions - a model defined in Swagger"""  # noqa: E501
        self._posting_location = None
        self._service_level = None
        self._service_format = None
        self._safeplace = None
        self._saturday_guaranteed = None
        self._consequential_loss = None
        self._local_collect = None
        self._tracking_notifications = None
        self._recorded_signed_for = None
        self.discriminator = None
        self.posting_location = posting_location
        if service_level is not None:
            self.service_level = service_level
        if service_format is not None:
            self.service_format = service_format
        if safeplace is not None:
            self.safeplace = safeplace
        if saturday_guaranteed is not None:
            self.saturday_guaranteed = saturday_guaranteed
        if consequential_loss is not None:
            self.consequential_loss = consequential_loss
        if local_collect is not None:
            self.local_collect = local_collect
        if tracking_notifications is not None:
            self.tracking_notifications = tracking_notifications
        if recorded_signed_for is not None:
            self.recorded_signed_for = recorded_signed_for

    @property
    def posting_location(self):
        """Gets the posting_location of this CreateShipmentServiceOptions.  # noqa: E501

        Posting Location.<br />Optional if you only have 1 Posting Location.  # noqa: E501

        :return: The posting_location of this CreateShipmentServiceOptions.  # noqa: E501
        :rtype: str
        """
        return self._posting_location

    @posting_location.setter
    def posting_location(self, posting_location):
        """Sets the posting_location of this CreateShipmentServiceOptions.

        Posting Location.<br />Optional if you only have 1 Posting Location.  # noqa: E501

        :param posting_location: The posting_location of this CreateShipmentServiceOptions.  # noqa: E501
        :type: str
        """
        # allows none posting location
        # if posting_location is None:
        #     raise ValueError("Invalid value for `posting_location`, must not be `None`")  # noqa: E501

        self._posting_location = posting_location

    @property
    def service_level(self):
        """Gets the service_level of this CreateShipmentServiceOptions.  # noqa: E501

        Service Level<br />Valid values are 01-99.<br />Defaults to lowest service level if not provided.  # noqa: E501

        :return: The service_level of this CreateShipmentServiceOptions.  # noqa: E501
        :rtype: str
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level):
        """Sets the service_level of this CreateShipmentServiceOptions.

        Service Level<br />Valid values are 01-99.<br />Defaults to lowest service level if not provided.  # noqa: E501

        :param service_level: The service_level of this CreateShipmentServiceOptions.  # noqa: E501
        :type: str
        """

        self._service_level = service_level

    @property
    def service_format(self):
        """Gets the service_format of this CreateShipmentServiceOptions.  # noqa: E501

        Service Format<br />            <br />**L** - Letter<br />**F** - Large Letter<br />**P** - Parcel<br />**S** - Printed Papers - International Services Only  # noqa: E501

        :return: The service_format of this CreateShipmentServiceOptions.  # noqa: E501
        :rtype: str
        """
        return self._service_format

    @service_format.setter
    def service_format(self, service_format):
        """Sets the service_format of this CreateShipmentServiceOptions.

        Service Format<br />            <br />**L** - Letter<br />**F** - Large Letter<br />**P** - Parcel<br />**S** - Printed Papers - International Services Only  # noqa: E501

        :param service_format: The service_format of this CreateShipmentServiceOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["L", "F", "P", "S"]  # noqa: E501
        if service_format not in allowed_values:
            raise ValueError(
                "Invalid value for `service_format` ({0}), must be one of {1}"  # noqa: E501
                .format(service_format, allowed_values)
            )

        self._service_format = service_format

    @property
    def safeplace(self):
        """Gets the safeplace of this CreateShipmentServiceOptions.  # noqa: E501

        Safe Place Enhancement<br />Free text to describe a safe place to leave the parcel.<br />Returns an error if the service does not allow Safeplace.  # noqa: E501

        :return: The safeplace of this CreateShipmentServiceOptions.  # noqa: E501
        :rtype: str
        """
        return self._safeplace

    @safeplace.setter
    def safeplace(self, safeplace):
        """Sets the safeplace of this CreateShipmentServiceOptions.

        Safe Place Enhancement<br />Free text to describe a safe place to leave the parcel.<br />Returns an error if the service does not allow Safeplace.  # noqa: E501

        :param safeplace: The safeplace of this CreateShipmentServiceOptions.  # noqa: E501
        :type: str
        """

        self._safeplace = safeplace

    @property
    def saturday_guaranteed(self):
        """Gets the saturday_guaranteed of this CreateShipmentServiceOptions.  # noqa: E501

        Saturday Guaranteed Enhancement<br />Available for Domestic Special Delivery Services Only<br />Returns an error if requested and the service does not allow it.  # noqa: E501

        :return: The saturday_guaranteed of this CreateShipmentServiceOptions.  # noqa: E501
        :rtype: bool
        """
        return self._saturday_guaranteed

    @saturday_guaranteed.setter
    def saturday_guaranteed(self, saturday_guaranteed):
        """Sets the saturday_guaranteed of this CreateShipmentServiceOptions.

        Saturday Guaranteed Enhancement<br />Available for Domestic Special Delivery Services Only<br />Returns an error if requested and the service does not allow it.  # noqa: E501

        :param saturday_guaranteed: The saturday_guaranteed of this CreateShipmentServiceOptions.  # noqa: E501
        :type: bool
        """

        self._saturday_guaranteed = saturday_guaranteed

    @property
    def consequential_loss(self):
        """Gets the consequential_loss of this CreateShipmentServiceOptions.  # noqa: E501

        Consequential Loss Enhancement<br />Available for Domestic Special Delivery Services Only.<br />            <br />**Level1** - Â£1,000<br />**Level2** - Â£2,500<br />**Level3** - Â£5,000<br />**Level4** - Â£7,500<br />**Level5** - Â£10,000<br />            <br />Returns an error if requested and the service does not allow it.  # noqa: E501

        :return: The consequential_loss of this CreateShipmentServiceOptions.  # noqa: E501
        :rtype: str
        """
        return self._consequential_loss

    @consequential_loss.setter
    def consequential_loss(self, consequential_loss):
        """Sets the consequential_loss of this CreateShipmentServiceOptions.

        Consequential Loss Enhancement<br />Available for Domestic Special Delivery Services Only.<br />            <br />**Level1** - Â£1,000<br />**Level2** - Â£2,500<br />**Level3** - Â£5,000<br />**Level4** - Â£7,500<br />**Level5** - Â£10,000<br />            <br />Returns an error if requested and the service does not allow it.  # noqa: E501

        :param consequential_loss: The consequential_loss of this CreateShipmentServiceOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["Level1", "Level2", "Level3", "Level4", "Level5"]  # noqa: E501
        if consequential_loss not in allowed_values:
            raise ValueError(
                "Invalid value for `consequential_loss` ({0}), must be one of {1}"  # noqa: E501
                .format(consequential_loss, allowed_values)
            )

        self._consequential_loss = consequential_loss

    @property
    def local_collect(self):
        """Gets the local_collect of this CreateShipmentServiceOptions.  # noqa: E501

        Local Collect Enhancement<br />Available for Domestic Special Delivery and Domestic Tracked services only.<br />Returns an error if requested and the service does not allow it.  # noqa: E501

        :return: The local_collect of this CreateShipmentServiceOptions.  # noqa: E501
        :rtype: bool
        """
        return self._local_collect

    @local_collect.setter
    def local_collect(self, local_collect):
        """Sets the local_collect of this CreateShipmentServiceOptions.

        Local Collect Enhancement<br />Available for Domestic Special Delivery and Domestic Tracked services only.<br />Returns an error if requested and the service does not allow it.  # noqa: E501

        :param local_collect: The local_collect of this CreateShipmentServiceOptions.  # noqa: E501
        :type: bool
        """

        self._local_collect = local_collect

    @property
    def tracking_notifications(self):
        """Gets the tracking_notifications of this CreateShipmentServiceOptions.  # noqa: E501

        Tracking Notifications Enhancement<br />Available for Domestic Special Delivery and Domestic Tracked services only.<br />Returns an error if requested and the service does not allow it.  # noqa: E501

        :return: The tracking_notifications of this CreateShipmentServiceOptions.  # noqa: E501
        :rtype: str
        """
        return self._tracking_notifications

    @tracking_notifications.setter
    def tracking_notifications(self, tracking_notifications):
        """Sets the tracking_notifications of this CreateShipmentServiceOptions.

        Tracking Notifications Enhancement<br />Available for Domestic Special Delivery and Domestic Tracked services only.<br />Returns an error if requested and the service does not allow it.  # noqa: E501

        :param tracking_notifications: The tracking_notifications of this CreateShipmentServiceOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["Email", "SMS", "EmailAndSMS"]  # noqa: E501
        if tracking_notifications not in allowed_values:
            raise ValueError(
                "Invalid value for `tracking_notifications` ({0}), must be one of {1}"  # noqa: E501
                .format(tracking_notifications, allowed_values)
            )

        self._tracking_notifications = tracking_notifications

    @property
    def recorded_signed_for(self):
        """Gets the recorded_signed_for of this CreateShipmentServiceOptions.  # noqa: E501

        Recorded Signed For<br />Available for all Domestic Services that are not Special Delivery, Tracked or BFPO.<br />This is an enhancement for services that don't have an in-built signature service like Special Delivery and Tracked.<br />Returns an error if requested and the service does not allow it.  # noqa: E501

        :return: The recorded_signed_for of this CreateShipmentServiceOptions.  # noqa: E501
        :rtype: bool
        """
        return self._recorded_signed_for

    @recorded_signed_for.setter
    def recorded_signed_for(self, recorded_signed_for):
        """Sets the recorded_signed_for of this CreateShipmentServiceOptions.

        Recorded Signed For<br />Available for all Domestic Services that are not Special Delivery, Tracked or BFPO.<br />This is an enhancement for services that don't have an in-built signature service like Special Delivery and Tracked.<br />Returns an error if requested and the service does not allow it.  # noqa: E501

        :param recorded_signed_for: The recorded_signed_for of this CreateShipmentServiceOptions.  # noqa: E501
        :type: bool
        """

        self._recorded_signed_for = recorded_signed_for

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateShipmentServiceOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateShipmentServiceOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
