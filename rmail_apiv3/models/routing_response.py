# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RoutingResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inward_code': 'object',
        'outward_code': 'object',
        'walk': 'object',
        'loop': 'object'
    }

    attribute_map = {
        'inward_code': 'InwardCode',
        'outward_code': 'OutwardCode',
        'walk': 'Walk',
        'loop': 'Loop'
    }

    def __init__(self, inward_code=None, outward_code=None, walk=None, loop=None):  # noqa: E501
        """RoutingResponse - a model defined in Swagger"""  # noqa: E501
        self._inward_code = None
        self._outward_code = None
        self._walk = None
        self._loop = None
        self.discriminator = None
        if inward_code is not None:
            self.inward_code = inward_code
        if outward_code is not None:
            self.outward_code = outward_code
        if walk is not None:
            self.walk = walk
        if loop is not None:
            self.loop = loop

    @property
    def inward_code(self):
        """Gets the inward_code of this RoutingResponse.  # noqa: E501

        Inward code - (??) - first component of Gazetteer code  # noqa: E501

        :return: The inward_code of this RoutingResponse.  # noqa: E501
        :rtype: object
        """
        return self._inward_code

    @inward_code.setter
    def inward_code(self, inward_code):
        """Sets the inward_code of this RoutingResponse.

        Inward code - (??) - first component of Gazetteer code  # noqa: E501

        :param inward_code: The inward_code of this RoutingResponse.  # noqa: E501
        :type: object
        """

        self._inward_code = inward_code

    @property
    def outward_code(self):
        """Gets the outward_code of this RoutingResponse.  # noqa: E501

        Outward code - (??) - second component of Gazetteer code  # noqa: E501

        :return: The outward_code of this RoutingResponse.  # noqa: E501
        :rtype: object
        """
        return self._outward_code

    @outward_code.setter
    def outward_code(self, outward_code):
        """Sets the outward_code of this RoutingResponse.

        Outward code - (??) - second component of Gazetteer code  # noqa: E501

        :param outward_code: The outward_code of this RoutingResponse.  # noqa: E501
        :type: object
        """

        self._outward_code = outward_code

    @property
    def walk(self):
        """Gets the walk of this RoutingResponse.  # noqa: E501

        ??  # noqa: E501

        :return: The walk of this RoutingResponse.  # noqa: E501
        :rtype: object
        """
        return self._walk

    @walk.setter
    def walk(self, walk):
        """Sets the walk of this RoutingResponse.

        ??  # noqa: E501

        :param walk: The walk of this RoutingResponse.  # noqa: E501
        :type: object
        """

        self._walk = walk

    @property
    def loop(self):
        """Gets the loop of this RoutingResponse.  # noqa: E501

        ??  # noqa: E501

        :return: The loop of this RoutingResponse.  # noqa: E501
        :rtype: object
        """
        return self._loop

    @loop.setter
    def loop(self, loop):
        """Sets the loop of this RoutingResponse.

        ??  # noqa: E501

        :param loop: The loop of this RoutingResponse.  # noqa: E501
        :type: object
        """

        self._loop = loop

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoutingResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoutingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
