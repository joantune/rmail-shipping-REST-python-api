# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ServiceAvailabilityShipmentInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_code': 'str',
        'service_options': 'ServiceAvailabilityServiceOptions',
        'total_packages': 'int',
        'total_weight': 'float',
        'weight_unit_of_measure': 'str',
        'product': 'str',
        'value': 'float',
        'currency': 'str',
        'packages': 'list[ServiceAvailabilityShipmentPackage]'
    }

    attribute_map = {
        'service_code': 'ServiceCode',
        'service_options': 'ServiceOptions',
        'total_packages': 'TotalPackages',
        'total_weight': 'TotalWeight',
        'weight_unit_of_measure': 'WeightUnitOfMeasure',
        'product': 'Product',
        'value': 'Value',
        'currency': 'Currency',
        'packages': 'Packages'
    }

    def __init__(self, service_code=None, service_options=None, total_packages=None, total_weight=None, weight_unit_of_measure='KG', product='NDX', value=None, currency=None, packages=None):  # noqa: E501
        """ServiceAvailabilityShipmentInformation - a model defined in Swagger"""  # noqa: E501
        self._service_code = None
        self._service_options = None
        self._total_packages = None
        self._total_weight = None
        self._weight_unit_of_measure = None
        self._product = None
        self._value = None
        self._currency = None
        self._packages = None
        self.discriminator = None
        if service_code is not None:
            self.service_code = service_code
        if service_options is not None:
            self.service_options = service_options
        self.total_packages = total_packages
        self.total_weight = total_weight
        if weight_unit_of_measure is not None:
            self.weight_unit_of_measure = weight_unit_of_measure
        if product is not None:
            self.product = product
        if value is not None:
            self.value = value
        if currency is not None:
            self.currency = currency
        if packages is not None:
            self.packages = packages

    @property
    def service_code(self):
        """Gets the service_code of this ServiceAvailabilityShipmentInformation.  # noqa: E501

        Service Code<br />Must be a valid system service code OR a customer mapped service code.<br />If service code is not supplied a list of all available service options will be returned, otherwise only information about the service requested will be returned.  # noqa: E501

        :return: The service_code of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this ServiceAvailabilityShipmentInformation.

        Service Code<br />Must be a valid system service code OR a customer mapped service code.<br />If service code is not supplied a list of all available service options will be returned, otherwise only information about the service requested will be returned.  # noqa: E501

        :param service_code: The service_code of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :type: str
        """

        self._service_code = service_code

    @property
    def service_options(self):
        """Gets the service_options of this ServiceAvailabilityShipmentInformation.  # noqa: E501


        :return: The service_options of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :rtype: ServiceAvailabilityServiceOptions
        """
        return self._service_options

    @service_options.setter
    def service_options(self, service_options):
        """Sets the service_options of this ServiceAvailabilityShipmentInformation.


        :param service_options: The service_options of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :type: ServiceAvailabilityServiceOptions
        """

        self._service_options = service_options

    @property
    def total_packages(self):
        """Gets the total_packages of this ServiceAvailabilityShipmentInformation.  # noqa: E501

        Number of Packages<br />The total number of packages.  # noqa: E501

        :return: The total_packages of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :rtype: int
        """
        return self._total_packages

    @total_packages.setter
    def total_packages(self, total_packages):
        """Sets the total_packages of this ServiceAvailabilityShipmentInformation.

        Number of Packages<br />The total number of packages.  # noqa: E501

        :param total_packages: The total_packages of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :type: int
        """
        if total_packages is None:
            raise ValueError("Invalid value for `total_packages`, must not be `None`")  # noqa: E501

        self._total_packages = total_packages

    @property
    def total_weight(self):
        """Gets the total_weight of this ServiceAvailabilityShipmentInformation.  # noqa: E501

        Total Weight<br />The total weight of the shipment including packaging. Validated againt package weight.<br />Min weight: 1 gram.  # noqa: E501

        :return: The total_weight of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :rtype: float
        """
        return self._total_weight

    @total_weight.setter
    def total_weight(self, total_weight):
        """Sets the total_weight of this ServiceAvailabilityShipmentInformation.

        Total Weight<br />The total weight of the shipment including packaging. Validated againt package weight.<br />Min weight: 1 gram.  # noqa: E501

        :param total_weight: The total_weight of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :type: float
        """
        if total_weight is None:
            raise ValueError("Invalid value for `total_weight`, must not be `None`")  # noqa: E501

        self._total_weight = total_weight

    @property
    def weight_unit_of_measure(self):
        """Gets the weight_unit_of_measure of this ServiceAvailabilityShipmentInformation.  # noqa: E501

        Weight Unit of Measure  # noqa: E501

        :return: The weight_unit_of_measure of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :rtype: str
        """
        return self._weight_unit_of_measure

    @weight_unit_of_measure.setter
    def weight_unit_of_measure(self, weight_unit_of_measure):
        """Sets the weight_unit_of_measure of this ServiceAvailabilityShipmentInformation.

        Weight Unit of Measure  # noqa: E501

        :param weight_unit_of_measure: The weight_unit_of_measure of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["KG", "Grams"]  # noqa: E501
        if weight_unit_of_measure not in allowed_values:
            raise ValueError(
                "Invalid value for `weight_unit_of_measure` ({0}), must be one of {1}"  # noqa: E501
                .format(weight_unit_of_measure, allowed_values)
            )

        self._weight_unit_of_measure = weight_unit_of_measure

    @property
    def product(self):
        """Gets the product of this ServiceAvailabilityShipmentInformation.  # noqa: E501

        Shipment/Product type being shipped<br />            <br />**DOX** - Documents Only<br />**NDX** - All other shipment product types  # noqa: E501

        :return: The product of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ServiceAvailabilityShipmentInformation.

        Shipment/Product type being shipped<br />            <br />**DOX** - Documents Only<br />**NDX** - All other shipment product types  # noqa: E501

        :param product: The product of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["NDX", "DOX"]  # noqa: E501
        if product not in allowed_values:
            raise ValueError(
                "Invalid value for `product` ({0}), must be one of {1}"  # noqa: E501
                .format(product, allowed_values)
            )

        self._product = product

    @property
    def value(self):
        """Gets the value of this ServiceAvailabilityShipmentInformation.  # noqa: E501

        Total Shipment Value<br />Required for Non-Document International and BFPO Shipments.<br />Ignored for Documents Only shipments.  # noqa: E501

        :return: The value of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ServiceAvailabilityShipmentInformation.

        Total Shipment Value<br />Required for Non-Document International and BFPO Shipments.<br />Ignored for Documents Only shipments.  # noqa: E501

        :param value: The value of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def currency(self):
        """Gets the currency of this ServiceAvailabilityShipmentInformation.  # noqa: E501

        Currency<br />This currency will be used for all values across the shipment request.<br />3 digit ISO Currency Code.<br />Required for Non-Document International and BFPO Shipments, or when value is provided.<br />Ignored for Documents Only shipments.  # noqa: E501

        :return: The currency of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ServiceAvailabilityShipmentInformation.

        Currency<br />This currency will be used for all values across the shipment request.<br />3 digit ISO Currency Code.<br />Required for Non-Document International and BFPO Shipments, or when value is provided.<br />Ignored for Documents Only shipments.  # noqa: E501

        :param currency: The currency of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def packages(self):
        """Gets the packages of this ServiceAvailabilityShipmentInformation.  # noqa: E501

        Shipment Packages<br />The packages in the shipment.<br />Required if TotalPackages is more than 1.  # noqa: E501

        :return: The packages of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :rtype: list[ServiceAvailabilityShipmentPackage]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this ServiceAvailabilityShipmentInformation.

        Shipment Packages<br />The packages in the shipment.<br />Required if TotalPackages is more than 1.  # noqa: E501

        :param packages: The packages of this ServiceAvailabilityShipmentInformation.  # noqa: E501
        :type: list[ServiceAvailabilityShipmentPackage]
        """

        self._packages = packages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceAvailabilityShipmentInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceAvailabilityShipmentInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
