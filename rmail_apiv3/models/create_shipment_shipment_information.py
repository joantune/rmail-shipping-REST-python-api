# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateShipmentShipmentInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipment_date': 'date',
        'service_code': 'str',
        'service_options': 'CreateShipmentServiceOptions',
        'total_packages': 'int',
        'total_weight': 'float',
        'weight_unit_of_measure': 'str',
        'product': 'str',
        'description_of_goods': 'str',
        'reason_for_export': 'str',
        'value': 'float',
        'currency': 'str',
        'label_format': 'str',
        'silent_print_profile': 'str',
        'shipment_action': 'str',
        'packages': 'list[CreateShipmentShipmentPackage]',
        'items': 'list[ShipmentItem]'
    }

    attribute_map = {
        'shipment_date': 'ShipmentDate',
        'service_code': 'ServiceCode',
        'service_options': 'ServiceOptions',
        'total_packages': 'TotalPackages',
        'total_weight': 'TotalWeight',
        'weight_unit_of_measure': 'WeightUnitOfMeasure',
        'product': 'Product',
        'description_of_goods': 'DescriptionOfGoods',
        'reason_for_export': 'ReasonForExport',
        'value': 'Value',
        'currency': 'Currency',
        'label_format': 'LabelFormat',
        'silent_print_profile': 'SilentPrintProfile',
        'shipment_action': 'ShipmentAction',
        'packages': 'Packages',
        'items': 'Items'
    }

    def __init__(self, shipment_date=None, service_code=None, service_options=None, total_packages=None, total_weight=None, weight_unit_of_measure='KG', product='NDX', description_of_goods=None, reason_for_export=None, value=None, currency=None, label_format='PDF', silent_print_profile=None, shipment_action='Process', packages=None, items=None):  # noqa: E501
        """CreateShipmentShipmentInformation - a model defined in Swagger"""  # noqa: E501
        self._shipment_date = None
        self._service_code = None
        self._service_options = None
        self._total_packages = None
        self._total_weight = None
        self._weight_unit_of_measure = None
        self._product = None
        self._description_of_goods = None
        self._reason_for_export = None
        self._value = None
        self._currency = None
        self._label_format = None
        self._silent_print_profile = None
        self._shipment_action = None
        self._packages = None
        self._items = None
        self.discriminator = None
        self.shipment_date = shipment_date
        self.service_code = service_code
        if service_options is not None:
            self.service_options = service_options
        self.total_packages = total_packages
        self.total_weight = total_weight
        if weight_unit_of_measure is not None:
            self.weight_unit_of_measure = weight_unit_of_measure
        if product is not None:
            self.product = product
        if description_of_goods is not None:
            self.description_of_goods = description_of_goods
        if reason_for_export is not None:
            self.reason_for_export = reason_for_export
        if value is not None:
            self.value = value
        if currency is not None:
            self.currency = currency
        if label_format is not None:
            self.label_format = label_format
        if silent_print_profile is not None:
            self.silent_print_profile = silent_print_profile
        if shipment_action is not None:
            self.shipment_action = shipment_action
        if packages is not None:
            self.packages = packages
        if items is not None:
            self.items = items

    @property
    def shipment_date(self):
        """Gets the shipment_date of this CreateShipmentShipmentInformation.  # noqa: E501

        Shipment Date<br />Date of despatch - YYYY-MM-DD.<br />Cannot be in the past. Max 28 days in the future.  # noqa: E501

        :return: The shipment_date of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: date
        """
        return self._shipment_date

    @shipment_date.setter
    def shipment_date(self, shipment_date):
        """Sets the shipment_date of this CreateShipmentShipmentInformation.

        Shipment Date<br />Date of despatch - YYYY-MM-DD.<br />Cannot be in the past. Max 28 days in the future.  # noqa: E501

        :param shipment_date: The shipment_date of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: date
        """
        if shipment_date is None:
            raise ValueError("Invalid value for `shipment_date`, must not be `None`")  # noqa: E501

        self._shipment_date = shipment_date

    @property
    def service_code(self):
        """Gets the service_code of this CreateShipmentShipmentInformation.  # noqa: E501

        Service Code<br />Must be a valid system service code OR a customer mapped service code.  # noqa: E501

        :return: The service_code of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this CreateShipmentShipmentInformation.

        Service Code<br />Must be a valid system service code OR a customer mapped service code.  # noqa: E501

        :param service_code: The service_code of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: str
        """
        if service_code is None:
            raise ValueError("Invalid value for `service_code`, must not be `None`")  # noqa: E501

        self._service_code = service_code

    @property
    def service_options(self):
        """Gets the service_options of this CreateShipmentShipmentInformation.  # noqa: E501


        :return: The service_options of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: CreateShipmentServiceOptions
        """
        return self._service_options

    @service_options.setter
    def service_options(self, service_options):
        """Sets the service_options of this CreateShipmentShipmentInformation.


        :param service_options: The service_options of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: CreateShipmentServiceOptions
        """

        self._service_options = service_options

    @property
    def total_packages(self):
        """Gets the total_packages of this CreateShipmentShipmentInformation.  # noqa: E501

        Number of Packages<br />The total number of packages.  # noqa: E501

        :return: The total_packages of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: int
        """
        return self._total_packages

    @total_packages.setter
    def total_packages(self, total_packages):
        """Sets the total_packages of this CreateShipmentShipmentInformation.

        Number of Packages<br />The total number of packages.  # noqa: E501

        :param total_packages: The total_packages of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: int
        """
        if total_packages is None:
            raise ValueError("Invalid value for `total_packages`, must not be `None`")  # noqa: E501

        self._total_packages = total_packages

    @property
    def total_weight(self):
        """Gets the total_weight of this CreateShipmentShipmentInformation.  # noqa: E501

        Total Weight<br />The total weight of the shipment including packaging. Validated againt package weight.<br />Min weight: 1 gram.     <br />*Optional/Overwritten for Average Weight Services - Average Weight Customers only.*  # noqa: E501

        :return: The total_weight of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: float
        """
        return self._total_weight

    @total_weight.setter
    def total_weight(self, total_weight):
        """Sets the total_weight of this CreateShipmentShipmentInformation.

        Total Weight<br />The total weight of the shipment including packaging. Validated againt package weight.<br />Min weight: 1 gram.     <br />*Optional/Overwritten for Average Weight Services - Average Weight Customers only.*  # noqa: E501

        :param total_weight: The total_weight of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: float
        """
        if total_weight is None:
            raise ValueError("Invalid value for `total_weight`, must not be `None`")  # noqa: E501

        self._total_weight = total_weight

    @property
    def weight_unit_of_measure(self):
        """Gets the weight_unit_of_measure of this CreateShipmentShipmentInformation.  # noqa: E501

        Weight Unit of Measure  # noqa: E501

        :return: The weight_unit_of_measure of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: str
        """
        return self._weight_unit_of_measure

    @weight_unit_of_measure.setter
    def weight_unit_of_measure(self, weight_unit_of_measure):
        """Sets the weight_unit_of_measure of this CreateShipmentShipmentInformation.

        Weight Unit of Measure  # noqa: E501

        :param weight_unit_of_measure: The weight_unit_of_measure of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["KG", "Grams"]  # noqa: E501
        if weight_unit_of_measure not in allowed_values:
            raise ValueError(
                "Invalid value for `weight_unit_of_measure` ({0}), must be one of {1}"  # noqa: E501
                .format(weight_unit_of_measure, allowed_values)
            )

        self._weight_unit_of_measure = weight_unit_of_measure

    @property
    def product(self):
        """Gets the product of this CreateShipmentShipmentInformation.  # noqa: E501

        Shipment/Product type being shipped<br />            <br />**DOX** - Documents Only<br />**NDX** - All other shipment product types  # noqa: E501

        :return: The product of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this CreateShipmentShipmentInformation.

        Shipment/Product type being shipped<br />            <br />**DOX** - Documents Only<br />**NDX** - All other shipment product types  # noqa: E501

        :param product: The product of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["NDX", "DOX"]  # noqa: E501
        if product not in allowed_values:
            raise ValueError(
                "Invalid value for `product` ({0}), must be one of {1}"  # noqa: E501
                .format(product, allowed_values)
            )

        self._product = product

    @property
    def description_of_goods(self):
        """Gets the description_of_goods of this CreateShipmentShipmentInformation.  # noqa: E501

        Description of Goods<br />General description of the goods being sent.<br />Required for Non-Document International and BFPO Shipments.<br />Ignored for Documents Only shipments.  # noqa: E501

        :return: The description_of_goods of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: str
        """
        return self._description_of_goods

    @description_of_goods.setter
    def description_of_goods(self, description_of_goods):
        """Sets the description_of_goods of this CreateShipmentShipmentInformation.

        Description of Goods<br />General description of the goods being sent.<br />Required for Non-Document International and BFPO Shipments.<br />Ignored for Documents Only shipments.  # noqa: E501

        :param description_of_goods: The description_of_goods of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: str
        """

        self._description_of_goods = description_of_goods

    @property
    def reason_for_export(self):
        """Gets the reason_for_export of this CreateShipmentShipmentInformation.  # noqa: E501

        Reason For Export<br />Required for International Shipments and BFPO (British Forces Post Office).  # noqa: E501

        :return: The reason_for_export of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_export

    @reason_for_export.setter
    def reason_for_export(self, reason_for_export):
        """Sets the reason_for_export of this CreateShipmentShipmentInformation.

        Reason For Export<br />Required for International Shipments and BFPO (British Forces Post Office).  # noqa: E501

        :param reason_for_export: The reason_for_export of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: str
        """

        self._reason_for_export = reason_for_export

    @property
    def value(self):
        """Gets the value of this CreateShipmentShipmentInformation.  # noqa: E501

        Total Shipment Value<br />Required for Non-Document International and BFPO Shipments.<br />Ignored for Documents Only shipments.  # noqa: E501

        :return: The value of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CreateShipmentShipmentInformation.

        Total Shipment Value<br />Required for Non-Document International and BFPO Shipments.<br />Ignored for Documents Only shipments.  # noqa: E501

        :param value: The value of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def currency(self):
        """Gets the currency of this CreateShipmentShipmentInformation.  # noqa: E501

        Currency<br />This currency will be used for all values across the shipment request.<br />3 digit ISO Currency Code.<br />Required for Non-Document International and BFPO Shipments, or when values are provided.<br />Ignored for Documents Only shipments.  # noqa: E501

        :return: The currency of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreateShipmentShipmentInformation.

        Currency<br />This currency will be used for all values across the shipment request.<br />3 digit ISO Currency Code.<br />Required for Non-Document International and BFPO Shipments, or when values are provided.<br />Ignored for Documents Only shipments.  # noqa: E501

        :param currency: The currency of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def label_format(self):
        """Gets the label_format of this CreateShipmentShipmentInformation.  # noqa: E501

        Requested Label Format<br />*DATASTREAM is only available if it has been activated on your account.*<br />Ignored if ShipmentAction set to Create or Allocate.  # noqa: E501

        :return: The label_format of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: str
        """
        return self._label_format

    @label_format.setter
    def label_format(self, label_format):
        """Sets the label_format of this CreateShipmentShipmentInformation.

        Requested Label Format<br />*DATASTREAM is only available if it has been activated on your account.*<br />Ignored if ShipmentAction set to Create or Allocate.  # noqa: E501

        :param label_format: The label_format of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["PDF", "PNG", "DATASTREAM", "ZPL203DPI", "ZPL300DPI"]  # noqa: E501
        if label_format not in allowed_values:
            raise ValueError(
                "Invalid value for `label_format` ({0}), must be one of {1}"  # noqa: E501
                .format(label_format, allowed_values)
            )

        self._label_format = label_format

    @property
    def silent_print_profile(self):
        """Gets the silent_print_profile of this CreateShipmentShipmentInformation.  # noqa: E501

        Silent Print Profile<br />If present, resulting labels will be printed using this profile.  # noqa: E501

        :return: The silent_print_profile of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: str
        """
        return self._silent_print_profile

    @silent_print_profile.setter
    def silent_print_profile(self, silent_print_profile):
        """Sets the silent_print_profile of this CreateShipmentShipmentInformation.

        Silent Print Profile<br />If present, resulting labels will be printed using this profile.  # noqa: E501

        :param silent_print_profile: The silent_print_profile of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: str
        """

        self._silent_print_profile = silent_print_profile

    @property
    def shipment_action(self):
        """Gets the shipment_action of this CreateShipmentShipmentInformation.  # noqa: E501

        Shipment Action<br />            <br />**Process** - Shipment created and processed, ready for manifesting. Label and tracking number returned.<br />            <br />**Create** - Shipment created as unprocessed, ready for scanning. Scanning will create label and tracking number and move shipment to processed.<br />            <br />**Allocate** - Shipment created as unprocessed with tracking number allocated and returned and label created but not returned. Scanning will return label and move shipment to processed.  # noqa: E501

        :return: The shipment_action of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: str
        """
        return self._shipment_action

    @shipment_action.setter
    def shipment_action(self, shipment_action):
        """Sets the shipment_action of this CreateShipmentShipmentInformation.

        Shipment Action<br />            <br />**Process** - Shipment created and processed, ready for manifesting. Label and tracking number returned.<br />            <br />**Create** - Shipment created as unprocessed, ready for scanning. Scanning will create label and tracking number and move shipment to processed.<br />            <br />**Allocate** - Shipment created as unprocessed with tracking number allocated and returned and label created but not returned. Scanning will return label and move shipment to processed.  # noqa: E501

        :param shipment_action: The shipment_action of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["Process", "Allocate", "Create"]  # noqa: E501
        if shipment_action not in allowed_values:
            raise ValueError(
                "Invalid value for `shipment_action` ({0}), must be one of {1}"  # noqa: E501
                .format(shipment_action, allowed_values)
            )

        self._shipment_action = shipment_action

    @property
    def packages(self):
        """Gets the packages of this CreateShipmentShipmentInformation.  # noqa: E501

        Shipment Packages<br />The packages in the shipment.<br />Required if TotalPackages is more than 1.  # noqa: E501

        :return: The packages of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: list[CreateShipmentShipmentPackage]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this CreateShipmentShipmentInformation.

        Shipment Packages<br />The packages in the shipment.<br />Required if TotalPackages is more than 1.  # noqa: E501

        :param packages: The packages of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: list[CreateShipmentShipmentPackage]
        """

        self._packages = packages

    @property
    def items(self):
        """Gets the items of this CreateShipmentShipmentInformation.  # noqa: E501

        Shipment Items<br />The items in the shipment.<br />Required for Non-Document International Shipments and BFPO (British Forces Post Office).<br />Ignored for Documents Only shipments.  # noqa: E501

        :return: The items of this CreateShipmentShipmentInformation.  # noqa: E501
        :rtype: list[ShipmentItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CreateShipmentShipmentInformation.

        Shipment Items<br />The items in the shipment.<br />Required for Non-Document International Shipments and BFPO (British Forces Post Office).<br />Ignored for Documents Only shipments.  # noqa: E501

        :param items: The items of this CreateShipmentShipmentInformation.  # noqa: E501
        :type: list[ShipmentItem]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateShipmentShipmentInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateShipmentShipmentInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
