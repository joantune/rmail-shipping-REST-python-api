# coding: utf-8

"""
    Royal Mail API Shipping V3 (REST)

    This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.  # noqa: E501

    OpenAPI spec version: 3.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ServiceAvailabilityOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_code': 'str',
        'service_name': 'str',
        'transit_days': 'int',
        'is_tracked': 'bool',
        'signature_included': 'bool',
        'recorded_signed_for_available': 'bool',
        'safeplace_available': 'bool',
        'local_collect_available': 'bool',
        'saturday_guaranteed_available': 'bool',
        'consequential_loss_available': 'bool',
        'formats_available': 'list[ServiceAvailabilityFormat]'
    }

    attribute_map = {
        'service_code': 'ServiceCode',
        'service_name': 'ServiceName',
        'transit_days': 'TransitDays',
        'is_tracked': 'IsTracked',
        'signature_included': 'SignatureIncluded',
        'recorded_signed_for_available': 'RecordedSignedForAvailable',
        'safeplace_available': 'SafeplaceAvailable',
        'local_collect_available': 'LocalCollectAvailable',
        'saturday_guaranteed_available': 'SaturdayGuaranteedAvailable',
        'consequential_loss_available': 'ConsequentialLossAvailable',
        'formats_available': 'FormatsAvailable'
    }

    def __init__(self, service_code=None, service_name=None, transit_days=None, is_tracked=None, signature_included=None, recorded_signed_for_available=None, safeplace_available=None, local_collect_available=None, saturday_guaranteed_available=None, consequential_loss_available=None, formats_available=None):  # noqa: E501
        """ServiceAvailabilityOption - a model defined in Swagger"""  # noqa: E501
        self._service_code = None
        self._service_name = None
        self._transit_days = None
        self._is_tracked = None
        self._signature_included = None
        self._recorded_signed_for_available = None
        self._safeplace_available = None
        self._local_collect_available = None
        self._saturday_guaranteed_available = None
        self._consequential_loss_available = None
        self._formats_available = None
        self.discriminator = None
        self.service_code = service_code
        self.service_name = service_name
        self.transit_days = transit_days
        self.is_tracked = is_tracked
        self.signature_included = signature_included
        self.recorded_signed_for_available = recorded_signed_for_available
        self.safeplace_available = safeplace_available
        self.local_collect_available = local_collect_available
        self.saturday_guaranteed_available = saturday_guaranteed_available
        self.consequential_loss_available = consequential_loss_available
        self.formats_available = formats_available

    @property
    def service_code(self):
        """Gets the service_code of this ServiceAvailabilityOption.  # noqa: E501

        Service Code<br />Customer Mapped Service Code or System Service Code for this service.  # noqa: E501

        :return: The service_code of this ServiceAvailabilityOption.  # noqa: E501
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this ServiceAvailabilityOption.

        Service Code<br />Customer Mapped Service Code or System Service Code for this service.  # noqa: E501

        :param service_code: The service_code of this ServiceAvailabilityOption.  # noqa: E501
        :type: str
        """
        if service_code is None:
            raise ValueError("Invalid value for `service_code`, must not be `None`")  # noqa: E501

        self._service_code = service_code

    @property
    def service_name(self):
        """Gets the service_name of this ServiceAvailabilityOption.  # noqa: E501

        Service Name  # noqa: E501

        :return: The service_name of this ServiceAvailabilityOption.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this ServiceAvailabilityOption.

        Service Name  # noqa: E501

        :param service_name: The service_name of this ServiceAvailabilityOption.  # noqa: E501
        :type: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")  # noqa: E501

        self._service_name = service_name

    @property
    def transit_days(self):
        """Gets the transit_days of this ServiceAvailabilityOption.  # noqa: E501

        Estimated Transit Days  # noqa: E501

        :return: The transit_days of this ServiceAvailabilityOption.  # noqa: E501
        :rtype: int
        """
        return self._transit_days

    @transit_days.setter
    def transit_days(self, transit_days):
        """Sets the transit_days of this ServiceAvailabilityOption.

        Estimated Transit Days  # noqa: E501

        :param transit_days: The transit_days of this ServiceAvailabilityOption.  # noqa: E501
        :type: int
        """
        if transit_days is None:
            raise ValueError("Invalid value for `transit_days`, must not be `None`")  # noqa: E501

        self._transit_days = transit_days

    @property
    def is_tracked(self):
        """Gets the is_tracked of this ServiceAvailabilityOption.  # noqa: E501

        Is Tracked<br />If true, the service is a tracked service.  # noqa: E501

        :return: The is_tracked of this ServiceAvailabilityOption.  # noqa: E501
        :rtype: bool
        """
        return self._is_tracked

    @is_tracked.setter
    def is_tracked(self, is_tracked):
        """Sets the is_tracked of this ServiceAvailabilityOption.

        Is Tracked<br />If true, the service is a tracked service.  # noqa: E501

        :param is_tracked: The is_tracked of this ServiceAvailabilityOption.  # noqa: E501
        :type: bool
        """
        if is_tracked is None:
            raise ValueError("Invalid value for `is_tracked`, must not be `None`")  # noqa: E501

        self._is_tracked = is_tracked

    @property
    def signature_included(self):
        """Gets the signature_included of this ServiceAvailabilityOption.  # noqa: E501

        Signature Included<br />If true, a signature required on delivery is included with the service.  # noqa: E501

        :return: The signature_included of this ServiceAvailabilityOption.  # noqa: E501
        :rtype: bool
        """
        return self._signature_included

    @signature_included.setter
    def signature_included(self, signature_included):
        """Sets the signature_included of this ServiceAvailabilityOption.

        Signature Included<br />If true, a signature required on delivery is included with the service.  # noqa: E501

        :param signature_included: The signature_included of this ServiceAvailabilityOption.  # noqa: E501
        :type: bool
        """
        if signature_included is None:
            raise ValueError("Invalid value for `signature_included`, must not be `None`")  # noqa: E501

        self._signature_included = signature_included

    @property
    def recorded_signed_for_available(self):
        """Gets the recorded_signed_for_available of this ServiceAvailabilityOption.  # noqa: E501

        Recorded Signed For Enhancement Available<br />If true, the recorded signed for enhancement can be used with this service.  # noqa: E501

        :return: The recorded_signed_for_available of this ServiceAvailabilityOption.  # noqa: E501
        :rtype: bool
        """
        return self._recorded_signed_for_available

    @recorded_signed_for_available.setter
    def recorded_signed_for_available(self, recorded_signed_for_available):
        """Sets the recorded_signed_for_available of this ServiceAvailabilityOption.

        Recorded Signed For Enhancement Available<br />If true, the recorded signed for enhancement can be used with this service.  # noqa: E501

        :param recorded_signed_for_available: The recorded_signed_for_available of this ServiceAvailabilityOption.  # noqa: E501
        :type: bool
        """
        if recorded_signed_for_available is None:
            raise ValueError("Invalid value for `recorded_signed_for_available`, must not be `None`")  # noqa: E501

        self._recorded_signed_for_available = recorded_signed_for_available

    @property
    def safeplace_available(self):
        """Gets the safeplace_available of this ServiceAvailabilityOption.  # noqa: E501

        Safe Place Enhancement Available<br />If true, the safe place enhancement can be used with this service.  # noqa: E501

        :return: The safeplace_available of this ServiceAvailabilityOption.  # noqa: E501
        :rtype: bool
        """
        return self._safeplace_available

    @safeplace_available.setter
    def safeplace_available(self, safeplace_available):
        """Sets the safeplace_available of this ServiceAvailabilityOption.

        Safe Place Enhancement Available<br />If true, the safe place enhancement can be used with this service.  # noqa: E501

        :param safeplace_available: The safeplace_available of this ServiceAvailabilityOption.  # noqa: E501
        :type: bool
        """
        if safeplace_available is None:
            raise ValueError("Invalid value for `safeplace_available`, must not be `None`")  # noqa: E501

        self._safeplace_available = safeplace_available

    @property
    def local_collect_available(self):
        """Gets the local_collect_available of this ServiceAvailabilityOption.  # noqa: E501

        Local Collect Enhancement Available<br />If true, the local collect enhancement can be used with this service.  # noqa: E501

        :return: The local_collect_available of this ServiceAvailabilityOption.  # noqa: E501
        :rtype: bool
        """
        return self._local_collect_available

    @local_collect_available.setter
    def local_collect_available(self, local_collect_available):
        """Sets the local_collect_available of this ServiceAvailabilityOption.

        Local Collect Enhancement Available<br />If true, the local collect enhancement can be used with this service.  # noqa: E501

        :param local_collect_available: The local_collect_available of this ServiceAvailabilityOption.  # noqa: E501
        :type: bool
        """
        if local_collect_available is None:
            raise ValueError("Invalid value for `local_collect_available`, must not be `None`")  # noqa: E501

        self._local_collect_available = local_collect_available

    @property
    def saturday_guaranteed_available(self):
        """Gets the saturday_guaranteed_available of this ServiceAvailabilityOption.  # noqa: E501

        Saturday Guaranteed Enhancement Available<br />If true, the saturday guaranteed enhancement can be used with this service.  # noqa: E501

        :return: The saturday_guaranteed_available of this ServiceAvailabilityOption.  # noqa: E501
        :rtype: bool
        """
        return self._saturday_guaranteed_available

    @saturday_guaranteed_available.setter
    def saturday_guaranteed_available(self, saturday_guaranteed_available):
        """Sets the saturday_guaranteed_available of this ServiceAvailabilityOption.

        Saturday Guaranteed Enhancement Available<br />If true, the saturday guaranteed enhancement can be used with this service.  # noqa: E501

        :param saturday_guaranteed_available: The saturday_guaranteed_available of this ServiceAvailabilityOption.  # noqa: E501
        :type: bool
        """
        if saturday_guaranteed_available is None:
            raise ValueError("Invalid value for `saturday_guaranteed_available`, must not be `None`")  # noqa: E501

        self._saturday_guaranteed_available = saturday_guaranteed_available

    @property
    def consequential_loss_available(self):
        """Gets the consequential_loss_available of this ServiceAvailabilityOption.  # noqa: E501

        Consequential Loss Enhancement Available<br />If true, the consequential loss enhancement can be used with this service.  # noqa: E501

        :return: The consequential_loss_available of this ServiceAvailabilityOption.  # noqa: E501
        :rtype: bool
        """
        return self._consequential_loss_available

    @consequential_loss_available.setter
    def consequential_loss_available(self, consequential_loss_available):
        """Sets the consequential_loss_available of this ServiceAvailabilityOption.

        Consequential Loss Enhancement Available<br />If true, the consequential loss enhancement can be used with this service.  # noqa: E501

        :param consequential_loss_available: The consequential_loss_available of this ServiceAvailabilityOption.  # noqa: E501
        :type: bool
        """
        if consequential_loss_available is None:
            raise ValueError("Invalid value for `consequential_loss_available`, must not be `None`")  # noqa: E501

        self._consequential_loss_available = consequential_loss_available

    @property
    def formats_available(self):
        """Gets the formats_available of this ServiceAvailabilityOption.  # noqa: E501

        Formats Available<br />All formats that are available for this service for the given weight, including the maximum weight possible for each format.  # noqa: E501

        :return: The formats_available of this ServiceAvailabilityOption.  # noqa: E501
        :rtype: list[ServiceAvailabilityFormat]
        """
        return self._formats_available

    @formats_available.setter
    def formats_available(self, formats_available):
        """Sets the formats_available of this ServiceAvailabilityOption.

        Formats Available<br />All formats that are available for this service for the given weight, including the maximum weight possible for each format.  # noqa: E501

        :param formats_available: The formats_available of this ServiceAvailabilityOption.  # noqa: E501
        :type: list[ServiceAvailabilityFormat]
        """
        if formats_available is None:
            raise ValueError("Invalid value for `formats_available`, must not be `None`")  # noqa: E501

        self._formats_available = formats_available

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceAvailabilityOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceAvailabilityOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
