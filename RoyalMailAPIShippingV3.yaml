---
swagger: "2.0"
info:
  version: 3.0.12
  title: Royal Mail API Shipping V3 (REST)
  description: This API specification details the requirements for integrating with
    **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail
    API Shipping V3 can be used by business customers to conduct shipping activity
    with Royal Mail and provides the technical information to build this integration.
    This specification must be used with the relevant accompanying specifications
    for customers wishing to interface their systems with Royal Mail services.<br><br>Royal
    Mail API Shipping V3 exposes a fully RESTful service that allows account customers
    to create shipments, produce labels, and produce documentation for all the tasks
    required to ship domestic items with Royal Mail.<br><br>Built on industry standards,
    Royal Mail API Shipping V3 provides a simple and low cost method for customers
    to integrate with Royal Mail, and allows them to get shipping quickly. The API
    offers data streaming and offline barcoding to allow customers greater flexibility
    when generating their labels. There are no costs to customers for using the Royal
    Mail API Shipping V3 services, however customersâ€™ own development costs must be
    covered by the customer developing the solution. Royal Mail will not accept any
    responsibility for these development, implementation and testing costs. Customers
    should address initial enquiries regarding development of systems for these purposes
    to their account handler.<br><br>This API can be used in conjunction with Royal
    Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail
    Pro Shipping, including videos on and briefs on updating/ cancelling a shipment
    and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.
  x-ibm-name: royal-mail-shipping-v3-rest
basePath: /shipping/v3
schemes:
- https
paths:
  /shipments:
    post:
      tags:
      - Shipments
      summary: Create Shipment
      description: Use to generate the final delivery label for your packages.<br
        />            <br />The request is split into several sections:<br />            <br
        />**Shipper** - who and where the parcel is coming from - optional if the
        posting location is to be used.<br />**Destination** - who and where the parcel
        is going to.<br />**Shipment Information** - overall package details, individual
        item details and requested service information.
      operationId: Shipments_Create
      parameters:
      - name: shipment
        in: body
        description: The shipment.
        required: true
        schema:
          $ref: '#/definitions/CreateShipment.Shipment'
      responses:
        200:
          description: The shipment(s) are created successfully
          schema:
            $ref: '#/definitions/ShipmentCreateResponse'
          examples:
            application/json:
              Packages:
              - PackageOccurance: 1
                UniqueId: 1A07033860010000AF62C
                TrackingNumber: TT0213546985GB
                TrackingUrl: https://www.royalmail.com/track-your-item#/tracking-results/TT0213546985GB
                CarrierCode: RMG
              Routing:
                InwardCode: "D44"
                OutwardCode: "Q30"
                Walk: ""
                Loop: ""
              LabelImageFormat: PDF
              LabelImages: iVBORw0KGgoAAAANSUhEUgAAAGgA ... AABoAQMAAAAn0ifiAAAAAXNSR0IArs4c6
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Shipment(s) processed.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentCreateResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Shipment(s) processed.</Message>\r\n  <Packages>\r\n    <PackageResponse>\r\n
              \     <PackageOccurance>1</PackageOccurance>\r\n      <UniqueId>1A07033860010000AF62C</UniqueId>\r\n
              \     <TrackingNumber>TT0213546985GB</TrackingNumber>\r\n      <TrackingUrl>https://www.royalmail.com/track-your-item#/tracking-results/TT0213546985GB</TrackingUrl>\r\n
              \     <CarrierCode>RMG</CarrierCode>\r\n    </PackageResponse>\r\n  </Packages>\r\n
              \ <LabelImageFormat>PDF</LabelImageFormat>\r\n  <LabelImages>iVBORw0KGgoAAAANSUhEUgAAAGgA
              ... AABoAQMAAAAn0ifiAAAAAXNSR0IArs4c6</LabelImages>\r\n  <ReturnLabelImageFormat
              xsi:nil=\"true\" />\r\n</ShipmentCreateResponse>"
        400:
          description: Bad Request - one or more shipments are invalid. Details are
            provided in the error messages.
          schema:
            $ref: '#/definitions/ShipmentCreateResponse'
          examples:
            application/json:
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: The shipment is invalid.
              Errors:
              - Message: The service code provided does not exist.
                Cause: ShipmentInformation.ServiceCode
                ErrorCode: E1433
              - Message: The destination contact name is required.
                Cause: Destination.ContactName
                ErrorCode: E1432
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentCreateResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>The shipment is invalid.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n
              \     <Message>The service code provided does not exist.</Message>\r\n
              \     <Cause>ShipmentInformation.ServiceCode</Cause>\r\n      <ErrorCode>E1433</ErrorCode>\r\n
              \   </ErrorDetail>\r\n    <ErrorDetail>\r\n      <Message>The destination
              contact name is required.</Message>\r\n      <Cause>Destination.ContactName</Cause>\r\n
              \     <ErrorCode>E1432</ErrorCode>\r\n    </ErrorDetail>\r\n  </Errors>\r\n
              \ <LabelImageFormat xsi:nil=\"true\" />\r\n  <ReturnLabelImageFormat
              xsi:nil=\"true\" />\r\n</ShipmentCreateResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /shipments/{shipmentId}/printDocument:
    put:
      tags:
      - Shipments
      summary: Print Document
      description: Prints the requested document for the shipment.<br />If item information,
        description of goods or reason for export have not been provided then the
        document cannot be printed.<br />            <br />This service can only be
        used before the shipment has been confirmed either by calling the manifest
        create request or by closing out via the User Interface.
      operationId: Shipments_PrintDocument
      parameters:
      - name: shipmentId
        in: path
        description: Shipment Id<br />The tracking number or Unique Id of the shipment
          to print.
        required: true
        type: string
        maxLength: 21
        minLength: 13
      - name: printDocumentRequest
        in: body
        description: Print Document Request
        required: true
        schema:
          $ref: '#/definitions/PrintDocumentRequest'
      responses:
        200:
          description: The document has printed successfully
          schema:
            $ref: '#/definitions/PrintDocumentResponse'
          examples:
            application/json:
              ShipmentId: 3A07033860010000B2268
              DocumentType: CN23
              DocumentImage: iVBORw0KGgoAAAANSUhEUgAA ... A4QAAAXcCAYAAAB6Q0CbAAAAAXNSR0IArs4
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Document printed.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PrintDocumentResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Document printed.</Message>\r\n  <ShipmentId>3A07033860010000B2268</ShipmentId>\r\n
              \ <DocumentType>CN23</DocumentType>\r\n  <DocumentImage>iVBORw0KGgoAAAANSUhEUgAA
              ... A4QAAAXcCAYAAAB6Q0CbAAAAAXNSR0IArs4</DocumentImage>\r\n</PrintDocumentResponse>"
        400:
          description: Bad Request - the shipment is in an invalid state and the document
            cannot be printed. Details are provided in the error messages.
          schema:
            $ref: '#/definitions/PrintDocumentResponse'
          examples:
            application/json:
              ShipmentId: 3A01234561234568AE7C7
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: Invalid request.
              Errors:
              - Message: The shipment has already been manifested.
                Cause: ShipmentExportState
                ErrorCode: E1434
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PrintDocumentResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>Invalid request.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n
              \     <Message>The shipment has already been manifested.</Message>\r\n
              \     <Cause>ShipmentExportState</Cause>\r\n      <ErrorCode>E1434</ErrorCode>\r\n
              \   </ErrorDetail>\r\n  </Errors>\r\n  <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n
              \ <DocumentType xsi:nil=\"true\" />\r\n</PrintDocumentResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: The shipment was not found
          schema:
            $ref: '#/definitions/PrintDocumentResponse'
          examples:
            application/json:
              ShipmentId: RE012345673GB
              HttpStatusCode: 404
              HttpStatusDescription: NotFound
              Message: The shipment was not found.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PrintDocumentResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>404</HttpStatusCode>\r\n  <HttpStatusDescription>NotFound</HttpStatusDescription>\r\n
              \ <Message>The shipment was not found.</Message>\r\n  <ShipmentId>RE012345673GB</ShipmentId>\r\n
              \ <DocumentType xsi:nil=\"true\" />\r\n</PrintDocumentResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /shipments/{shipmentId}/printLabel:
    put:
      tags:
      - Shipments
      summary: Print Label
      description: Prints the label for the shipment.<br />Moves the shipment to processed,
        ready to manifest, if the shipment was not already in a processed state.<br
        />This service can only be used before the shipment has been confirmed either
        by calling the manifest create request or by closing out via the User Interface.<br
        />**On Hold Shipment**<br />Calling print label on a held shipment will release
        the shipment from hold and update the shipment date to today.
      operationId: Shipments_PrintLabel
      parameters:
      - name: shipmentId
        in: path
        description: Shipment Id<br />The tracking number or Unique Id of the shipment
          to print.
        required: true
        type: string
        maxLength: 21
        minLength: 13
      - name: printLabelRequest
        in: body
        description: Print Label Request
        required: true
        schema:
          $ref: '#/definitions/PrintLabelRequest'
      responses:
        200:
          description: The label was printed successfully
          schema:
            $ref: '#/definitions/PrintLabelResponse'
          examples:
            application/json:
              ShipmentId: 3A07033860010000B2268
              LabelImage: iVBORw0KGgoAAAANSUhEUgAA ... A4QAAAXcCAYAAAB6Q0CbAAAAAXNSR0IArs4
              LabelImageFormat: PNG
              TrackingNumber: GQ660548056GB
              UniqueId: 3A07033860010000B2268
              TrackingUrl: https://www.royalmail.com/track-your-item#/tracking-results/GQ660548056GB
              CarrierCode: RMG
              ReturnLabelImageFormat: PDF
              ReturnLabelImage: JVBERi0xLjQKJdP0zOEKMSAwIG9iag ... o8PAovQ3JlYXRpb25EYXRlKEQ6MjAxODExMDExMzQ
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Label printed and shipment moved to processed ready for manifesting.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PrintLabelResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Label printed and shipment moved to processed ready for manifesting.</Message>\r\n
              \ <ShipmentId>3A07033860010000B2268</ShipmentId>\r\n  <LabelImage>iVBORw0KGgoAAAANSUhEUgAA
              ... A4QAAAXcCAYAAAB6Q0CbAAAAAXNSR0IArs4</LabelImage>\r\n  <LabelImageFormat>PNG</LabelImageFormat>\r\n
              \ <TrackingNumber>GQ660548056GB</TrackingNumber>\r\n  <UniqueId>3A07033860010000B2268</UniqueId>\r\n
              \ <TrackingUrl>https://www.royalmail.com/track-your-item#/tracking-results/GQ660548056GB</TrackingUrl>\r\n
              \ <CarrierCode>RMG</CarrierCode>\r\n  <ReturnLabelImageFormat>PDF</ReturnLabelImageFormat>\r\n
              \ <ReturnLabelImage>JVBERi0xLjQKJdP0zOEKMSAwIG9iag ... o8PAovQ3JlYXRpb25EYXRlKEQ6MjAxODExMDExMzQ</ReturnLabelImage>\r\n</PrintLabelResponse>"
        400:
          description: Invalid Request. Details are provided in the error messages.
          schema:
            $ref: '#/definitions/PrintLabelResponse'
          examples:
            application/json:
              ShipmentId: 3A01234561234568AE7C7
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: Invalid request.
              Errors:
              - Message: The shipment has already been manifested and cannot be reprinted.
                Cause: ShipmentExportState
                ErrorCode: E1434
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PrintLabelResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>Invalid request.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n
              \     <Message>The shipment has already been manifested and cannot be
              reprinted.</Message>\r\n      <Cause>ShipmentExportState</Cause>\r\n
              \     <ErrorCode>E1434</ErrorCode>\r\n    </ErrorDetail>\r\n  </Errors>\r\n
              \ <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n  <LabelImageFormat
              xsi:nil=\"true\" />\r\n  <ReturnLabelImageFormat xsi:nil=\"true\" />\r\n</PrintLabelResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: The shipment was not found
          schema:
            $ref: '#/definitions/PrintLabelResponse'
          examples:
            application/json:
              ShipmentId: RE012345673GB
              HttpStatusCode: 404
              HttpStatusDescription: NotFound
              Message: The shipment was not found.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PrintLabelResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>404</HttpStatusCode>\r\n  <HttpStatusDescription>NotFound</HttpStatusDescription>\r\n
              \ <Message>The shipment was not found.</Message>\r\n  <ShipmentId>RE012345673GB</ShipmentId>\r\n
              \ <LabelImageFormat xsi:nil=\"true\" />\r\n  <ReturnLabelImageFormat
              xsi:nil=\"true\" />\r\n</PrintLabelResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /shipments/cancel:
    put:
      tags:
      - Shipments
      summary: Cancel Shipments
      description: Can be used to cancel/void one or more current shipping labels.<br
        />This service can only be used before the shipment has been confirmed either
        by calling the manifest create request or by closing out via the User Interface.<br
        />There can be a maximum of 99 cancellation requests per call.
      operationId: Shipments_Cancel
      parameters:
      - name: shipmentCancelRequests
        in: body
        description: Shipment Cancel Requests
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/ShipmentCancelRequest'
          xml:
            name: ArrayOfShipmentCancelRequest
            wrapped: true
      responses:
        200:
          description: All shipments were cancelled successfully
          schema:
            $ref: '#/definitions/ShipmentsCancelResponse'
          examples:
            application/json:
              ShipmentIds:
              - RE012345673GB
              - 3A01234561234568AE7C7
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Shipments cancelled.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentsCancelResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Shipments cancelled.</Message>\r\n  <ShipmentIds>\r\n    <ShipmentId>RE012345673GB</ShipmentId>\r\n
              \   <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n  </ShipmentIds>\r\n</ShipmentsCancelResponse>"
        400:
          description: Bad Request - one or more shipments are in an invalid state
            to cancel. Details are provided in the error messages. No shipments will
            be cancelled.
          schema:
            $ref: '#/definitions/ShipmentsCancelResponse'
          examples:
            application/json:
              ShipmentIds:
              - RE012345673GB
              - 3A01234561234568AE7C7
              - RE012345458GB
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: One or more requests are invalid. No shipments have been cancelled.
              Errors:
              - Message: The reason for cancellation is required.
                Cause: RE012345673GB
                ErrorCode: E1432
              - Message: The shipment has already been manifested and cannot be cancelled.
                Cause: 3A01234561234568AE7C7
                ErrorCode: E1434
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentsCancelResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>One or more requests are invalid. No shipments have been
              cancelled.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n      <Message>The
              reason for cancellation is required.</Message>\r\n      <Cause>RE012345673GB</Cause>\r\n
              \     <ErrorCode>E1432</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The shipment has already been manifested and cannot be
              cancelled.</Message>\r\n      <Cause>3A01234561234568AE7C7</Cause>\r\n
              \     <ErrorCode>E1434</ErrorCode>\r\n    </ErrorDetail>\r\n  </Errors>\r\n
              \ <ShipmentIds>\r\n    <ShipmentId>RE012345673GB</ShipmentId>\r\n    <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n
              \   <ShipmentId>RE012345458GB</ShipmentId>\r\n  </ShipmentIds>\r\n</ShipmentsCancelResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: One or more shipments were not found. No shipments will be
            cancelled.
          schema:
            $ref: '#/definitions/ShipmentsCancelResponse'
          examples:
            application/json:
              ShipmentIds:
              - RE012345673GB
              - 3A01234561234568AE7C7
              - RE012345458GB
              HttpStatusCode: 404
              HttpStatusDescription: NotFound
              Message: One or more shipments were not found. No shipments have been
                cancelled.
              Errors:
              - Message: The shipment was not found.
                Cause: RE012345673GB
                ErrorCode: E1435
              - Message: The shipment was not found.
                Cause: 3A01234561234568AE7C7
                ErrorCode: E1435
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentsCancelResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>404</HttpStatusCode>\r\n  <HttpStatusDescription>NotFound</HttpStatusDescription>\r\n
              \ <Message>One or more shipments were not found. No shipments have been
              cancelled.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n      <Message>The
              shipment was not found.</Message>\r\n      <Cause>RE012345673GB</Cause>\r\n
              \     <ErrorCode>E1435</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The shipment was not found.</Message>\r\n      <Cause>3A01234561234568AE7C7</Cause>\r\n
              \     <ErrorCode>E1435</ErrorCode>\r\n    </ErrorDetail>\r\n  </Errors>\r\n
              \ <ShipmentIds>\r\n    <ShipmentId>RE012345673GB</ShipmentId>\r\n    <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n
              \   <ShipmentId>RE012345458GB</ShipmentId>\r\n  </ShipmentIds>\r\n</ShipmentsCancelResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /shipments/defer:
    put:
      tags:
      - Shipments
      summary: Defer Shipments
      description: Used to update the shipment shipping date for a current shipment.<br
        />A shipment can be deferred by a maximum of 28 days from the date of the
        request.<br />This service can only be used before the shipment has been confirmed
        either by calling the manifest create request or by closing out via the User
        Interface.<br />There can be a maximum of 99 defer requests per call.
      operationId: Shipments_Defer
      parameters:
      - name: shipmentDeferRequests
        in: body
        description: The shipments to defer.
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/ShipmentDeferRequest'
          xml:
            name: ArrayOfShipmentDeferRequest
            wrapped: true
      responses:
        200:
          description: All shipments were deferred successfully
          schema:
            $ref: '#/definitions/ShipmentsDeferResponse'
          examples:
            application/json:
              ShipmentIds:
              - RE012345673GB
              - 3A01234561234568AE7C7
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Shipments deferred.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentsDeferResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Shipments deferred.</Message>\r\n  <ShipmentIds>\r\n    <ShipmentId>RE012345673GB</ShipmentId>\r\n
              \   <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n  </ShipmentIds>\r\n</ShipmentsDeferResponse>"
        400:
          description: Bad Request - one or more shipments are in an invalid state
            to defer or the date is invalid. Details are provided in the error messages.
            No shipments will be deferred.
          schema:
            $ref: '#/definitions/ShipmentsDeferResponse'
          examples:
            application/json:
              ShipmentIds:
              - RE012345673GB
              - 3A01234561234568AE7C7
              - RE012345458GB
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: One or more requests are invalid. No shipments have been deferred.
              Errors:
              - Message: The shipment date cannot be in the past.
                Cause: RE012345673GB
                ErrorCode: E1433
              - Message: The shipment has already been manifested and cannot be deferred.
                Cause: 3A01234561234568AE7C7
                ErrorCode: E1434
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentsDeferResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>One or more requests are invalid. No shipments have been
              deferred.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n      <Message>The
              shipment date cannot be in the past.</Message>\r\n      <Cause>RE012345673GB</Cause>\r\n
              \     <ErrorCode>E1433</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The shipment has already been manifested and cannot be
              deferred.</Message>\r\n      <Cause>3A01234561234568AE7C7</Cause>\r\n
              \     <ErrorCode>E1434</ErrorCode>\r\n    </ErrorDetail>\r\n  </Errors>\r\n
              \ <ShipmentIds>\r\n    <ShipmentId>RE012345673GB</ShipmentId>\r\n    <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n
              \   <ShipmentId>RE012345458GB</ShipmentId>\r\n  </ShipmentIds>\r\n</ShipmentsDeferResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: One or more shipments were not found. No shipments will be
            deferred.
          schema:
            $ref: '#/definitions/ShipmentsDeferResponse'
          examples:
            application/json:
              ShipmentIds:
              - RE012345673GB
              - 3A01234561234568AE7C7
              - RE012345458GB
              HttpStatusCode: 404
              HttpStatusDescription: NotFound
              Message: One or more shipments were not found. No shipments have been
                deferred.
              Errors:
              - Message: The shipment was not found.
                Cause: RE012345673GB
                ErrorCode: E1435
              - Message: The shipment was not found.
                Cause: 3A01234561234568AE7C7
                ErrorCode: E1435
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentsDeferResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>404</HttpStatusCode>\r\n  <HttpStatusDescription>NotFound</HttpStatusDescription>\r\n
              \ <Message>One or more shipments were not found. No shipments have been
              deferred.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n      <Message>The
              shipment was not found.</Message>\r\n      <Cause>RE012345673GB</Cause>\r\n
              \     <ErrorCode>E1435</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The shipment was not found.</Message>\r\n      <Cause>3A01234561234568AE7C7</Cause>\r\n
              \     <ErrorCode>E1435</ErrorCode>\r\n    </ErrorDetail>\r\n  </Errors>\r\n
              \ <ShipmentIds>\r\n    <ShipmentId>RE012345673GB</ShipmentId>\r\n    <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n
              \   <ShipmentId>RE012345458GB</ShipmentId>\r\n  </ShipmentIds>\r\n</ShipmentsDeferResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /shipments/hold:
    put:
      tags:
      - Shipments
      summary: Hold Shipments
      description: Used to put a shipment on hold indefinitely.<br />A shipment on
        hold will not be included in any closeouts, but instead will remain in its
        current state.<br />Calling printLabel will release the shipment from being
        held.<br />This service can only be used before the shipment has been confirmed
        either by calling the manifest create request or by closing out via the User
        Interface.<br />            <br />A hold reason must be provided and must
        match those set in Pro Shipping under your maintenance screens.<br />If no
        hold reasons exist, then shipments cannot be put on hold.<br />            <br
        />There can be a maximum of 99 hold requests per call.
      operationId: Shipments_Hold
      parameters:
      - name: shipmentHoldRequests
        in: body
        description: The shipments to hold.
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/ShipmentHoldRequest'
          xml:
            name: ArrayOfShipmentHoldRequest
            wrapped: true
      responses:
        200:
          description: All shipments were put on hold successfully
          schema:
            $ref: '#/definitions/ShipmentsHoldResponse'
          examples:
            application/json:
              ShipmentIds:
              - RE012345673GB
              - 3A01234561234568AE7C7
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Shipments held.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentsHoldResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Shipments held.</Message>\r\n  <ShipmentIds>\r\n    <ShipmentId>RE012345673GB</ShipmentId>\r\n
              \   <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n  </ShipmentIds>\r\n</ShipmentsHoldResponse>"
        400:
          description: Bad Request - one or more shipments are in an invalid state
            to hold or the hold reason is invalid. Details are provided in the error
            messages. No shipments will be put on hold.
          schema:
            $ref: '#/definitions/ShipmentsHoldResponse'
          examples:
            application/json:
              ShipmentIds:
              - RE012345673GB
              - 3A01234561234568AE7C7
              - RE012345458GB
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: One or more requests are invalid. No shipments have been put
                on hold.
              Errors:
              - Message: The reason for hold is required.
                Cause: RE012345673GB
                ErrorCode: E1432
              - Message: The shipment has already been manifested and cannot be held.
                Cause: 3A01234561234568AE7C7
                ErrorCode: E1434
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentsHoldResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>One or more requests are invalid. No shipments have been
              put on hold.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n      <Message>The
              reason for hold is required.</Message>\r\n      <Cause>RE012345673GB</Cause>\r\n
              \     <ErrorCode>E1432</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The shipment has already been manifested and cannot be
              held.</Message>\r\n      <Cause>3A01234561234568AE7C7</Cause>\r\n      <ErrorCode>E1434</ErrorCode>\r\n
              \   </ErrorDetail>\r\n  </Errors>\r\n  <ShipmentIds>\r\n    <ShipmentId>RE012345673GB</ShipmentId>\r\n
              \   <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n    <ShipmentId>RE012345458GB</ShipmentId>\r\n
              \ </ShipmentIds>\r\n</ShipmentsHoldResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: One or more shipments were not found. No shipments will be
            put on hold.
          schema:
            $ref: '#/definitions/ShipmentsHoldResponse'
          examples:
            application/json:
              ShipmentIds:
              - RE012345673GB
              - 3A01234561234568AE7C7
              - RE012345458GB
              HttpStatusCode: 404
              HttpStatusDescription: NotFound
              Message: One or more shipments were not found. No shipments have been
                put on hold.
              Errors:
              - Message: The shipment was not found.
                Cause: RE012345673GB
                ErrorCode: E1435
              - Message: The shipment was not found.
                Cause: 3A01234561234568AE7C7
                ErrorCode: E1435
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentsHoldResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>404</HttpStatusCode>\r\n  <HttpStatusDescription>NotFound</HttpStatusDescription>\r\n
              \ <Message>One or more shipments were not found. No shipments have been
              put on hold.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n      <Message>The
              shipment was not found.</Message>\r\n      <Cause>RE012345673GB</Cause>\r\n
              \     <ErrorCode>E1435</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The shipment was not found.</Message>\r\n      <Cause>3A01234561234568AE7C7</Cause>\r\n
              \     <ErrorCode>E1435</ErrorCode>\r\n    </ErrorDetail>\r\n  </Errors>\r\n
              \ <ShipmentIds>\r\n    <ShipmentId>RE012345673GB</ShipmentId>\r\n    <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n
              \   <ShipmentId>RE012345458GB</ShipmentId>\r\n  </ShipmentIds>\r\n</ShipmentsHoldResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /shipments/release:
    put:
      tags:
      - Shipments
      summary: Release Shipments
      description: Used to release a shipment from being on hold.<br />This service
        can only be used for shipments on hold.<br />            <br />Releasing a
        shipment from hold will update the shipment date to today's date and if the
        shipment is processed it will be included the next requested manifest.<br
        />            <br />There can be a maximum of 99 release requests per call.
      operationId: Shipments_Release
      parameters:
      - name: shipmentsReleaseRequest
        in: body
        description: Shipments Release Request
        required: true
        schema:
          $ref: '#/definitions/ShipmentsReleaseRequest'
      responses:
        200:
          description: All shipments were released successfully
          schema:
            $ref: '#/definitions/ShipmentsReleaseResponse'
          examples:
            application/json:
              ShipmentIds:
              - RE012345673GB
              - 3A01234561234568AE7C7
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Shipments released.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentsReleaseResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Shipments released.</Message>\r\n  <ShipmentIds>\r\n    <ShipmentId>RE012345673GB</ShipmentId>\r\n
              \   <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n  </ShipmentIds>\r\n</ShipmentsReleaseResponse>"
        400:
          description: Bad Request - one or more shipments are in an invalid state.
            Details are provided in the error messages. No shipments will be released.
          schema:
            $ref: '#/definitions/ShipmentsReleaseResponse'
          examples:
            application/json:
              ShipmentIds:
              - RE012345673GB
              - 3A01234561234568AE7C7
              - RE012345458GB
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: One or more requests are invalid. No shipments have been released.
              Errors:
              - Message: The shipment is not on hold.
                Cause: RE012345673GB
                ErrorCode: E1434
              - Message: The shipment is cancelled.
                Cause: 3A01234561234568AE7C7
                ErrorCode: E1434
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentsReleaseResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>One or more requests are invalid. No shipments have been
              released.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n      <Message>The
              shipment is not on hold.</Message>\r\n      <Cause>RE012345673GB</Cause>\r\n
              \     <ErrorCode>E1434</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The shipment is cancelled.</Message>\r\n      <Cause>3A01234561234568AE7C7</Cause>\r\n
              \     <ErrorCode>E1434</ErrorCode>\r\n    </ErrorDetail>\r\n  </Errors>\r\n
              \ <ShipmentIds>\r\n    <ShipmentId>RE012345673GB</ShipmentId>\r\n    <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n
              \   <ShipmentId>RE012345458GB</ShipmentId>\r\n  </ShipmentIds>\r\n</ShipmentsReleaseResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: One or more shipments were not found. No shipments will be
            released.
          schema:
            $ref: '#/definitions/ShipmentsReleaseResponse'
          examples:
            application/json:
              ShipmentIds:
              - RE012345673GB
              - 3A01234561234568AE7C7
              - RE012345458GB
              HttpStatusCode: 404
              HttpStatusDescription: NotFound
              Message: One or more shipments were not found. No shipments have been
                released.
              Errors:
              - Message: The shipment was not found.
                Cause: RE012345673GB
                ErrorCode: E1435
              - Message: The shipment was not found.
                Cause: 3A01234561234568AE7C7
                ErrorCode: E1435
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ShipmentsReleaseResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>404</HttpStatusCode>\r\n  <HttpStatusDescription>NotFound</HttpStatusDescription>\r\n
              \ <Message>One or more shipments were not found. No shipments have been
              released.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n      <Message>The
              shipment was not found.</Message>\r\n      <Cause>RE012345673GB</Cause>\r\n
              \     <ErrorCode>E1435</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The shipment was not found.</Message>\r\n      <Cause>3A01234561234568AE7C7</Cause>\r\n
              \     <ErrorCode>E1435</ErrorCode>\r\n    </ErrorDetail>\r\n  </Errors>\r\n
              \ <ShipmentIds>\r\n    <ShipmentId>RE012345673GB</ShipmentId>\r\n    <ShipmentId>3A01234561234568AE7C7</ShipmentId>\r\n
              \   <ShipmentId>RE012345458GB</ShipmentId>\r\n  </ShipmentIds>\r\n</ShipmentsReleaseResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /shipments/serviceAvailability:
    post:
      tags:
      - Shipments
      summary: Service Availability
      description: Retrieve a list of available services for a potential shipment.<br
        />            <br />**Destination** - where the parcel is going to.<br />**Shipment
        Information** - overall package details and requested service requirements.
      operationId: Shipments_ServiceAvailability
      parameters:
      - name: shipment
        in: body
        description: The shipment.
        required: true
        schema:
          $ref: '#/definitions/ServiceAvailability.Shipment'
      responses:
        200:
          description: The available service options are returned.
          schema:
            $ref: '#/definitions/ServiceAvailabilityResponse'
          examples:
            application/json:
              WeightUnitOfMeasure: KG
              Options:
              - ServiceCode: TPSN
                ServiceName: Royal Mail Tracked 48 No Signature
                TransitDays: 2
                IsTracked: true
                SignatureIncluded: false
                RecordedSignedForAvailable: false
                SafeplaceAvailable: true
                LocalCollectAvailable: true
                SaturdayGuaranteedAvailable: false
                ConsequentialLossAvailable: false
                FormatsAvailable:
                - FormatDescription: Not Applicable
                  MaxWeight: 20
              - ServiceCode: TPSS
                ServiceName: Royal Mail Tracked 48 Signature
                TransitDays: 2
                IsTracked: true
                SignatureIncluded: true
                RecordedSignedForAvailable: false
                SafeplaceAvailable: true
                LocalCollectAvailable: true
                SaturdayGuaranteedAvailable: false
                ConsequentialLossAvailable: false
                FormatsAvailable:
                - FormatDescription: Not Applicable
                  MaxWeight: 20
              - ServiceCode: STL1
                ServiceName: 1st Class Account Mail
                TransitDays: 1
                IsTracked: false
                SignatureIncluded: false
                RecordedSignedForAvailable: true
                SafeplaceAvailable: false
                LocalCollectAvailable: false
                SaturdayGuaranteedAvailable: false
                ConsequentialLossAvailable: false
                FormatsAvailable:
                - ServiceFormat: L
                  MaxWeight: 0.001000
                - ServiceFormat: F
                  MaxWeight: 0.750000
                - ServiceFormat: P
                  MaxWeight: 20
              - ServiceCode: SD1
                ServiceName: Special Delivery Guaranteed by 1pm (Â£750)
                TransitDays: 1
                IsTracked: true
                SignatureIncluded: true
                RecordedSignedForAvailable: false
                SafeplaceAvailable: false
                LocalCollectAvailable: true
                SaturdayGuaranteedAvailable: true
                ConsequentialLossAvailable: true
                FormatsAvailable:
                - FormatDescription: Not Applicable
                  MaxWeight: 10
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Available service options returned.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ServiceAvailabilityResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Available service options returned.</Message>\r\n  <WeightUnitOfMeasure>KG</WeightUnitOfMeasure>\r\n
              \ <Options>\r\n    <Option>\r\n      <ServiceCode>TPSN</ServiceCode>\r\n
              \     <ServiceName>Royal Mail Tracked 48 No Signature</ServiceName>\r\n
              \     <TransitDays>2</TransitDays>\r\n      <IsTracked>true</IsTracked>\r\n
              \     <SignatureIncluded>false</SignatureIncluded>\r\n      <RecordedSignedForAvailable>false</RecordedSignedForAvailable>\r\n
              \     <SafeplaceAvailable>true</SafeplaceAvailable>\r\n      <LocalCollectAvailable>true</LocalCollectAvailable>\r\n
              \     <SaturdayGuaranteedAvailable>false</SaturdayGuaranteedAvailable>\r\n
              \     <ConsequentialLossAvailable>false</ConsequentialLossAvailable>\r\n
              \     <FormatsAvailable>\r\n        <Format>\r\n          <ServiceFormat
              xsi:nil=\"true\" />\r\n          <FormatDescription>Not Applicable</FormatDescription>\r\n
              \         <MaxWeight>20</MaxWeight>\r\n        </Format>\r\n      </FormatsAvailable>\r\n
              \   </Option>\r\n    <Option>\r\n      <ServiceCode>TPSS</ServiceCode>\r\n
              \     <ServiceName>Royal Mail Tracked 48 Signature</ServiceName>\r\n
              \     <TransitDays>2</TransitDays>\r\n      <IsTracked>true</IsTracked>\r\n
              \     <SignatureIncluded>true</SignatureIncluded>\r\n      <RecordedSignedForAvailable>false</RecordedSignedForAvailable>\r\n
              \     <SafeplaceAvailable>true</SafeplaceAvailable>\r\n      <LocalCollectAvailable>true</LocalCollectAvailable>\r\n
              \     <SaturdayGuaranteedAvailable>false</SaturdayGuaranteedAvailable>\r\n
              \     <ConsequentialLossAvailable>false</ConsequentialLossAvailable>\r\n
              \     <FormatsAvailable>\r\n        <Format>\r\n          <ServiceFormat
              xsi:nil=\"true\" />\r\n          <FormatDescription>Not Applicable</FormatDescription>\r\n
              \         <MaxWeight>20</MaxWeight>\r\n        </Format>\r\n      </FormatsAvailable>\r\n
              \   </Option>\r\n    <Option>\r\n      <ServiceCode>STL1</ServiceCode>\r\n
              \     <ServiceName>1st Class Account Mail</ServiceName>\r\n      <TransitDays>1</TransitDays>\r\n
              \     <IsTracked>false</IsTracked>\r\n      <SignatureIncluded>false</SignatureIncluded>\r\n
              \     <RecordedSignedForAvailable>true</RecordedSignedForAvailable>\r\n
              \     <SafeplaceAvailable>false</SafeplaceAvailable>\r\n      <LocalCollectAvailable>false</LocalCollectAvailable>\r\n
              \     <SaturdayGuaranteedAvailable>false</SaturdayGuaranteedAvailable>\r\n
              \     <ConsequentialLossAvailable>false</ConsequentialLossAvailable>\r\n
              \     <FormatsAvailable>\r\n        <Format>\r\n          <ServiceFormat>L</ServiceFormat>\r\n
              \         <MaxWeight>0.001</MaxWeight>\r\n        </Format>\r\n        <Format>\r\n
              \         <ServiceFormat>F</ServiceFormat>\r\n          <MaxWeight>0.75</MaxWeight>\r\n
              \       </Format>\r\n        <Format>\r\n          <ServiceFormat>P</ServiceFormat>\r\n
              \         <MaxWeight>20</MaxWeight>\r\n        </Format>\r\n      </FormatsAvailable>\r\n
              \   </Option>\r\n    <Option>\r\n      <ServiceCode>SD1</ServiceCode>\r\n
              \     <ServiceName>Special Delivery Guaranteed by 1pm (Â£750)</ServiceName>\r\n
              \     <TransitDays>1</TransitDays>\r\n      <IsTracked>true</IsTracked>\r\n
              \     <SignatureIncluded>true</SignatureIncluded>\r\n      <RecordedSignedForAvailable>false</RecordedSignedForAvailable>\r\n
              \     <SafeplaceAvailable>false</SafeplaceAvailable>\r\n      <LocalCollectAvailable>true</LocalCollectAvailable>\r\n
              \     <SaturdayGuaranteedAvailable>true</SaturdayGuaranteedAvailable>\r\n
              \     <ConsequentialLossAvailable>true</ConsequentialLossAvailable>\r\n
              \     <FormatsAvailable>\r\n        <Format>\r\n          <ServiceFormat
              xsi:nil=\"true\" />\r\n          <FormatDescription>Not Applicable</FormatDescription>\r\n
              \         <MaxWeight>10</MaxWeight>\r\n        </Format>\r\n      </FormatsAvailable>\r\n
              \   </Option>\r\n  </Options>\r\n</ServiceAvailabilityResponse>"
        400:
          description: The request was invalid. Details are provided in the error
            messages.
          schema:
            $ref: '#/definitions/ServiceAvailabilityResponse'
          examples:
            application/json:
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: The shipment is invalid.
              Errors:
              - Message: Service code ABC does not exist.
                Cause: ShipmentInformation.ServiceCode
                ErrorCode: E1433
              - Message: The destination town is required.
                Cause: Destination.Town
                ErrorCode: E1432
              - Message: The destination country code AA is invalid.
                Cause: Destination.CountryCode
                ErrorCode: E1432
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ServiceAvailabilityResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>The shipment is invalid.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n
              \     <Message>Service code ABC does not exist.</Message>\r\n      <Cause>ShipmentInformation.ServiceCode</Cause>\r\n
              \     <ErrorCode>E1433</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The destination town is required.</Message>\r\n      <Cause>Destination.Town</Cause>\r\n
              \     <ErrorCode>E1432</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The destination country code AA is invalid.</Message>\r\n
              \     <Cause>Destination.CountryCode</Cause>\r\n      <ErrorCode>E1432</ErrorCode>\r\n
              \   </ErrorDetail>\r\n  </Errors>\r\n</ServiceAvailabilityResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /manifests:
    post:
      tags:
      - Manifests
      summary: Manifest All Shipments
      description: 'Manifest all shipments that are ready to manifest for a single
        Posting Location.<br />             <br />Required to confirm parcels are
        ready to despatch.<br />Generates the required paperwork to despatch your
        parcels. <br />One or more manifests, including the base 64 encoded PDF and
        manifest number will be returned.<br />            <br />*Note: All average
        weight shipments are ignored and need to be closed out via Shipment Processing*'
      operationId: Manifests_Create
      parameters:
      - name: request
        in: body
        description: Request
        required: true
        schema:
          $ref: '#/definitions/ManifestRequest'
      responses:
        200:
          description: The manifest(s) have created successfully
          schema:
            $ref: '#/definitions/ManifestResponse'
          examples:
            application/json:
              PostingLocation: "123456789"
              Manifests:
              - ManifestNumber: INT1810000003
                ManifestImage: JVBERi0xLjQKJdP0zOEKMSAwIG ... yDy51RYblaQeRyJybTcNlVe37Y
                CarrierCode: RMG
                ServiceCode: TPLN
                TotalWeight: 5.342000
                TotalPackages: 14
              - ManifestNumber: INT1810000004
                ManifestImage: JVBERi0xLjQKJdP0zOEKMSAwIG ... yDy51RYblaQeRyJybTcNlVe37Y
                CarrierCode: RMG
                ServiceCode: Mixed
                TotalWeight: 8.342000
                TotalPackages: 32
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Shipments manifested successfully
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ManifestResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Shipments manifested successfully</Message>\r\n  <PostingLocation>0123456789</PostingLocation>\r\n
              \ <Manifests>\r\n    <Manifest>\r\n      <ManifestNumber>INT1810000003</ManifestNumber>\r\n
              \     <ManifestImage>JVBERi0xLjQKJdP0zOEKMSAwIG ... yDy51RYblaQeRyJybTcNlVe37Y</ManifestImage>\r\n
              \     <CarrierCode>RMG</CarrierCode>\r\n      <ServiceCode>TPLN</ServiceCode>\r\n
              \     <TotalWeight>5.342</TotalWeight>\r\n      <TotalPackages>14</TotalPackages>\r\n
              \   </Manifest>\r\n    <Manifest>\r\n      <ManifestNumber>INT1810000004</ManifestNumber>\r\n
              \     <ManifestImage>JVBERi0xLjQKJdP0zOEKMSAwIG ... yDy51RYblaQeRyJybTcNlVe37Y</ManifestImage>\r\n
              \     <CarrierCode>RMG</CarrierCode>\r\n      <ServiceCode>Mixed</ServiceCode>\r\n
              \     <TotalWeight>8.342</TotalWeight>\r\n      <TotalPackages>32</TotalPackages>\r\n
              \   </Manifest>\r\n  </Manifests>\r\n</ManifestResponse>"
        400:
          description: Bad Request - the posting location is required or invalid,
            or there are no shipments to manifest. Details are provided in the error
            messages.
          schema:
            $ref: '#/definitions/ManifestResponse'
          examples:
            application/json:
              PostingLocation: "123456789"
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: The request is invalid.
              Errors:
              - Message: There are no shipments ready to manifest
                Cause: PostingLocation
                ErrorCode: E1434
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ManifestResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>The request is invalid.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n
              \     <Message>There are no shipments ready to manifest</Message>\r\n
              \     <Cause>PostingLocation</Cause>\r\n      <ErrorCode>E1434</ErrorCode>\r\n
              \   </ErrorDetail>\r\n  </Errors>\r\n  <PostingLocation>0123456789</PostingLocation>\r\n</ManifestResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /manifests/bycarrier:
    post:
      tags:
      - Manifests
      summary: Manifest by Carrier Code(s)
      description: 'Manifest shipments created with the given carrier codes that are
        ready to manifest for a single Posting Location.<br />            <br />Required
        to confirm parcels are ready to despatch.<br />Generates the required paperwork
        to despatch your parcels. <br />One or more manifests, including the base
        64 encoded PDF and manifest number will be returned.<br />            <br
        />*Note: All average weight shipments are ignored and need to be closed out
        via Shipment Processing*'
      operationId: Manifests_CreateByCarrier
      parameters:
      - name: request
        in: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/ManifestCarrierCodesRequest'
      responses:
        200:
          description: The manifest(s) have created successfully
          schema:
            $ref: '#/definitions/ManifestResponse'
          examples:
            application/json:
              PostingLocation: "123456789"
              Manifests:
              - ManifestNumber: INT1810000003
                ManifestImage: JVBERi0xLjQKJdP0zOEKMSAwIG ... yDy51RYblaQeRyJybTcNlVe37Y
                CarrierCode: RMG
                ServiceCode: TPLN
                TotalWeight: "5.342"
                TotalPackages: "14"
              - ManifestNumber: INT1810000004
                ManifestImage: JVBERi0xLjQKJdP0zOEKMSAwIG ... yDy51RYblaQeRyJybTcNlVe37Y
                CarrierCode: RMG
                ServiceCode: Mixed
                TotalWeight: "8.342"
                TotalPackages: "32"
              HttpStatusCode: "200"
              HttpStatusDescription: OK
              Message: Shipments manifested successfully
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ManifestResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Shipments manifested successfully</Message>\r\n  <PostingLocation>0123456789</PostingLocation>\r\n
              \ <Manifests>\r\n    <Manifest>\r\n      <ManifestNumber>INT1810000003</ManifestNumber>\r\n
              \     <ManifestImage>JVBERi0xLjQKJdP0zOEKMSAwIG ... yDy51RYblaQeRyJybTcNlVe37Y</ManifestImage>\r\n
              \     <CarrierCode>RMG</CarrierCode>\r\n      <ServiceCode>TPLN</ServiceCode>\r\n
              \     <TotalWeight>5.342</TotalWeight>\r\n      <TotalPackages>14</TotalPackages>\r\n
              \   </Manifest>\r\n    <Manifest>\r\n      <ManifestNumber>INT1810000004</ManifestNumber>\r\n
              \     <ManifestImage>JVBERi0xLjQKJdP0zOEKMSAwIG ... yDy51RYblaQeRyJybTcNlVe37Y</ManifestImage>\r\n
              \     <CarrierCode>RMG</CarrierCode>\r\n      <ServiceCode>Mixed</ServiceCode>\r\n
              \     <TotalWeight>8.342</TotalWeight>\r\n      <TotalPackages>32</TotalPackages>\r\n
              \   </Manifest>\r\n  </Manifests>\r\n</ManifestResponse>"
        400:
          description: Bad Request - the posting location is required or invalid,
            there are no shipments to manifest or the carrier codes are invalid. Details
            are provided in the error messages.
          schema:
            $ref: '#/definitions/ManifestResponse'
          examples:
            application/json:
              PostingLocation: "123456789"
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: The request is invalid.
              Errors:
              - Message: There are no shipments ready to manifest
                Cause: PostingLocation
                ErrorCode: E1434
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ManifestResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>The request is invalid.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n
              \     <Message>There are no shipments ready to manifest</Message>\r\n
              \     <Cause>PostingLocation</Cause>\r\n      <ErrorCode>E1434</ErrorCode>\r\n
              \   </ErrorDetail>\r\n  </Errors>\r\n  <PostingLocation>0123456789</PostingLocation>\r\n</ManifestResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /manifests/byservice:
    post:
      tags:
      - Manifests
      summary: Manifest by Service Code(s)
      description: 'Manifest shipments created with the given service codes that are
        ready to manifest for a single Posting Location.<br />            <br />Required
        to confirm parcels are ready to despatch.<br />Generates the required paperwork
        to despatch your parcels. <br />One or more manifests, including the base
        64 encoded PDF and manifest number will be returned.<br />            <br
        />*Note: All average weight shipments are ignored and need to be closed out
        via Shipment Processing*'
      operationId: Manifests_CreateByService
      parameters:
      - name: request
        in: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/ManifestServiceCodesRequest'
      responses:
        200:
          description: The manifest(s) have created successfully
          schema:
            $ref: '#/definitions/ManifestResponse'
          examples:
            application/json:
              PostingLocation: "123456789"
              Manifests:
              - ManifestNumber: INT1810000003
                ManifestImage: JVBERi0xLjQKJdP0zOEKMSAwIG ... yDy51RYblaQeRyJybTcNlVe37Y
                CarrierCode: RMG
                ServiceCode: TPLN
                TotalWeight: 5.342000
                TotalPackages: 14
              - ManifestNumber: INT1810000004
                ManifestImage: JVBERi0xLjQKJdP0zOEKMSAwIG ... yDy51RYblaQeRyJybTcNlVe37Y
                CarrierCode: RMG
                ServiceCode: Mixed
                TotalWeight: 8.342000
                TotalPackages: 32
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Shipments manifested successfully
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ManifestResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Shipments manifested successfully</Message>\r\n  <PostingLocation>0123456789</PostingLocation>\r\n
              \ <Manifests>\r\n    <Manifest>\r\n      <ManifestNumber>INT1810000003</ManifestNumber>\r\n
              \     <ManifestImage>JVBERi0xLjQKJdP0zOEKMSAwIG ... yDy51RYblaQeRyJybTcNlVe37Y</ManifestImage>\r\n
              \     <CarrierCode>RMG</CarrierCode>\r\n      <ServiceCode>TPLN</ServiceCode>\r\n
              \     <TotalWeight>5.342</TotalWeight>\r\n      <TotalPackages>14</TotalPackages>\r\n
              \   </Manifest>\r\n    <Manifest>\r\n      <ManifestNumber>INT1810000004</ManifestNumber>\r\n
              \     <ManifestImage>JVBERi0xLjQKJdP0zOEKMSAwIG ... yDy51RYblaQeRyJybTcNlVe37Y</ManifestImage>\r\n
              \     <CarrierCode>RMG</CarrierCode>\r\n      <ServiceCode>Mixed</ServiceCode>\r\n
              \     <TotalWeight>8.342</TotalWeight>\r\n      <TotalPackages>32</TotalPackages>\r\n
              \   </Manifest>\r\n  </Manifests>\r\n</ManifestResponse>"
        400:
          description: Bad Request - the posting location is required or invalid,
            there are no shipments to manifest or the service codes are invalid. Details
            are provided in the error messages.
          schema:
            $ref: '#/definitions/ManifestResponse'
          examples:
            application/json:
              PostingLocation: "123456789"
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: The request is invalid.
              Errors:
              - Message: There are no shipments ready to manifest
                Cause: PostingLocation
                ErrorCode: E1434
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ManifestResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>The request is invalid.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n
              \     <Message>There are no shipments ready to manifest</Message>\r\n
              \     <Cause>PostingLocation</Cause>\r\n      <ErrorCode>E1434</ErrorCode>\r\n
              \   </ErrorDetail>\r\n  </Errors>\r\n  <PostingLocation>0123456789</PostingLocation>\r\n</ManifestResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /addresses:
    get:
      tags:
      - Addresses
      summary: Get Addresses
      description: Get all of your stored addresses
      operationId: Addresses_GetAll
      responses:
        200:
          description: All existing addresses are returned
          schema:
            type: array
            items:
              $ref: '#/definitions/Address'
          examples:
            application/json:
            - AddressId: GBAD453RD1030
              IsReturnAddress: false
              ContactName: John Smith
              AddressLine1: Brown Cottage
              AddressLine2: 15-30 Maple Tree Avenue
              Town: Redhill Moores
              CountryCode: GB
              Postcode: AD45 3RD
              EmailAddress: john@exampleemail.com
            - AddressId: 5377feaf-87fe-4c6c-b16e-98e4ef4e8745
              IsReturnAddress: true
              ContactName: Returns Hub
              AddressLine1: 18 Container Road
              Town: Stanhill Stores
              CountryCode: GB
              Postcode: KT18 9PB
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ArrayOfAddress
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <Address>\r\n    <AddressId>GBAD453RD1030</AddressId>\r\n    <IsReturnAddress>false</IsReturnAddress>\r\n
              \   <ContactName>John Smith</ContactName>\r\n    <AddressLine1>Brown
              Cottage</AddressLine1>\r\n    <AddressLine2>15-30 Maple Tree Avenue</AddressLine2>\r\n
              \   <Town>Redhill Moores</Town>\r\n    <CountryCode>GB</CountryCode>\r\n
              \   <Postcode>AD45 3RD</Postcode>\r\n    <EmailAddress>john@exampleemail.com</EmailAddress>\r\n
              \ </Address>\r\n  <Address>\r\n    <AddressId>5377feaf-87fe-4c6c-b16e-98e4ef4e8745</AddressId>\r\n
              \   <IsReturnAddress>true</IsReturnAddress>\r\n    <ContactName>Returns
              Hub</ContactName>\r\n    <AddressLine1>18 Container Road</AddressLine1>\r\n
              \   <Town>Stanhill Stores</Town>\r\n    <CountryCode>GB</CountryCode>\r\n
              \   <Postcode>KT18 9PB</Postcode>\r\n  </Address>\r\n</ArrayOfAddress>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes: []
      produces:
      - application/xml
      - application/json
    post:
      tags:
      - Addresses
      summary: Create Address
      description: Add a new address to your address book that you can then use in
        your shipment requests.
      operationId: Addresses_Create
      parameters:
      - name: address
        in: body
        description: The address.
        required: true
        schema:
          $ref: '#/definitions/Address'
      responses:
        200:
          description: The address was created successfully
          schema:
            $ref: '#/definitions/AddressResponse'
          examples:
            application/json:
              AddressId: GBAD453RD1030
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Address created
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<AddressResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Address created</Message>\r\n  <AddressId>GBAD453RD1030</AddressId>\r\n</AddressResponse>"
        400:
          description: Bad Request - the address is invalid.  Details are provided
            in the error messages.
          schema:
            $ref: '#/definitions/AddressResponse'
          examples:
            application/json:
              AddressId: GBAD453RD1030
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: The address is invalid.
              Errors:
              - Message: The town for an address is required.
                Cause: Town
                ErrorCode: E1432
              - Message: The second line of the address must be 35 characters or less.
                Cause: AddressLine2
                ErrorCode: E1433
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<AddressResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>The address is invalid.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n
              \     <Message>The town for an address is required.</Message>\r\n      <Cause>Town</Cause>\r\n
              \     <ErrorCode>E1432</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The second line of the address must be 35 characters
              or less.</Message>\r\n      <Cause>AddressLine2</Cause>\r\n      <ErrorCode>E1433</ErrorCode>\r\n
              \   </ErrorDetail>\r\n  </Errors>\r\n  <AddressId>GBAD453RD1030</AddressId>\r\n</AddressResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /addresses/{addressId}:
    get:
      tags:
      - Addresses
      summary: Get Address
      description: Get the address specified by your unique Address ID.
      operationId: Addresses_Get
      consumes: []
      parameters:
      - name: addressId
        in: path
        description: Your unique Address ID.
        required: true
        type: string
      responses:
        200:
          description: The address is found and returned successfully
          schema:
            $ref: '#/definitions/Address'
          examples:
            application/json:
              AddressId: GBAD453RD1030
              IsReturnAddress: false
              ContactName: John Smith
              AddressLine1: Brown Cottage
              AddressLine2: 15-30 Maple Tree Avenue
              Town: Redhill Moores
              CountryCode: GB
              Postcode: AD45 3RD
              EmailAddress: john@exampleemail.com
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Address
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <AddressId>GBAD453RD1030</AddressId>\r\n  <IsReturnAddress>false</IsReturnAddress>\r\n
              \ <ContactName>John Smith</ContactName>\r\n  <AddressLine1>Brown Cottage</AddressLine1>\r\n
              \ <AddressLine2>15-30 Maple Tree Avenue</AddressLine2>\r\n  <Town>Redhill
              Moores</Town>\r\n  <CountryCode>GB</CountryCode>\r\n  <Postcode>AD45
              3RD</Postcode>\r\n  <EmailAddress>john@exampleemail.com</EmailAddress>\r\n</Address>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: Address not found
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      produces:
      - application/xml
      - application/json
    put:
      tags:
      - Addresses
      summary: Update address
      description: Update an address that is already in your address book with new
        details. The whole address will be replaced with<br />new details.
      operationId: Addresses_Update
      parameters:
      - name: addressId
        in: path
        description: Your unique Address ID of the address to update.
        required: true
        type: string
      - name: address
        in: body
        description: The address with the updated details.
        required: true
        schema:
          $ref: '#/definitions/Address'
      responses:
        200:
          description: The address was updated successfully
          schema:
            $ref: '#/definitions/AddressResponse'
          examples:
            application/json:
              AddressId: GBAD453RD1030
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Address updated
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<AddressResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Address updated</Message>\r\n  <AddressId>GBAD453RD1030</AddressId>\r\n</AddressResponse>"
        400:
          description: Bad Request - the address is invalid.  Details are provided
            in the error messages.
          schema:
            $ref: '#/definitions/AddressResponse'
          examples:
            application/json:
              AddressId: GBAD453RD1030
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: The address is invalid.
              Errors:
              - Message: The town for an address is required.
                Cause: Town
                ErrorCode: E1432
              - Message: The second line of the address must be 35 characters or less.
                Cause: AddressLine2
                ErrorCode: E1433
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<AddressResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>The address is invalid.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n
              \     <Message>The town for an address is required.</Message>\r\n      <Cause>Town</Cause>\r\n
              \     <ErrorCode>E1432</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The second line of the address must be 35 characters
              or less.</Message>\r\n      <Cause>AddressLine2</Cause>\r\n      <ErrorCode>E1433</ErrorCode>\r\n
              \   </ErrorDetail>\r\n  </Errors>\r\n  <AddressId>GBAD453RD1030</AddressId>\r\n</AddressResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: Address not found
          schema:
            $ref: '#/definitions/AddressResponse'
          examples:
            application/json:
              AddressId: GBAD453RD1030
              HttpStatusCode: 404
              HttpStatusDescription: NotFound
              Message: The address was not found. Please check the AddressId is correct.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<AddressResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>404</HttpStatusCode>\r\n  <HttpStatusDescription>NotFound</HttpStatusDescription>\r\n
              \ <Message>The address was not found. Please check the AddressId is
              correct.</Message>\r\n  <AddressId>GBAD453RD1030</AddressId>\r\n</AddressResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
    delete:
      tags:
      - Addresses
      summary: Delete Address
      description: Deletes the specified address.
      operationId: Addresses_Delete
      consumes: []
      parameters:
      - name: addressId
        in: path
        description: Your unique Address ID of the address to delete.
        required: true
        type: string
      responses:
        200:
          description: The address was deleted successfully
          schema:
            $ref: '#/definitions/AddressResponse'
          examples:
            application/json:
              AddressId: GBAD453RD1030
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Address deleted
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<AddressResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Address deleted</Message>\r\n  <AddressId>GBAD453RD1030</AddressId>\r\n</AddressResponse>"
        400:
          description: Unable to delete the address
          schema:
            $ref: '#/definitions/AddressResponse'
          examples:
            application/json:
              AddressId: GBAD453RD1030
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: Unable to delete the address.
              Errors:
              - Message: Unable to delete the address as it is being used as a default
                  return address in label options.
                Cause: Address being used
                ErrorCode: E1434
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<AddressResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>Unable to delete the address.</Message>\r\n  <Errors>\r\n
              \   <ErrorDetail>\r\n      <Message>Unable to delete the address as
              it is being used as a default return address in label options.</Message>\r\n
              \     <Cause>Address being used</Cause>\r\n      <ErrorCode>E1434</ErrorCode>\r\n
              \   </ErrorDetail>\r\n  </Errors>\r\n  <AddressId>GBAD453RD1030</AddressId>\r\n</AddressResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: Address not found
          schema:
            $ref: '#/definitions/AddressResponse'
          examples:
            application/json:
              AddressId: GBAD453RD1030
              HttpStatusCode: 404
              HttpStatusDescription: NotFound
              Message: The address was not found. Please check the AddressId is correct.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<AddressResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>404</HttpStatusCode>\r\n  <HttpStatusDescription>NotFound</HttpStatusDescription>\r\n
              \ <Message>The address was not found. Please check the AddressId is
              correct.</Message>\r\n  <AddressId>GBAD453RD1030</AddressId>\r\n</AddressResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /token:
    post:
      tags:
      - Token
      summary: Authenticates a User and provides token.
      description: Provides security token.
      operationId: Authenticate_Post
      responses:
        200:
          description: Token is created.
          examples:
            application/json:
              token: eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NDc2NTE4NzUsImlhdCI6MTU0NzYzNzQ3NSwicGFzc3dvcmQiOiJodmZrTi9xbHAvemhYUjNjdWVycTZqZDJaN2c9In0.gKwLgSNxF5X1l5R2VkYRO42xjOmxvoPyslohY74q64
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<token>\r\neyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NDc2NTE4NzUsImlhdCI6MTU0NzYzNzQ3NSwicGFzc3dvcmQiOiJodmZrTi9xbHAvemhYUjNjdWVycTZqZDJaN2c9In0.gKwLgSNxF5X1l5R2VkYRO42xjOmxvoPyslohY74q64\r\n</token>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Invalid or expired token.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Invalid
              or expired token.</moreInformation>\r\n </ErrorResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      security:
      - clientID: []
        clientSecret: []
      parameters:
      - $ref: '#/parameters/X-RMG-Security-Username'
      - $ref: '#/parameters/X-RMG-Security-Password'
      produces:
      - application/xml
      - application/json
  /items:
    get:
      tags:
      - Items
      summary: Get Items
      description: Get all of your stored items
      operationId: Items_GetAll
      consumes: []
      responses:
        200:
          description: All existing items are returned
          schema:
            type: array
            items:
              $ref: '#/definitions/Item'
          examples:
            application/json:
            - ItemId: GBAD453RD1030
              Description: White Tee-shirt Large
              Value: 19.990000
              Currency: GBP
              Weight: 0.129000
              WeightUnitOfMeasure: KG
              HsCode: "123546215487"
              SkuCode: TEEWHLG
              CountryOfOrigin: IT
            - ItemId: GBAD453RD1031
              Description: Oak Chest
              Value: 139.990000
              Currency: GBP
              Weight: 1.200000
              WeightUnitOfMeasure: KG
              HsCode: "201245"
              SkuCode: CHEST-OAK
              CountryOfOrigin: DE
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ArrayOfItem
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <Item>\r\n    <HsCode>123546215487</HsCode>\r\n    <SkuCode>TEEWHLG</SkuCode>\r\n
              \   <CountryOfOrigin>IT</CountryOfOrigin>\r\n    <ItemId>GBAD453RD1030</ItemId>\r\n
              \   <Description>White Tee-shirt Large</Description>\r\n    <Value>19.99</Value>\r\n
              \   <Currency>GBP</Currency>\r\n    <Weight>0.129</Weight>\r\n    <WeightUnitOfMeasure>KG</WeightUnitOfMeasure>\r\n
              \ </Item>\r\n  <Item>\r\n    <HsCode>201245</HsCode>\r\n    <SkuCode>CHEST-OAK</SkuCode>\r\n
              \   <CountryOfOrigin>DE</CountryOfOrigin>\r\n    <ItemId>GBAD453RD1031</ItemId>\r\n
              \   <Description>Oak Chest</Description>\r\n    <Value>139.99</Value>\r\n
              \   <Currency>GBP</Currency>\r\n    <Weight>1.2</Weight>\r\n    <WeightUnitOfMeasure>KG</WeightUnitOfMeasure>\r\n
              \ </Item>\r\n</ArrayOfItem>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      produces:
      - application/xml
      - application/json
    post:
      tags:
      - Items
      summary: Create Item
      description: Add a new item to your stored items that you can then use in your
        shipment requests.
      operationId: Items_Create
      parameters:
      - name: item
        in: body
        description: The item.
        required: true
        schema:
          $ref: '#/definitions/Item'
      responses:
        200:
          description: The item was created successfully
          schema:
            $ref: '#/definitions/ItemResponse'
          examples:
            application/json:
              ItemId: AB1223454
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Item created
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ItemResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Item created</Message>\r\n  <ItemId>AB1223454</ItemId>\r\n</ItemResponse>"
        400:
          description: Bad Request - the request is invalid. Details are provided
            in the error messages.
          schema:
            $ref: '#/definitions/ItemResponse'
          examples:
            application/json:
              ItemId: AB1223454
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: The item is invalid.
              Errors:
              - Message: The currency code GBR is invalid
                Cause: Currency
                ErrorCode: E1433
              - Message: The description is required
                Cause: Description
                ErrorCode: E1432
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ItemResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>The item is invalid.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n
              \     <Message>The currency code GBR is invalid</Message>\r\n      <Cause>Currency</Cause>\r\n
              \     <ErrorCode>E1433</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The description is required</Message>\r\n      <Cause>Description</Cause>\r\n
              \     <ErrorCode>E1432</ErrorCode>\r\n    </ErrorDetail>\r\n  </Errors>\r\n
              \ <ItemId>AB1223454</ItemId>\r\n</ItemResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /items/{itemId}:
    get:
      tags:
      - Items
      summary: Get Item
      description: Get the item specified by your unique Item ID.
      operationId: Items_Get
      parameters:
      - name: itemId
        in: path
        description: Your unique Item ID.
        required: true
        type: string
      responses:
        200:
          description: The item is found and returned successfully
          schema:
            $ref: '#/definitions/Item'
          examples:
            application/json:
              ItemId: GBAD453RD1030
              Description: White Tee-shirt Large
              Value: 19.990000
              Currency: GBP
              Weight: 0.129000
              WeightUnitOfMeasure: KG
              HsCode: "123546215487"
              SkuCode: TEEWHLG
              CountryOfOrigin: IT
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Item
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HsCode>123546215487</HsCode>\r\n  <SkuCode>TEEWHLG</SkuCode>\r\n
              \ <CountryOfOrigin>IT</CountryOfOrigin>\r\n  <ItemId>GBAD453RD1030</ItemId>\r\n
              \ <Description>White Tee-shirt Large</Description>\r\n  <Value>19.99</Value>\r\n
              \ <Currency>GBP</Currency>\r\n  <Weight>0.129</Weight>\r\n  <WeightUnitOfMeasure>KG</WeightUnitOfMeasure>\r\n</Item>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: Item not found
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes: []
      produces:
      - application/xml
      - application/json
    put:
      tags:
      - Items
      summary: Update item
      description: Update an item that is already stored with new details. The whole
        item will be replaced with new details.
      operationId: Items_Update
      parameters:
      - name: itemId
        in: path
        description: Your unique Item ID of the item to update.
        required: true
        type: string
      - name: item
        in: body
        description: The item with the updated details.
        required: true
        schema:
          $ref: '#/definitions/Item'
      responses:
        200:
          description: The item was updated successfully
          schema:
            $ref: '#/definitions/ItemResponse'
          examples:
            application/json:
              ItemId: AB1223454
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Item updated
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ItemResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Item updated</Message>\r\n  <ItemId>AB1223454</ItemId>\r\n</ItemResponse>"
        400:
          description: Bad Request - the request is invalid. Details are provided
            in the error messages.
          schema:
            $ref: '#/definitions/ItemResponse'
          examples:
            application/json:
              ItemId: AB1223454
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: The item is invalid.
              Errors:
              - Message: The currency code GBR is invalid
                Cause: Currency
                ErrorCode: E1433
              - Message: The description is required
                Cause: Description
                ErrorCode: E1432
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ItemResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>The item is invalid.</Message>\r\n  <Errors>\r\n    <ErrorDetail>\r\n
              \     <Message>The currency code GBR is invalid</Message>\r\n      <Cause>Currency</Cause>\r\n
              \     <ErrorCode>E1433</ErrorCode>\r\n    </ErrorDetail>\r\n    <ErrorDetail>\r\n
              \     <Message>The description is required</Message>\r\n      <Cause>Description</Cause>\r\n
              \     <ErrorCode>E1432</ErrorCode>\r\n    </ErrorDetail>\r\n  </Errors>\r\n
              \ <ItemId>AB1223454</ItemId>\r\n</ItemResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: Item not found
          examples:
            application/json:
              ItemId: GBAD453RD1030
              HttpStatusCode: 404
              HttpStatusDescription: NotFound
              Message: The item was not found. Please check the ItemId is correct.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ItemResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>404</HttpStatusCode>\r\n  <HttpStatusDescription>NotFound</HttpStatusDescription>\r\n
              \ <Message>The item was not found. Please check the ItemId is correct.</Message>\r\n
              \ <ItemId>GBAD453RD1030</ItemId>\r\n</ItemResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    delete:
      tags:
      - Items
      summary: Delete Item
      description: Deletes the specified item.
      operationId: Items_Delete
      parameters:
      - name: itemId
        in: path
        description: Your unique Item ID of the item to delete.
        required: true
        type: string
      responses:
        200:
          description: The item was deleted successfully
          schema:
            $ref: '#/definitions/ItemResponse'
          examples:
            application/json:
              ItemId: GBAD453RD1030
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Item deleted
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ItemResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Item deleted</Message>\r\n  <ItemId>GBAD453RD1030</ItemId>\r\n</ItemResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: Item not found
          examples:
            application/json:
              ItemId: GBAD453RD1030
              HttpStatusCode: 404
              HttpStatusDescription: NotFound
              Message: The item was not found. Please check the ItemId is correct.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ItemResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>404</HttpStatusCode>\r\n  <HttpStatusDescription>NotFound</HttpStatusDescription>\r\n
              \ <Message>The item was not found. Please check the ItemId is correct.</Message>\r\n
              \ <ItemId>GBAD453RD1030</ItemId>\r\n</ItemResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes: []
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /packaging:
    get:
      tags:
      - Packaging
      summary: Get All Packaging
      description: Get all of your stored packaging details
      operationId: Packaging_GetAll
      consumes: []
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Packaging'
          examples:
            application/json:
            - PackagingId: GBAD453RD1030
              Name: Box - Small
              Weight: 0.013000
              WeightUnitOfMeasure: KG
              Length: 5
              Width: 5
              Height: 2.500000
            - PackagingId: GBAD453RD1031
              Name: Box - Medium
              Weight: 0.025000
              WeightUnitOfMeasure: KG
              Length: 10.200000
              Width: 15.200000
              Height: 5.500000
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ArrayOfPackaging
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <Packaging>\r\n    <PackagingId>GBAD453RD1030</PackagingId>\r\n    <Name>Box
              - Small</Name>\r\n    <Weight>0.013</Weight>\r\n    <WeightUnitOfMeasure>KG</WeightUnitOfMeasure>\r\n
              \   <Length>5</Length>\r\n    <Width>5</Width>\r\n    <Height>2.5</Height>\r\n
              \ </Packaging>\r\n  <Packaging>\r\n    <PackagingId>GBAD453RD1031</PackagingId>\r\n
              \   <Name>Box - Medium</Name>\r\n    <Weight>0.025</Weight>\r\n    <WeightUnitOfMeasure>KG</WeightUnitOfMeasure>\r\n
              \   <Length>10.2</Length>\r\n    <Width>15.2</Width>\r\n    <Height>5.5</Height>\r\n
              \ </Packaging>\r\n</ArrayOfPackaging>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      produces:
      - application/xml
      - application/json
    post:
      tags:
      - Packaging
      summary: Create Packaging
      description: Add new packaging to your stored packaging details that you can
        then use in your shipment requests.
      operationId: Packaging_Create
      parameters:
      - name: packaging
        in: body
        description: The packaging details.
        required: true
        schema:
          $ref: '#/definitions/Packaging'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PackagingResponse'
          examples:
            application/json:
              PackagingId: AB1223454
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Packaging details created
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PackagingResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Packaging details created</Message>\r\n  <PackagingId>AB1223454</PackagingId>\r\n</PackagingResponse>"
        400:
          description: Bad Request - the packaging details are invalid. Details are
            provided in the error messages.
          schema:
            $ref: '#/definitions/PackagingResponse'
          examples:
            application/json:
              PackagingId: AB1223454
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: The packaging details are invalid.
              Errors:
              - Message: The package length must be between 0.01cm to 250cm
                Cause: Length
                ErrorCode: E1433
              - Message: The packaging name is required
                Cause: Name
                ErrorCode: E1432
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PackagingResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>The packaging details are invalid.</Message>\r\n  <Errors>\r\n
              \   <ErrorDetail>\r\n      <Message>The package length must be between
              0.01cm to 250cm</Message>\r\n      <Cause>Length</Cause>\r\n      <ErrorCode>E1433</ErrorCode>\r\n
              \   </ErrorDetail>\r\n    <ErrorDetail>\r\n      <Message>The packaging
              name is required</Message>\r\n      <Cause>Name</Cause>\r\n      <ErrorCode>E1432</ErrorCode>\r\n
              \   </ErrorDetail>\r\n  </Errors>\r\n  <PackagingId>AB1223454</PackagingId>\r\n</PackagingResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
  /packaging/{packagingId}:
    get:
      tags:
      - Packaging
      summary: Get Packaging
      description: Get the packaging details specified by your unique Packaging ID.
      operationId: Packaging_Get
      consumes: []
      parameters:
      - name: packagingId
        in: path
        description: Your Unique Packaging ID.
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Packaging'
          examples:
            application/json:
              PackagingId: GBAD453RD1030
              Name: Box - Small
              Weight: 0.013000
              WeightUnitOfMeasure: KG
              Length: 5
              Width: 5
              Height: 2.500000
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Packaging
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <PackagingId>GBAD453RD1030</PackagingId>\r\n  <Name>Box - Small</Name>\r\n
              \ <Weight>0.013</Weight>\r\n  <WeightUnitOfMeasure>KG</WeightUnitOfMeasure>\r\n
              \ <Length>5</Length>\r\n  <Width>5</Width>\r\n  <Height>2.5</Height>\r\n</Packaging>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: Packaging details not found
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      produces:
      - application/xml
      - application/json
    put:
      tags:
      - Packaging
      summary: Update packaging
      description: Update packaging details that is already stored with new details.
        All details will be replaced with new details.
      operationId: Packaging_Update
      parameters:
      - name: packagingId
        in: path
        description: Your unique Packaging ID of the packaging details to update.
        required: true
        type: string
      - name: packaging
        in: body
        description: The packaging with the updated details.
        required: true
        schema:
          $ref: '#/definitions/Packaging'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PackagingResponse'
          examples:
            application/json:
              PackagingId: AB1223454
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Packaging details updated
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PackagingResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Packaging details updated</Message>\r\n  <PackagingId>AB1223454</PackagingId>\r\n</PackagingResponse>"
        400:
          description: Bad Request - The packaging details are invalid. Details are
            provided in the error messages.
          schema:
            $ref: '#/definitions/PackagingResponse'
          examples:
            application/json:
              PackagingId: AB1223454
              HttpStatusCode: 400
              HttpStatusDescription: BadRequest
              Message: The packaging details are invalid.
              Errors:
              - Message: The package length must be between 0.01cm to 250cm
                Cause: Length
                ErrorCode: E1433
              - Message: The packaging name is required
                Cause: Name
                ErrorCode: E1432
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PackagingResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>400</HttpStatusCode>\r\n  <HttpStatusDescription>BadRequest</HttpStatusDescription>\r\n
              \ <Message>The packaging details are invalid.</Message>\r\n  <Errors>\r\n
              \   <ErrorDetail>\r\n      <Message>The package length must be between
              0.01cm to 250cm</Message>\r\n      <Cause>Length</Cause>\r\n      <ErrorCode>E1433</ErrorCode>\r\n
              \   </ErrorDetail>\r\n    <ErrorDetail>\r\n      <Message>The packaging
              name is required</Message>\r\n      <Cause>Name</Cause>\r\n      <ErrorCode>E1432</ErrorCode>\r\n
              \   </ErrorDetail>\r\n  </Errors>\r\n  <PackagingId>AB1223454</PackagingId>\r\n</PackagingResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: Packaging not found
          examples:
            application/json:
              PackagingId: GBAD453RD1030
              HttpStatusCode: 404
              HttpStatusDescription: NotFound
              Message: The packaging details were not found. Please check the PackagingId
                is correct.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PackagingResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>404</HttpStatusCode>\r\n  <HttpStatusDescription>NotFound</HttpStatusDescription>\r\n
              \ <Message>The packaging details were not found. Please check the PackagingId
              is correct.</Message>\r\n  <PackagingId>GBAD453RD1030</PackagingId>\r\n</PackagingResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      consumes:
      - application/xml
      - application/json
      produces:
      - application/xml
      - application/json
    delete:
      tags:
      - Packaging
      summary: Delete Packaging
      description: Deletes the specified packaging.
      operationId: Packaging_Delete
      consumes: []
      parameters:
      - name: packagingId
        in: path
        description: Your unique Packaging ID of the packaging details to delete.
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PackagingResponse'
          examples:
            application/json:
              PackagingId: GBAD453RD1030
              HttpStatusCode: 200
              HttpStatusDescription: OK
              Message: Packaging details deleted
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PackagingResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>200</HttpStatusCode>\r\n  <HttpStatusDescription>OK</HttpStatusDescription>\r\n
              \ <Message>Packaging details deleted</Message>\r\n  <PackagingId>GBAD453RD1030</PackagingId>\r\n</PackagingResponse>"
        401:
          description: Unauthorized
          examples:
            application/json:
              httpCode: 401
              httpMessage: Unauthorized
              moreInformation: Authentication failure.
            application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<ErrorResponse>\r\n<httpCode>401</httpCode>
              \r\n<httpMessage>Unauthorized</httpMessage> \r\n<moreInformation>Authentication
              failure.</moreInformation>\r\n </ErrorResponse>"
        404:
          description: Packaging not found
          examples:
            application/json:
              PackagingId: GBAD453RD1030
              HttpStatusCode: 404
              HttpStatusDescription: NotFound
              Message: The packaging details were not found. Please check the PackagingId
                is correct.
            application/xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PackagingResponse
              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n
              \ <HttpStatusCode>404</HttpStatusCode>\r\n  <HttpStatusDescription>NotFound</HttpStatusDescription>\r\n
              \ <Message>The packaging details were not found. Please check the PackagingId
              is correct.</Message>\r\n  <PackagingId>GBAD453RD1030</PackagingId>\r\n</PackagingResponse>"
        500:
          description: Internal Server Error
        503:
          description: Service Unavailable
      produces:
      - application/xml
      - application/json
    parameters:
    - $ref: '#/parameters/X-RMG-Auth-Token'
definitions:
  ShipmentHoldRequest:
    description: A request to hold a shipment.
    required:
    - ShipmentId
    - ReasonForHold
    type: object
    properties:
      ShipmentId:
        description: Shipment Id<br />The tracking number or Unique Id of the shipment
          to hold.
        maxLength: 21
        minLength: 13
        type: string
        example: RE012345673GB
      ReasonForHold:
        description: Reason for Hold<br />Must match a Hold Reason set in Pro Shipping
          Maintenance / Hold Reasons.
        maxLength: 30
        type: string
        example: Awaiting part
    xml:
      name: ShipmentHoldRequest
  ShipmentsHoldResponse:
    description: Response from a hold 1 or more shipments request.
    required:
    - HttpStatusCode
    - HttpStatusDescription
    type: object
    properties:
      ShipmentIds:
        description: Shipment Ids<br />Tracking Numbers / Unique Ids of each shipment
          involved in the request.
        maxLength: 21
        minLength: 13
        type: array
        items:
          type: string
          xml:
            name: ShipmentId
        xml:
          name: ShipmentIds
          wrapped: true
        example:
        - RE012345673GB
        - 3A01234561234568AE7C7
      HttpStatusCode:
        format: int32
        description: HTTP Status Code
        type: integer
        example: 200
      HttpStatusDescription:
        description: HTTP Status Description
        type: string
        example: OK
      Message:
        description: Message<br />Successful response may include a success message.<br
          />Failure responses will have general reason as to why. Further details
          may be contained in the list of errors.
        type: string
        example: Your item has been created/updated successfully
      Errors:
        description: Errors<br />Details about why a request failed.
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
        xml:
          name: Errors
          wrapped: true
    xml:
      name: ShipmentsHoldResponse
  ErrorDetail:
    description: Details about an error
    type: object
    properties:
      Message:
        description: Message<br />The error message, or issue.
        type: string
        example: The first line of the address must be 35 characters or less.
      Cause:
        description: Cause<br />The cause of the error.
        type: string
        example: DestinationAddressLine1
      ErrorCode:
        description: Error Code<br />The error code for this error.<br /><br />**E1431**
          - System error<br />**E1432** - Required field<br />**E1433** - Invalid
          field<br />**E1434** - Invalid action<br />**E1435** - Item not found<br
          />
        type: string
        example: E1433
      ErrorId:
        description: Error Log Id<br />The associated Error Log Id if exists.
        type: string
    xml:
      name: ErrorDetail
  ShipmentDeferRequest:
    description: A request to defer a shipment to a later date.
    required:
    - ShipmentId
    - ShipmentDate
    type: object
    properties:
      ShipmentId:
        description: Shipment Id<br />The tracking number or Unique Id of the shipment
          to defer.
        maxLength: 21
        minLength: 13
        type: string
        example: ED521469583GB
      ShipmentDate:
        format: date
        description: Shipment Date<br />Date of despatch â€“ YYYY-MM-DD<br />Cannot
          be in the past. Max 28 days in the future.
        type: string
        example: "2019-01-19"
    xml:
      name: ShipmentDeferRequest
  ShipmentsDeferResponse:
    description: Response from a defer shipments request.
    required:
    - HttpStatusCode
    - HttpStatusDescription
    type: object
    properties:
      ShipmentIds:
        description: Shipment Ids<br />Tracking Numbers / Unique Ids of each shipment
          involved in the request.
        maxLength: 21
        minLength: 13
        type: array
        items:
          type: string
          xml:
            name: ShipmentId
        xml:
          name: ShipmentIds
          wrapped: true
        example:
        - RE012345673GB
        - 3A01234561234568AE7C7
      HttpStatusCode:
        format: int32
        description: HTTP Status Code
        type: integer
        example: 200
      HttpStatusDescription:
        description: HTTP Status Description
        type: string
        example: OK
      Message:
        description: Message<br />Successful response may include a success message.<br
          />Failure responses will have general reason as to why. Further details
          may be contained in the list of errors.
        type: string
        example: Your item has been created/updated successfully
      Errors:
        description: Errors<br />Details about why a request failed.
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
        xml:
          name: Errors
          wrapped: true
    xml:
      name: ShipmentsDeferResponse
  ShipmentCancelRequest:
    description: A request to cancel a shipment.
    required:
    - ShipmentId
    - ReasonForCancellation
    type: object
    properties:
      ShipmentId:
        description: Shipment Id<br />The tracking number or Unique Id of the shipment
          to cancel.
        maxLength: 21
        minLength: 13
        type: string
        example: ED521469583GB
      ReasonForCancellation:
        description: Reason for Cancellation
        enum:
        - OrderCancelled
        - Repacked
        - UploadedInError
        - WrongService
        type: string
    xml:
      name: ShipmentCancelRequest
  ShipmentsCancelResponse:
    description: Response from a cancel shipments request.
    required:
    - HttpStatusCode
    - HttpStatusDescription
    type: object
    properties:
      ShipmentIds:
        description: Shipment Ids<br />Tracking Numbers / Unique Ids of each shipment
          involved in the request.
        maxLength: 21
        minLength: 13
        type: array
        items:
          type: string
          xml:
            name: ShipmentId
        xml:
          name: ShipmentIds
          wrapped: true
        example:
        - RE012345673GB
        - 3A01234561234568AE7C7
      HttpStatusCode:
        format: int32
        description: HTTP Status Code
        type: integer
        example: 200
      HttpStatusDescription:
        description: HTTP Status Description
        type: string
        example: OK
      Message:
        description: Message<br />Successful response may include a success message.<br
          />Failure responses will have general reason as to why. Further details
          may be contained in the list of errors.
        type: string
        example: Your item has been created/updated successfully
      Errors:
        description: Errors<br />Details about why a request failed.
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
        xml:
          name: Errors
          wrapped: true
    xml:
      name: ShipmentsCancelResponse
  ShipmentsReleaseRequest:
    description: Request to release 1 or more shipments from hold.
    type: object
    properties:
      ShipmentIds:
        description: Shipment Ids<br />Tracking Numbers / Unique Ids of each shipment
          to release from hold.
        maxLength: 21
        minLength: 13
        type: array
        items:
          type: string
          xml:
            name: ShipmentId
        xml:
          name: ShipmentIds
          wrapped: true
        example:
        - RE012345673GB
        - 3A01234561234568AE7C7
    xml:
      name: ShipmentsReleaseRequest
  ShipmentsReleaseResponse:
    description: Response from a release 1 or more shipments request.
    required:
    - HttpStatusCode
    - HttpStatusDescription
    type: object
    properties:
      ShipmentIds:
        description: Shipment Ids<br />Tracking Numbers / Unique Ids of each shipment
          involved in the request.
        maxLength: 21
        minLength: 13
        type: array
        items:
          type: string
          xml:
            name: ShipmentId
        xml:
          name: ShipmentIds
          wrapped: true
        example:
        - RE012345673GB
        - 3A01234561234568AE7C7
      HttpStatusCode:
        format: int32
        description: HTTP Status Code
        type: integer
        example: 200
      HttpStatusDescription:
        description: HTTP Status Description
        type: string
        example: OK
      Message:
        description: Message<br />Successful response may include a success message.<br
          />Failure responses will have general reason as to why. Further details
          may be contained in the list of errors.
        type: string
        example: Your item has been created/updated successfully
      Errors:
        description: Errors<br />Details about why a request failed.
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
        xml:
          name: Errors
          wrapped: true
    xml:
      name: ShipmentsReleaseResponse
  PrintLabelRequest:
    description: A request to print a label
    type: object
    properties:
      LabelFormat:
        description: Requested Label Format<br />*DATASTREAM is only available if
          it has been activated on your account.*
        default: PDF
        enum:
        - PDF
        - PNG
        - DATASTREAM
        - ZPL203DPI
        - ZPL300DPI
        type: string
      SilentPrintProfile:
        format: uuid
        description: Silent Print Profile<br />If present, resulting labels will be
          printed using this profile.
        type: string
        example: 75b59db8-3cd3-4578-888e-54be016f07cc
    xml:
      name: PrintLabelRequest
  PrintLabelResponse:
    description: Response from a print label request, containing the label if the
      request was successful.
    required:
    - HttpStatusCode
    - HttpStatusDescription
    type: object
    properties:
      ShipmentId:
        description: Shipment Id<br />Tracking Number or Unique Id of the shipment
          involved.
        maxLength: 21
        minLength: 13
        type: string
        example: 3A01234561234568AE7C7
      LabelImage:
        description: Label Image<br />Depends on Label Image Format<br />            <br
          />**PDF**<br />Base 64 encoded PDF<br />            <br />**PNG**<br />Base
          64 encoded PNG<br />            <br />**ZPL 300 / 203 dpi**<br />Base 64
          encoded PRN (text file)<br />            <br />**Data stream**<br />Not
          Included
        type: string
        example: AxLjUwLjQwMDAtZ2RpIFwod3d3LnBkZnNoY ... XJwLmNvbVwpKQovUHJvZHVjZXIoUERG
      LabelImageFormat:
        description: Label Image Format
        enum:
        - PDF
        - PNG
        - DATASTREAM
        - ZPL203DPI
        - ZPL300DPI
        type: string
      TrackingNumber:
        description: Shipment Tracking Number<br />Final Mile carrier tracking number
        maxLength: 13
        minLength: 13
        type: string
        example: HF123456783GB
      UniqueId:
        description: Unique Shipment ID
        maxLength: 21
        minLength: 21
        type: string
        example: 3A01234561234568AE7C7
      TrackingUrl:
        description: Tracking URL<br />Final Mile Tracking, if available
        maxLength: 250
        type: string
        example: http://carrier.website.com/tracking?number=HF123456783GB
      CarrierCode:
        description: Carrier Code<br />The allocated carrier.
        maxLength: 4
        type: string
        example: RMG
      Primary2DBarcodeImage:
        description: Primary 2D Barcode Image<br />Only populated for Data Stream
          response.<br />Base64 Encoded PNG Image of the 2D data matrix barcode.
        type: string
        example: iVBORw0KGgoAAAANSUhE ... UgAAAGgAAABoAQMAAAAn0ifiAAAA
      Primary2DBarcodeData:
        description: Primary 2D Barcode Data - Base 64 Encoded<br />Only populated
          for Data Stream response.<br />Data required to create your own 2D data
          matrix barcode. Please decode before use.
        type: string
        example: iVBORw0KGgoAAAANSUhE ... UgAAAGgAAABoAQMAAAAn0ifiAAAA
      FormattedUniqueId:
        description: Formatted Unique Id<br />Only populated for Data Stream response.<br
          />Label for 2D data matrix barcode.
        type: string
        example: 3A-070 338 6001-000 0B2 000
      HighVolumeBarcodeData:
        description: High Volume Barcode Data<br />Only populated for Data Stream
          response where the service requires the barcode on the label.<br />Data
          required to create your own High Volume barcode.
        type: string
        example: '*SW115QZ*'
      HighVolumeBarcodeImage:
        description: High Volume Barcode Image<br />Only populated for Data Stream
          response where the service requires the barcode on the label.<br />Base64
          Encoded PNG Image of the High Volume barcode.
        type: string
        example: iVBORw0KGgoAAAANSUhE ... UgAAAGgAAABoAQMAAAAn0ifiAAAA
      HighVolumeSortCode:
        description: High Volume Sort Code<br />Only populated for Data Stream response
          where the service requires the sort code on the label.
        type: string
        example: Q26
      Primary1DBarcodeData:
        description: Primary 1D Barcode Data<br />Only populated for Data Stream response
          where the service requires the barcode on the label.<br />Data required
          to create your own 1D barcode.
        type: string
        example: HF123456783GB
      Primary1DBarcodeImage:
        description: Primary 1D Barcode Image<br />Only populated for Data Stream
          response where the service requires the barcode on the label.<br />Base64
          Encoded PNG Image of the 1D barcode.
        type: string
        example: iVBORw0KGgoAAAANSUhE ... UgAAAGgAAABoAQMAAAAn0ifiAAAA
      ReturnLabelImageFormat:
        description: Return Label Image Format
        enum:
        - PDF
        - PNG
        - ZPL300DPI
        - ZPL203DPI
        type: string
      ReturnLabelImage:
        description: Return Label Image<br />Any return label that have been created
          as a result of the request and label option settings.<br />Depends on ReturnLabelImageFormat.<br
          />            <br />**PDF**<br />Base 64 encoded PDF<br />            <br
          />**PNG**<br />Base 64 encoded PNG<br />            <br />**ZPL 300 / 203
          dpi**<br />Base 64 encoded PRN (text file)
        type: string
        example: AxLjUwLjQwMDAtZ2RpIFwod3d3LnBkZnNoY ... XJwLmNvbVwpKQovUHJvZHVjZXIoUERG
      HttpStatusCode:
        format: int32
        description: HTTP Status Code
        type: integer
        example: 200
      HttpStatusDescription:
        description: HTTP Status Description
        type: string
        example: OK
      Message:
        description: Message<br />Successful response may include a success message.<br
          />Failure responses will have general reason as to why. Further details
          may be contained in the list of errors.
        type: string
        example: Your item has been created/updated successfully
      Errors:
        description: Errors<br />Details about why a request failed.
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
        xml:
          name: Errors
          wrapped: true
    xml:
      name: PrintLabelResponse
  PrintDocumentRequest:
    description: A request to print a document for a shipment
    required:
    - DocumentType
    type: object
    properties:
      DocumentType:
        description: Document Type<br />What document you would like printed<br />            <br
          />**CN23** - Customs Documents PDF 100mm x 150mm<br />**CI** - Commercial
          Invoice PDF A4 Portrait<br />**P** - Proforma PDF A4 Portrait
        enum:
        - CN23
        - CI
        - P
        type: string
      SilentPrintProfile:
        format: uuid
        description: Silent Print Profile<br />If present, resulting documents will
          be printed using this profile.
        type: string
        example: 75b59db8-3cd3-4578-888e-54be016f07cc
    xml:
      name: PrintDocumentRequest
  PrintDocumentResponse:
    description: Response from a print documents request, containing the documents
      if the request was successful.
    required:
    - HttpStatusCode
    - HttpStatusDescription
    type: object
    properties:
      ShipmentId:
        description: Shipment Id<br />Tracking Number or Unique Id of the shipment
          involved.
        maxLength: 21
        minLength: 13
        type: string
        example: 3A01234561234568AE7C7
      DocumentType:
        description: Document Type<br />            <br />**CN23** - Customs Documents
          PDF 100mm x 150mm<br />**CI** - Commercial Invoice PDF A4 Portrait<br />**P**
          - Proforma PDF A4 Portrait
        enum:
        - CN23
        - CI
        - P
        type: string
        example: CN23
      DocumentImage:
        description: Document Image<br />Base 64 encoded PDF
        type: string
        example: AxLjUwLjQwMDAtZ2RpIFwod3d3LnBkZnNoY ... XJwLmNvbVwpKQovUHJvZHVjZXIoUERG
      HttpStatusCode:
        format: int32
        description: HTTP Status Code
        type: integer
        example: 200
      HttpStatusDescription:
        description: HTTP Status Description
        type: string
        example: OK
      Message:
        description: Message<br />Successful response may include a success message.<br
          />Failure responses will have general reason as to why. Further details
          may be contained in the list of errors.
        type: string
        example: Your item has been created/updated successfully
      Errors:
        description: Errors<br />Details about why a request failed.
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
        xml:
          name: Errors
          wrapped: true
    xml:
      name: PrintDocumentResponse
  CreateShipment.Shipment:
    description: Details of a shipment request.
    required:
    - Destination
    - ShipmentInformation
    type: object
    properties:
      Shipper:
        $ref: '#/definitions/Shipper'
        description: The Shipper<br />Who and where the parcel is coming from.<br
          />Optional. If not supplied, the posting location address will be used.
      Destination:
        $ref: '#/definitions/CreateShipment.Destination'
        description: The Destination<br />Who and where the parcel is going to.<br
          />It is the shipperâ€™s responsibility to provide accurate and concise information
          to ensure the best possible delivery experience for the consumer.
      ShipmentInformation:
        $ref: '#/definitions/CreateShipment.ShipmentInformation'
        description: Shipment Information<br />Overall package details and requested
          service information
    xml:
      name: Shipment
  Shipper:
    description: The shipper details for a shipment request.<br />Confirms the details
      of the shipper address and contact details.<br />If not supplied, the the posting
      location address will be used.
    type: object
    properties:
      AddressId:
        description: Shipper Address Id<br />If supplied all shipper address fields
          will be ignored and the address from the Address Book will be used.
        maxLength: 70
        type: string
        example: UNIQUEID123
      ShipperReference:
        description: Shipper Reference<br />Your reference for this shipment.<br />This
          field is used for Returns processing and is usually the shippers order number
          provided to the consumer.
        maxLength: 40
        type: string
        example: REF123456789
      ShipperDepartment:
        description: Shipper Department Code<br />For Royal Mail shipments, this code
          must be a valid 10-digit OBA department code.
        maxLength: 30
        type: string
        example: "123456789"
      CompanyName:
        description: Company Name
        maxLength: 35
        type: string
        example: Company & Co.
      ContactName:
        description: Contact Name
        maxLength: 40
        type: string
        example: Jane Smith
      AddressLine1:
        description: Address Line 1<br />Populate with Shipper's address if provided.
        maxLength: 35
        type: string
        example: Level 5
      AddressLine2:
        description: Address Line 2
        maxLength: 35
        type: string
        example: Hashmoore House
      AddressLine3:
        description: Address Line 3
        maxLength: 35
        type: string
        example: 10 Sky Lane
      Town:
        description: Town<br />Required if address is populated.
        maxLength: 35
        type: string
        example: Leatherhead
      County:
        description: County / State / Province<br />Whether this is required or not
          is dependent on the country settings.
        maxLength: 50
        type: string
        example: Surrey
      CountryCode:
        description: Country Code<br />[ISO Alpha-2 Country Code](https://www.nationsonline.org/oneworld/country_code_list.htm)
          per ISO 3166 Standard.<br />Required if address is populated.<br />Must
          be GB, IM, GG or JE.
        maxLength: 2
        minLength: 2
        type: string
        example: GB
      Postcode:
        description: Postcode / Zip<br />Mandatory for all domestic addresses and
          some international shipments if address is populated.
        maxLength: 10
        type: string
        example: AA34 3AB
      PhoneNumber:
        description: Contact Phone Number<br />Must be a valid phone number.
        maxLength: 20
        type: string
        example: "7723456789"
      EmailAddress:
        description: Contact Email Address<br />Must be a valid email address.
        maxLength: 254
        type: string
        example: email@server.com
      VatNumber:
        description: VAT Number
        maxLength: 20
        type: string
        example: GB123 4567 89
    xml:
      name: Shipper
  CreateShipment.Destination:
    description: The destination address and contact details.<br />It is the shipperâ€™s
      responsibility to provide accurate and concise information to ensure the best
      possible delivery experience for the consumer.
    type: object
    properties:
      AddressId:
        description: Destination Address ID<br />If supplied all destination address
          fields will be ignored and the stored address will be used.<br />*If a Safeplace
          is present in the stored address, the Safeplace enhancement will be used
          if the service allows it, otherwise it will be ignored. ShipmentInformation.ServiceOptions.Safeplace
          overrides the address Safeplace and forces Safeplace to be required enhancement
          of the service.*
        maxLength: 70
        type: string
        example: UNIQUEID123
      CompanyName:
        description: Company Name
        maxLength: 35
        type: string
        example: Company & Co.
      ContactName:
        description: Contact Name<br />Required if Address Id is not provided.
        maxLength: 40
        type: string
        example: Jane Brown
      AddressLine1:
        description: Address Line 1<br />Required if Address Id is not provided.
        maxLength: 35
        type: string
        example: White Horse
      AddressLine2:
        description: Address Line 2<br />*Please ensure the address data is presented
          in line with the destination country formats.*
        maxLength: 35
        type: string
        example: 10 Round Road
      AddressLine3:
        description: Address Line 3<br />*Please ensure the address data is presented
          in line with the destination country formats.*
        maxLength: 35
        type: string
        example: Mitre Peak
      Town:
        description: Town<br />Required if Address Id is not provided.
        maxLength: 35
        type: string
        example: Leatherhead
      County:
        description: County / State / Province<br />Whether this is required or not
          is dependent on the country settings.
        maxLength: 50
        type: string
        example: Surrey
      CountryCode:
        description: Country Code<br />[ISO Alpha-2 Country Code](https://www.nationsonline.org/oneworld/country_code_list.htm)  per
          ISO 3166 Standard.  Required if Address Id is not provided
        maxLength: 2
        minLength: 2
        type: string
        example: GB
      Postcode:
        description: Postcode / Zip<br />Mandatory for all domestic shipments and
          some international shipments if the Address Id is not provided.
        maxLength: 10
        type: string
        example: AB3 5CD
      PhoneNumber:
        description: Contact Phone Number<br />Required if SMS notifications are requested
          (Service Enhancement Code 13 or 16) and Address Id is not provided.<br />Must
          be a valid phone number.
        maxLength: 20
        type: string
        example: "7123456789"
      EmailAddress:
        description: Contact Email Address<br />Required if email notifications are
          requested (Service Enhancement Code 14 or 16) and Address Id is not provided.<br
          />Must be a valid email address.
        maxLength: 254
        type: string
        example: email@example.com
      VatNumber:
        description: VAT Number
        maxLength: 20
        type: string
        example: GB123 4567 89
    xml:
      name: Destination
  CreateShipment.ShipmentInformation:
    description: Shipment Information. Overall package details, item details and requested
      service information in a shipment request.<br /> It is important to ensure accurate
      information is supplied to ensure correct handling by different customs around
      the world.
    required:
    - ShipmentDate
    - ServiceCode
    - TotalPackages
    - TotalWeight
    type: object
    properties:
      ShipmentDate:
        format: date
        description: Shipment Date<br />Date of despatch - YYYY-MM-DD.<br />Cannot
          be in the past. Max 28 days in the future.
        type: string
        example: "2019-01-16"
      ServiceCode:
        description: Service Code<br />Must be a valid system service code OR a customer
          mapped service code.
        maxLength: 10
        type: string
        example: TPLN
      ServiceOptions:
        $ref: '#/definitions/CreateShipment.ServiceOptions'
        description: Service Options<br />Only required if you have more than 1 Royal
          Mail Posting Location.<br />Allows you to add enhancements, specify the
          posting location, change the service level and specify a service format.
      TotalPackages:
        format: int32
        description: Number of Packages<br />The total number of packages.
        maximum: 9
        minimum: 1
        type: integer
        example: 1
      TotalWeight:
        format: double
        description: 'Total Weight<br />The total weight of the shipment including
          packaging. Validated againt package weight.<br />Min weight: 1 gram.     <br
          />*Optional/Overwritten for Average Weight Services - Average Weight Customers
          only.*'
        type: number
        example: 2.200000
      WeightUnitOfMeasure:
        description: Weight Unit of Measure
        default: KG
        enum:
        - KG
        - Grams
        type: string
      Product:
        description: Shipment/Product type being shipped<br />            <br />**DOX**
          - Documents Only<br />**NDX** - All other shipment product types
        default: NDX
        enum:
        - NDX
        - DOX
        type: string
      DescriptionOfGoods:
        description: Description of Goods<br />General description of the goods being
          sent.<br />Required for Non-Document International and BFPO Shipments.<br
          />Ignored for Documents Only shipments.
        maxLength: 70
        type: string
        example: Clothing
      ReasonForExport:
        description: Reason For Export<br />Required for International Shipments and
          BFPO (British Forces Post Office).
        maxLength: 250
        type: string
        example: Sale of goods
      Value:
        format: double
        description: Total Shipment Value<br />Required for Non-Document International
          and BFPO Shipments.<br />Ignored for Documents Only shipments.
        maximum: 100000000
        minimum: 0.010000
        type: number
        example: 39.980000
      Currency:
        description: Currency<br />This currency will be used for all values across
          the shipment request.<br />3 digit ISO Currency Code.<br />Required for
          Non-Document International and BFPO Shipments, or when values are provided.<br
          />Ignored for Documents Only shipments.
        maxLength: 3
        minLength: 3
        type: string
        example: GBP
      LabelFormat:
        description: Requested Label Format<br />*DATASTREAM is only available if
          it has been activated on your account.*<br />Ignored if ShipmentAction set
          to Create or Allocate.
        default: PDF
        enum:
        - PDF
        - PNG
        - DATASTREAM
        - ZPL203DPI
        - ZPL300DPI
        type: string
      SilentPrintProfile:
        format: uuid
        description: Silent Print Profile<br />If present, resulting labels will be
          printed using this profile.
        type: string
        example: 75b59db8-3cd3-4578-888e-54be016f07cc
      ShipmentAction:
        description: Shipment Action<br />            <br />**Process** - Shipment
          created and processed, ready for manifesting. Label and tracking number
          returned.<br />            <br />**Create** - Shipment created as unprocessed,
          ready for scanning. Scanning will create label and tracking number and move
          shipment to processed.<br />            <br />**Allocate** - Shipment created
          as unprocessed with tracking number allocated and returned and label created
          but not returned. Scanning will return label and move shipment to processed.
        default: Process
        enum:
        - Process
        - Allocate
        - Create
        type: string
      Packages:
        description: Shipment Packages<br />The packages in the shipment.<br />Required
          if TotalPackages is more than 1.
        type: array
        items:
          $ref: '#/definitions/CreateShipment.ShipmentPackage'
        xml:
          name: Packages
          wrapped: true
      Items:
        description: Shipment Items<br />The items in the shipment.<br />Required
          for Non-Document International Shipments and BFPO (British Forces Post Office).<br
          />Ignored for Documents Only shipments.
        type: array
        items:
          $ref: '#/definitions/ShipmentItem'
        xml:
          name: Items
          wrapped: true
    xml:
      name: ShipmentInformation
  CreateShipment.ServiceOptions:
    description: The Service Options for a Royal Mail Shipment, used in a shipment
      request.<br />Required if have more than 1 possible Posting Location.
    required:
    - PostingLocation
    type: object
    properties:
      PostingLocation:
        description: Posting Location.<br />Optional if you only have 1 Posting Location.
        maxLength: 10
        minLength: 10
        type: string
        example: "123456789"
      ServiceLevel:
        description: Service Level<br />Valid values are 01-99.<br />Defaults to lowest
          service level if not provided.
        maxLength: 2
        minLength: 2
        type: string
        example: "01"
      ServiceFormat:
        description: Service Format<br />            <br />**L** - Letter<br />**F**
          - Large Letter<br />**P** - Parcel<br />**S** - Printed Papers - International
          Services Only
        enum:
        - L
        - F
        - P
        - S
        type: string
        example: P
      Safeplace:
        description: Safe Place Enhancement<br />Free text to describe a safe place
          to leave the parcel.<br />Returns an error if the service does not allow
          Safeplace.
        maxLength: 30
        type: string
        example: Front Porch
      SaturdayGuaranteed:
        description: Saturday Guaranteed Enhancement<br />Available for Domestic Special
          Delivery Services Only<br />Returns an error if requested and the service
          does not allow it.
        type: boolean
        example: false
      ConsequentialLoss:
        description: Consequential Loss Enhancement<br />Available for Domestic Special
          Delivery Services Only.<br />            <br />**Level1** - Â£1,000<br />**Level2**
          - Â£2,500<br />**Level3** - Â£5,000<br />**Level4** - Â£7,500<br />**Level5**
          - Â£10,000<br />            <br />Returns an error if requested and the service
          does not allow it.
        enum:
        - Level1
        - Level2
        - Level3
        - Level4
        - Level5
        type: string
      LocalCollect:
        description: Local Collect Enhancement<br />Available for Domestic Special
          Delivery and Domestic Tracked services only.<br />Returns an error if requested
          and the service does not allow it.
        type: boolean
        example: false
      TrackingNotifications:
        description: Tracking Notifications Enhancement<br />Available for Domestic
          Special Delivery and Domestic Tracked services only.<br />Returns an error
          if requested and the service does not allow it.
        enum:
        - Email
        - SMS
        - EmailAndSMS
        type: string
      RecordedSignedFor:
        description: Recorded Signed For<br />Available for all Domestic Services
          that are not Special Delivery, Tracked or BFPO.<br />This is an enhancement
          for services that don't have an in-built signature service like Special
          Delivery and Tracked.<br />Returns an error if requested and the service
          does not allow it.
        type: boolean
        example: false
    xml:
      name: ServiceOptions
  CreateShipment.ShipmentPackage:
    description: Details of a package in a shipment request.<br />Enter the dimensions
      and weight of the package in the shipment. Use the PackageOccurance to indicate
      the items within the package.
    required:
    - PackageOccurrence
    - Weight
    type: object
    properties:
      PackageOccurrence:
        format: int32
        description: Package Occurrence<br />Unique package number within this shipment.<br
          />Cannot exceed total number of packages.
        maximum: 9
        minimum: 1
        type: integer
        example: 1
      PackagingId:
        description: Packaging ID<br />If supplied, packaging details will be populated
          from the stored information.
        maxLength: 70
        type: string
        example: UNIQUEID123
      Weight:
        format: double
        description: 'Total Package Weight.<br />            <br />This field will
          be used as the Shipment Weight for single-package services such as RMG.<br
          />The package weight must be greater than or equal to the sum of all item
          weights and packaging, if this information is provided.<br />Min weight:
          1 gram.<br />*Optional/Overwritten for Average Weight Services - Average
          Weight Customers only.*'
        type: number
        example: 2.200000
      Length:
        format: double
        description: Package Length<br />Dimensions are in Centimetres.<br />*Dimensions
          are optional, however supplying accurate information helps ensure a smooth
          delivery experience.*
        maximum: 250
        minimum: 0.010000
        type: number
        example: 15
      Width:
        format: double
        description: Package Width<br />Dimensions are in Centimetres.<br />*Dimensions
          are optional, however supplying accurate information helps ensure a smooth
          delivery experience.*
        maximum: 250
        minimum: 0.010000
        type: number
        example: 15
      Height:
        format: double
        description: Package Height<br />Dimensions are in Centimetres.<br />*Dimensions
          are optional, however supplying accurate information helps ensure a smooth
          delivery experience.*
        maximum: 250
        minimum: 0.010000
        type: number
        example: 5
    xml:
      name: ShipmentPackage
  ShipmentItem:
    description: Details of an item in a shipment request, including what package
      it is in if possible.
    required:
    - Quantity
    type: object
    properties:
      ItemId:
        description: Item ID<br />If supplied all item fields except Item Quantity
          will be populated from the stored item record.
        maxLength: 70
        type: string
        example: UNIQUEID123
      Quantity:
        format: int32
        description: Item Quantity<br />The quantity of items of this type.
        type: integer
        example: 2
      Description:
        description: Item Description<br />Required if an Item Id is not supplied.
        maxLength: 255
        type: string
        example: White Tee-shirt
      Value:
        format: double
        description: Item Value<br />Individual item value (use same currency as shipment
          currency).<br />Required if an Item Id is not supplied.
        maximum: 100000000
        minimum: 0.010000
        type: number
        example: 19.990000
      Weight:
        format: double
        description: Item Weight<br />Individual item weight.
        maximum: 9999.999000
        minimum: 0.001000
        type: number
        example: 0.900000
      PackageOccurrence:
        format: int32
        description: Package Occurrence<br />Optional Package Occurrence used to indicate
          which package the item has been packed into.
        maximum: 9
        minimum: 1
        type: integer
        example: 1
      HsCode:
        description: HS Code<br />The [standardised commodity code](https://www.gov.uk/trade-tariff).
          It must be 6-12 digits only.<br />Used by Customs to calculate potential
          duties / taxes.
        type: string
        example: "652534"
      SkuCode:
        description: SKU Code.<br />Used by Customs to calculate potential duties
          / taxes.
        maxLength: 30
        type: string
        example: SKU3455692
      CountryOfOrigin:
        description: Country of Origin<br />[ISO Alpha-2 Country Code](https://www.nationsonline.org/oneworld/country_code_list.htm)
          of item country of origin, per ISO 3166 Standard
        type: string
        example: CN
      ImageUrl:
        description: Image URL<br />Used to save a link to an image of the item with
          the shipment details, so that this can be used in the Returns<br />system
          for consumers to see an image of the item when selecting items for return.<br
          />URL must be a publicly accessible image.
        maxLength: 1000
        type: string
        example: http://www.myimagestore.com/myimage.jpg
    xml:
      name: ShipmentItem
  ShipmentCreateResponse:
    description: Response from a create shipment request
    required:
    - HttpStatusCode
    - HttpStatusDescription
    type: object
    properties:
      ConsignmentNumber:
        description: Consignment Number<br />Only populated for services that support
          Multi-Packages
        maxLength: 21
        type: string
        example: FD345678932GB
      ConsignmentTrackingUrl:
        description: Consignment Tracking URL<br />Only populated for services that
          support Multi-Packages
        maxLength: 250
        type: string
        example: http://carrier.website.com/tracking?number=FD345678932GB
      Packages:
        description: Packages<br />Details each package tracking information and Unique
          Id.
        type: array
        items:
          $ref: '#/definitions/PackageResponse'
        xml:
          name: Packages
          wrapped: true
      Routing:
        description: Routing information <br/> including Gazetteer code
        $ref: '#/definitions/RoutingResponse'
      LabelImageFormat:
        description: Label Image Format
        enum:
        - PDF
        - PNG
        - DATASTREAM
        - ZPL203DPI
        - ZPL300DPI
        type: string
      LabelImages:
        description: Label Images<br />Any labels that have been created as a result
          of the request.<br />Depends on Label Image Format.<br />            <br
          />**PDF**<br />Base 64 encoded PDF<br />            <br />**PNG**<br />Base
          64 encoded PNG<br />            <br />**ZPL 300 / 203 dpi**<br />Base 64
          encoded PRN (text file)<br />            <br />**Data stream**<br />Not
          Included - see Packages for Data Stream responses
        type: string
        example: AxLjUwLjQwMDAtZ2RpIFwod3d3LnBkZnNoY ... XJwLmNvbVwpKQovUHJvZHVjZXIoUERG
      CustomsDocuments:
        description: Customs Documents<br />Base 64 encoded PDF<br />Any customs documents
          that have been created as a result of the request.
        type: string
        example: AxLjUwLjQwMDAtZ2RpIFwod3d3LnBkZnNoY ... XJwLmNvbVwpKQovUHJvZHVjZXIoUERG
      ReturnLabelImageFormat:
        description: Return Label Image Format
        enum:
        - PDF
        - PNG
        - ZPL300DPI
        - ZPL203DPI
        type: string
      ReturnLabelImages:
        description: Return Label Images<br />Any return labels that have been created
          as a result of the request and label option settings.<br />Depends on ReturnLabelImageFormat.<br
          />            <br />**PDF**<br />Base 64 encoded PDF<br />            <br
          />**PNG**<br />Base 64 encoded PNG<br />            <br />**ZPL 300 / 203
          dpi**<br />Base 64 encoded PRN (text file)
        type: string
        example: AxLjUwLjQwMDAtZ2RpIFwod3d3LnBkZnNoY ... XJwLmNvbVwpKQovUHJvZHVjZXIoUERG
      HttpStatusCode:
        format: int32
        description: HTTP Status Code
        type: integer
        example: 200
      HttpStatusDescription:
        description: HTTP Status Description
        type: string
        example: OK
      Message:
        description: Message<br />Successful response may include a success message.<br
          />Failure responses will have general reason as to why. Further details
          may be contained in the list of errors.
        type: string
        example: Your item has been created/updated successfully
      Errors:
        description: Errors<br />Details about why a request failed.
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
        xml:
          name: Errors
          wrapped: true
    xml:
      name: ShipmentCreateResponse
  RoutingResponse:
    description: Routing information - including Gazetteer code
    type: object
    properties:
      InwardCode:
        format: string
        description: "Inward code - (??) - first component of Gazetteer code"
        example: "D44"
        minimum: 0
        maximum: 32
      OutwardCode:
        format: string
        description: "Outward code - (??) - second component of Gazetteer code"
        example: "Q30"
        minimum: 0
        maximum: 32
      Walk:
        format: string
        description: "??"
        minimum: 0
        maximum: 1024
      Loop:
        format: string
        description: "??"
        minimum: 0
        maximum: 1024
  PackageResponse:
    description: Individual Package Response within a Shipment Response.<br />Every
      successful response will have one of these per package request.
    required:
    - PackageOccurance
    type: object
    properties:
      PackageOccurance:
        format: int32
        description: Package Occurence<br />Unique package number within this shipment
        maximum: 15
        minimum: 1
        type: integer
        example: "1"
      UniqueId:
        description: Unique Shipment ID<br />All shipments are assigned a unique Shipment
          ID.
        maxLength: 21
        minLength: 21
        type: string
        example: 3A01234561234568AE7C7
      TrackingNumber:
        description: Shipment Tracking Number<br />Final Mile carrier tracking number.<br
          />Only populated for services that support tracking numbers.
        maxLength: 13
        minLength: 13
        type: string
        example: HF123456783GB
      TrackingUrl:
        description: Tracking URL<br />Final Mile Tracking, if available.
        maxLength: 250
        type: string
        example: http://carrier.website.com/tracking?number=HF123456783GB
      CarrierCode:
        description: Carrier Code<br />The allocated carrier.
        maxLength: 4
        type: string
        example: RMG
      Primary2DBarcodeImage:
        description: Primary 2D Barcode Image<br />Only populated for Data Stream
          response.<br />Base64 Encoded PNG Image of the 2D data matrix barcode.
        type: string
        example: iVBORw0KGgoAAAANSUhE ... UgAAAGgAAABoAQMAAAAn0ifiAAAA
      Primary2DBarcodeData:
        description: Primary 2D Barcode Data - Base 64 Encoded<br />Only populated
          for Data Stream response.<br />Data required to create your own 2D data
          matrix barcode. Please decode before use.
        type: string
        example: iVBORw0KGgoAAAANSUhE ... UgAAAGgAAABoAQMAAAAn0ifiAAAA
      FormattedUniqueId:
        description: Formatted Unique Id<br />Only populated for Data Stream response.<br
          />Label for 2D data matrix barcode.
        type: string
        example: 3A-070 338 6001-000 0B2 000
      HighVolumeBarcodeData:
        description: High Volume Barcode Data<br />Only populated for Data Stream
          response where the service requires the barcode on the label.<br />Data
          required to create your own High Volume barcode.
        type: string
        example: '*SW115QZ*'
      HighVolumeBarcodeImage:
        description: High Volume Barcode Image<br />Only populated for Data Stream
          response where the service requires the barcode on the label.<br />Base64
          Encoded PNG Image of the High Volume barcode.
        type: string
        example: iVBORw0KGgoAAAANSUhE ... UgAAAGgAAABoAQMAAAAn0ifiAAAA
      HighVolumeSortCode:
        description: High Volume Sort Code<br />Only populated for Data Stream response
          where the service requires the sort code on the label.
        type: string
        example: Q26
      Primary1DBarcodeData:
        description: Primary 1D Barcode Data<br />Only populated for Data Stream response
          where the service requires the barcode on the label.<br />Data required
          to create your own 1D barcode.
        type: string
        example: HF123456783GB
      Primary1DBarcodeImage:
        description: Primary 1D Barcode Image<br />Only populated for Data Stream
          response where the service requires the barcode on the label.<br />Base64
          Encoded PNG Image of the 1D barcode.
        type: string
        example: iVBORw0KGgoAAAANSUhE ... UgAAAGgAAABoAQMAAAAn0ifiAAAA
    xml:
      name: PackageResponse
  ServiceAvailability.Shipment:
    description: Details of a shipment for a service availability check.
    required:
    - Destination
    - ShipmentInformation
    type: object
    properties:
      Destination:
        $ref: '#/definitions/ServiceAvailability.Destination'
        description: The Destination<br />Where the parcel is going to.
      ShipmentInformation:
        $ref: '#/definitions/ServiceAvailability.ShipmentInformation'
        description: Shipment Information<br />Overall package details and requested
          service requirements.
    xml:
      name: Shipment
  ServiceAvailability.Destination:
    description: The Destination<br />Where the parcel is going to.
    type: object
    properties:
      AddressId:
        description: Destination Address ID<br />If supplied all destination address
          fields will be ignored and the stored address will be used.
        maxLength: 70
        type: string
        example: UNIQUEID123
      Town:
        description: Town<br />Required if Address Id is not provided.
        maxLength: 35
        type: string
        example: Leatherhead
      CountryCode:
        description: Country Code<br />[ISO Alpha-2 Country Code](https://www.nationsonline.org/oneworld/country_code_list.htm)  per
          ISO 3166 Standard.  Required if Address Id is not provided
        maxLength: 2
        minLength: 2
        type: string
        example: GB
      Postcode:
        description: Postcode / Zip<br />Mandatory for all domestic destinations and
          some international destinations if the Address Id is not provided.
        maxLength: 10
        type: string
        example: AB3 5CD
    xml:
      name: Destination
  ServiceAvailability.ShipmentInformation:
    description: Shipment Information<br />Overall package details and requested service
      requirements.
    required:
    - TotalPackages
    - TotalWeight
    type: object
    properties:
      ServiceCode:
        description: Service Code<br />Must be a valid system service code OR a customer
          mapped service code.<br />If service code is not supplied a list of all
          available service options will be returned, otherwise only information about
          the service requested will be returned.
        maxLength: 10
        type: string
        example: TPLN
      ServiceOptions:
        $ref: '#/definitions/ServiceAvailability.ServiceOptions'
        description: Service Options<br />Specify any service requirements such as
          format required or enhancements required.
      TotalPackages:
        format: int32
        description: Number of Packages<br />The total number of packages.
        maximum: 9
        minimum: 1
        type: integer
        example: 1
      TotalWeight:
        format: double
        description: 'Total Weight<br />The total weight of the shipment including
          packaging. Validated againt package weight.<br />Min weight: 1 gram.'
        type: number
        example: 2.200000
      WeightUnitOfMeasure:
        description: Weight Unit of Measure
        default: KG
        enum:
        - KG
        - Grams
        type: string
      Product:
        description: Shipment/Product type being shipped<br />            <br />**DOX**
          - Documents Only<br />**NDX** - All other shipment product types
        default: NDX
        enum:
        - NDX
        - DOX
        type: string
      Value:
        format: double
        description: Total Shipment Value<br />Required for Non-Document International
          and BFPO Shipments.<br />Ignored for Documents Only shipments.
        maximum: 100000000
        minimum: 0.010000
        type: number
        example: 39.980000
      Currency:
        description: Currency<br />This currency will be used for all values across
          the shipment request.<br />3 digit ISO Currency Code.<br />Required for
          Non-Document International and BFPO Shipments, or when value is provided.<br
          />Ignored for Documents Only shipments.
        maxLength: 3
        minLength: 3
        type: string
        example: GBP
      Packages:
        description: Shipment Packages<br />The packages in the shipment.<br />Required
          if TotalPackages is more than 1.
        type: array
        items:
          $ref: '#/definitions/ServiceAvailability.ShipmentPackage'
        xml:
          name: Packages
          wrapped: true
    xml:
      name: ShipmentInformation
  ServiceAvailability.ServiceOptions:
    description: Service Options<br />Specify any service requirements such as format
      required or enhancements required.
    type: object
    properties:
      ServiceFormat:
        description: Service Format<br />If provided, only return services that support
          the given service format.<br />            <br />**L** - Letter<br />**F**
          - Large Letter<br />**P** - Parcel<br />**S** - Printed Papers - International
          Services Only
        enum:
        - L
        - F
        - P
        - S
        type: string
        example: P
      Tracked:
        description: Tracked Services<br />If true, only return Tracked Services.
        type: boolean
        example: false
      SignatureRequired:
        description: Signature Required<br />If true, only return services that are
          either with signature or support the Recorded Signed For enhancement.
        type: boolean
        example: false
      Safeplace:
        description: Safe Place Enhancement<br />If true, only return services that
          support the Safe Place enhancement.
        type: boolean
        example: false
      LocalCollect:
        description: Local Collect Enhancement<br />If true, only return services
          that support the Local Collect enhancement.
        type: boolean
        example: false
      SaturdayGuaranteed:
        description: Saturday Guaranteed Enhancement<br />If true, only return services
          that support the Saturday Guaranteed enhancement.
        type: boolean
        example: false
      ConsequentialLoss:
        description: Consequential Loss Enhancement<br />If true, only return services
          that support the Consequential Loss enhancement.
        type: boolean
        example: false
    xml:
      name: ServiceOptions
  ServiceAvailability.ShipmentPackage:
    description: Details of a package in a shipment request.<br />Enter the dimensions
      and weight of the package in the shipment. Use the PackageOccurance to indicate
      the items within the package.
    required:
    - PackageOccurrence
    - Weight
    type: object
    properties:
      PackageOccurrence:
        format: int32
        description: Package Occurrence<br />Unique package number within this shipment.<br
          />Cannot exceed total number of packages.
        maximum: 9
        minimum: 1
        type: integer
        example: 1
      PackagingId:
        description: Packaging ID<br />If supplied, packaging details will be populated
          from the stored information.
        maxLength: 70
        type: string
        example: UNIQUEID123
      Weight:
        format: double
        description: 'Total Package Weight.<br />            <br />This field will
          be used as the Shipment Weight for single-package services such as RMG.<br
          />The package weight must be greater than or equal to the sum of all item
          weights and packaging, if this information is provided.<br />Min weight:
          1 gram.'
        type: number
        example: 2.200000
      Length:
        format: double
        description: Package Length<br />Dimensions are in Centimetres.<br />*Dimensions
          are optional, however supplying accurate information helps ensure a smooth
          delivery experience.*
        maximum: 250
        minimum: 0.010000
        type: number
        example: 15
      Width:
        format: double
        description: Package Width<br />Dimensions are in Centimetres.<br />*Dimensions
          are optional, however supplying accurate information helps ensure a smooth
          delivery experience.*
        maximum: 250
        minimum: 0.010000
        type: number
        example: 15
      Height:
        format: double
        description: Package Height<br />Dimensions are in Centimetres.<br />*Dimensions
          are optional, however supplying accurate information helps ensure a smooth
          delivery experience.*
        maximum: 250
        minimum: 0.010000
        type: number
        example: 5
    xml:
      name: ShipmentPackage
  ServiceAvailabilityResponse:
    description: Response from a Service Availabilty Request
    required:
    - HttpStatusCode
    - HttpStatusDescription
    type: object
    properties:
      WeightUnitOfMeasure:
        description: Weight Unit of Measure<br />The unit of measure used for the
          Max Weights.<br />Will be the same as the Weight Unit of Measure received.
        enum:
        - KG
        - Grams
        type: string
      Options:
        description: Service Options<br />The available service options that can be
          used for the details provided.<br />Populated for successful responses only.
        type: array
        items:
          $ref: '#/definitions/ServiceAvailability.Option'
        xml:
          name: Options
          wrapped: true
      HttpStatusCode:
        format: int32
        description: HTTP Status Code
        type: integer
        example: 200
      HttpStatusDescription:
        description: HTTP Status Description
        type: string
        example: OK
      Message:
        description: Message<br />Successful response may include a success message.<br
          />Failure responses will have general reason as to why. Further details
          may be contained in the list of errors.
        type: string
        example: Your item has been created/updated successfully
      Errors:
        description: Errors<br />Details about why a request failed.
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
        xml:
          name: Errors
          wrapped: true
    xml:
      name: ServiceAvailabilityResponse
  ServiceAvailability.Option:
    description: An available service option based on your request.
    required:
    - ServiceCode
    - ServiceName
    - TransitDays
    - IsTracked
    - SignatureIncluded
    - RecordedSignedForAvailable
    - SafeplaceAvailable
    - LocalCollectAvailable
    - SaturdayGuaranteedAvailable
    - ConsequentialLossAvailable
    - FormatsAvailable
    type: object
    properties:
      ServiceCode:
        description: Service Code<br />Customer Mapped Service Code or System Service
          Code for this service.
        maxLength: 10
        type: string
        example: OTA
      ServiceName:
        description: Service Name
        type: string
        example: International Tracked On Account
      TransitDays:
        format: int32
        description: Estimated Transit Days
        type: integer
        example: 4
      IsTracked:
        description: Is Tracked<br />If true, the service is a tracked service.
        type: boolean
        example: true
      SignatureIncluded:
        description: Signature Included<br />If true, a signature required on delivery
          is included with the service.
        type: boolean
        example: false
      RecordedSignedForAvailable:
        description: Recorded Signed For Enhancement Available<br />If true, the recorded
          signed for enhancement can be used with this service.
        type: boolean
        example: false
      SafeplaceAvailable:
        description: Safe Place Enhancement Available<br />If true, the safe place
          enhancement can be used with this service.
        type: boolean
        example: false
      LocalCollectAvailable:
        description: Local Collect Enhancement Available<br />If true, the local collect
          enhancement can be used with this service.
        type: boolean
        example: false
      SaturdayGuaranteedAvailable:
        description: Saturday Guaranteed Enhancement Available<br />If true, the saturday
          guaranteed enhancement can be used with this service.
        type: boolean
        example: false
      ConsequentialLossAvailable:
        description: Consequential Loss Enhancement Available<br />If true, the consequential
          loss enhancement can be used with this service.
        type: boolean
        example: false
      FormatsAvailable:
        description: Formats Available<br />All formats that are available for this
          service for the given weight, including the maximum weight possible for
          each format.
        type: array
        items:
          $ref: '#/definitions/ServiceAvailability.Format'
        xml:
          name: FormatsAvailable
          wrapped: true
    xml:
      name: Option
  ServiceAvailability.Format:
    description: Available Format for a service, with the maximum possible weight
      allowed.
    required:
    - FormatDescription
    - MaxWeight
    type: object
    properties:
      ServiceFormat:
        description: Service Format<br />An available service format for this service.<br
          />If blank, then formats are not applicable for this service.<br />            <br
          />**L** - Letter<br />**F** - Large Letter<br />**P** - Parcel<br />**S**
          - Printed Papers<br />**Blank** - Not Applicable
        enum:
        - L
        - F
        - P
        - S
        type: string
      FormatDescription:
        description: Format Description<br />A description of the Service Format<br
          />            <br />Letter<br />Large Letter<br />Parcel<br />International
          Printed Papaers<br />Not Applicable
        type: string
      MaxWeight:
        format: double
        description: Maximum Weight<br />The maximum weight allowed for this format
          (or service if formats not applicable) in specified Unit of Measure.
        type: number
        example: 0.750000
    xml:
      name: Format
  ManifestRequest:
    description: A request to manifest all shipments ready to manifest for a single
      posting location.
    required:
    - PostingLocation
    type: object
    properties:
      PostingLocation:
        description: Posting Location.<br />Optional if you only have 1 Posting Location.
        maxLength: 10
        minLength: 10
        type: string
        example: "123456789"
    xml:
      name: ManifestRequest
  ManifestResponse:
    description: Response from a create manifest request
    required:
    - PostingLocation
    - HttpStatusCode
    - HttpStatusDescription
    type: object
    properties:
      PostingLocation:
        description: Posting Location.<br />The Posting Location manifested
        maxLength: 10
        minLength: 10
        type: string
        example: "123456789"
      Manifests:
        description: The Created Manifests<br />Only populated if the request was
          successful.
        type: array
        items:
          $ref: '#/definitions/Manifest'
        xml:
          name: Manifests
          wrapped: true
      HttpStatusCode:
        format: int32
        description: HTTP Status Code
        type: integer
        example: 200
      HttpStatusDescription:
        description: HTTP Status Description
        type: string
        example: OK
      Message:
        description: Message<br />Successful response may include a success message.<br
          />Failure responses will have general reason as to why. Further details
          may be contained in the list of errors.
        type: string
        example: Your item has been created/updated successfully
      Errors:
        description: Errors<br />Details about why a request failed.
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
        xml:
          name: Errors
          wrapped: true
    xml:
      name: ManifestResponse
  Manifest:
    description: Details of a Manifest that is returned when manifests are successfully
      created.
    type: object
    properties:
      ManifestNumber:
        description: Manifest Number
        maxLength: 18
        type: string
        example: INT1810002000
      ManifestImage:
        description: Manifest Image<br />A base 64 encoded string of the manifest
          PDF.
        type: string
        example: JVBERi0xLjQKJdP0zOEKMSAwIG9 ... iago8PAovQ3JlYXRpb25EYXRlKEQ6MjAxODA5MjcxM
      CarrierCode:
        description: Carrier Code<br />The carrier that this manifest is for.
        maxLength: 4
        type: string
        example: RMG
      ServiceCode:
        description: Service Code<br />The service included in this Manifest. If more
          than one, Mixed will be returned.
        maxLength: 10
        type: string
        example: Mixed
      TotalWeight:
        format: double
        description: Total Weight<br />Sum of the weight of all the packages included
          on the Manifest in KGs.
        type: number
        example: 2.560000
      TotalPackages:
        format: int32
        description: Total Packages<br />The total number of packages included on
          the Manifest.
        type: integer
        example: 54
    xml:
      name: Manifest
  ManifestCarrierCodesRequest:
    description: A request to manifest shipments created with the given carrier codes
      that are ready to manifest for a single posting location.
    required:
    - CarrierCodes
    - PostingLocation
    type: object
    properties:
      CarrierCodes:
        description: Carrier Codes<br />Must be valid system carrier codes.
        maxLength: 4
        type: array
        items:
          type: string
          xml:
            name: CarrierCode
        xml:
          name: CarrierCodes
          wrapped: true
        example:
        - RMG
        - PFCE
      PostingLocation:
        description: Posting Location.<br />Optional if you only have 1 Posting Location.
        maxLength: 10
        minLength: 10
        type: string
        example: "123456789"
    xml:
      name: ManifestCarrierCodesRequest
  ManifestServiceCodesRequest:
    description: A request to manifest shipments created with the given service codes
      that are ready to manifest for a single posting location.
    required:
    - ServiceCodes
    - PostingLocation
    type: object
    properties:
      ServiceCodes:
        description: Service Codes<br />Must be valid system service codes OR customer
          mapped service codes.
        maxLength: 10
        type: array
        items:
          type: string
          xml:
            name: ServiceCode
        xml:
          name: ServiceCodes
          wrapped: true
        example:
        - CRL1
        - CRL2
      PostingLocation:
        description: Posting Location.<br />Optional if you only have 1 Posting Location.
        maxLength: 10
        minLength: 10
        type: string
        example: "123456789"
    xml:
      name: ManifestServiceCodesRequest
  Address:
    description: An address that is part of the address book.<br />A stored address
      can be used in shipment requests.
    required:
    - IsReturnAddress
    - ContactName
    - AddressLine1
    - Town
    - CountryCode
    type: object
    properties:
      AddressId:
        description: Address ID<br />Your unique identifier for this address.<br />If
          not provided, a GUID will be generated.
        maxLength: 70
        type: string
        example: UNIQUEID123
      IsReturnAddress:
        description: Is Return Address<br />If true, then this address is also available
          as a return address.
        type: boolean
        example: false
      CompanyName:
        description: Company Name<br />*Ignored if is a return address*
        maxLength: 35
        type: string
        example: Company & Co.
      ContactName:
        description: Contact Name / Return Name
        maxLength: 40
        type: string
        example: John Smith
      AddressLine1:
        description: Address Line 1
        maxLength: 35
        type: string
        example: Brown Cottage
      AddressLine2:
        description: Address Line 2
        maxLength: 35
        type: string
        example: 10 Sky Lane
      AddressLine3:
        description: Address Line 3
        maxLength: 35
        type: string
        example: Branton
      Town:
        description: Town
        maxLength: 35
        type: string
        example: Leatherhead
      County:
        description: County / State / Province<br />Conditional dependent on country.<br
          />USA, Australia and Canada all require a valid state code or name.
        type: string
        example: Surrey
      CountryCode:
        description: Country Code<br />[ISO Alpha-2 Country Code](https://www.nationsonline.org/oneworld/country_code_list.htm)
          per ISO 3166 Standard<br />*Required to be GB if is a return address*
        maxLength: 2
        minLength: 2
        type: string
        example: GB
      Postcode:
        description: Postcode / Zip<br />Required for domestic addresses and some
          international addresses.
        maxLength: 10
        type: string
        example: TW20 0HJ
      PhoneNumber:
        description: Contact Phone Number<br />Required for destination addresses
          where SMS notifications are requested.<br />(Service Enhancement Code 13
          or 16)<br />*Ignored if is a return address*
        maxLength: 20
        type: string
        example: "7723456789"
      EmailAddress:
        description: Contact Email Address<br />Required for destination addresses
          where email notifications are requested.<br />(Service Enhancement Code
          14 or 16)<br />*Ignored if is a Return Address*
        maxLength: 254
        type: string
        example: email@example.com
      VatNumber:
        description: VAT Number<br />*Ignored if is a return address*
        maxLength: 20
        type: string
        example: GB123 4567 89
      Safeplace:
        description: Safeplace<br />Free text to describe a safe place to leave the
          parcel if the service allows it.<br />*Ignored if is a return address*
        maxLength: 30
        type: string
        example: Front Porch
    xml:
      name: Address
  AddressResponse:
    description: Response from a create / update or delete address request.
    required:
    - HttpStatusCode
    - HttpStatusDescription
    type: object
    properties:
      AddressId:
        description: Address Id<br />The Id of the Address involved in the request,
          or in the case of create, the created Id, if not provided.
        maxLength: 70
        type: string
        example: UNIQUEID123
      HttpStatusCode:
        format: int32
        description: HTTP Status Code
        type: integer
        example: 200
      HttpStatusDescription:
        description: HTTP Status Description
        type: string
        example: OK
      Message:
        description: Message<br />Successful response may include a success message.<br
          />Failure responses will have general reason as to why. Further details
          may be contained in the list of errors.
        type: string
        example: Your item has been created/updated successfully
      Errors:
        description: Errors<br />Details about why a request failed.
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
        xml:
          name: Errors
          wrapped: true
    xml:
      name: AddressResponse
  Item:
    description: An Item that is stored for use in shipment requests.
    required:
    - Description
    - Value
    - Currency
    type: object
    properties:
      ItemId:
        description: Unique ID<br />Your unique identifier for this item.<br />If
          not provided, a GUID will be generated.
        maxLength: 70
        type: string
        example: UNIQUEID123
      Description:
        description: Item Description
        maxLength: 70
        type: string
        example: White Tee-shirt
      Value:
        format: double
        description: Item Value
        maximum: 99999999.990000
        minimum: 0.010000
        type: number
        example: 19.990000
      Currency:
        description: Currency<br />3 digit ISO Currency Code
        maxLength: 3
        minLength: 3
        type: string
        example: GBP
      Weight:
        format: double
        description: 'Item Weight<br />The weight of this item.<br />Min weight: 1
          gram.'
        maximum: 9999.999000
        minimum: 0.001000
        type: number
        example: 0.432000
      WeightUnitOfMeasure:
        description: Weight Unit of Measure<br />If using Grams, minimum weight is
          1 and partial numbers will be ignored.
        default: KG
        enum:
        - KG
        - Grams
        type: string
      HsCode:
        description: HS Code<br />The [standardised commodity code](https://www.gov.uk/trade-tariff).
          It must be 6-12 digits only.<br />Used by Customs to calculate potential
          duties / taxes.
        type: string
        example: "652534"
      SkuCode:
        description: SKU Code.<br />Used by Customs to calculate potential duties
          / taxes.
        maxLength: 30
        type: string
        example: SKU3455692
      CountryOfOrigin:
        description: Country of Origin<br />[ISO Alpha-2 Country Code](https://www.nationsonline.org/oneworld/country_code_list.htm)
          of item country of origin, per ISO 3166 Standard
        type: string
        example: CN
      ImageUrl:
        description: Image URL<br />Used to save a link to an image of the item with
          the shipment details, so that this can be used in the Returns<br />system
          for consumers to see an image of the item when selecting items for return.<br
          />URL must be a publicly accessible image.
        maxLength: 1000
        type: string
        example: http://www.myimagestore.com/myimage.jpg
    xml:
      name: Item
  ItemResponse:
    description: Response from a delete item request.
    required:
    - HttpStatusCode
    - HttpStatusDescription
    type: object
    properties:
      ItemId:
        description: Item Id<br />The Id of the Item involved in the request, or in
          the case of create, the created Id, if not provided.
        maxLength: 70
        type: string
        example: UNIQUEID123
      HttpStatusCode:
        format: int32
        description: HTTP Status Code
        type: integer
        example: 200
      HttpStatusDescription:
        description: HTTP Status Description
        type: string
        example: OK
      Message:
        description: Message<br />Successful response may include a success message.<br
          />Failure responses will have general reason as to why. Further details
          may be contained in the list of errors.
        type: string
        example: Your item has been created/updated successfully
      Errors:
        description: Errors<br />Details about why a request failed.
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
        xml:
          name: Errors
          wrapped: true
    xml:
      name: ItemResponse
  Packaging:
    description: Packaging details that are stored, to be used in shipment requests.
    required:
    - Name
    - Length
    - Width
    - Height
    type: object
    properties:
      PackagingId:
        description: Packaging Unique ID<br />Your unique identifier for these packaging
          details.<br />If not provided, a GUID will be generated.
        maxLength: 70
        type: string
        example: UNIQUEID123
      Name:
        description: Name<br />The descriptive name of these packaging details
        maxLength: 40
        type: string
        example: Small Box
      Weight:
        format: double
        description: 'Packaging Weight<br />The weight of this packaging.<br />Min
          weight: 1 gram.'
        maximum: 9999.999000
        minimum: 0.001000
        type: number
        example: 0.008000
      WeightUnitOfMeasure:
        description: Weight Unit of Measure
        default: KG
        enum:
        - KG
        - Grams
        type: string
      Length:
        format: double
        description: Packaging Length<br />The length of this packaging in CM
        maximum: 250
        minimum: 0.010000
        type: number
        example: 15
      Width:
        format: double
        description: Packaging Width<br />The width of this packaging in CM
        maximum: 250
        minimum: 0.010000
        type: number
        example: 15
      Height:
        format: double
        description: Packaging Height<br />The height of this packaging in CM
        maximum: 250
        minimum: 0.010000
        type: number
        example: 5
    xml:
      name: Packaging
  PackagingResponse:
    description: Response from a delete packaging details request.
    required:
    - HttpStatusCode
    - HttpStatusDescription
    type: object
    properties:
      PackagingId:
        description: Packaging Id<br />The Id of the Packaging Details involved in
          the request.
        maxLength: 70
        type: string
        example: UNIQUEID123
      HttpStatusCode:
        format: int32
        description: HTTP Status Code
        type: integer
        example: 200
      HttpStatusDescription:
        description: HTTP Status Description
        type: string
        example: OK
      Message:
        description: Message<br />Successful response may include a success message.<br
          />Failure responses will have general reason as to why. Further details
          may be contained in the list of errors.
        type: string
        example: Your item has been created/updated successfully
      Errors:
        description: Errors<br />Details about why a request failed.
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
        xml:
          name: Errors
          wrapped: true
    xml:
      name: PackagingResponse
x-ibm-configuration:
  enforced: true
  testable: true
  phase: realized
security:
- clientID: []
securityDefinitions:
  clientID:
    type: apiKey
    description: Client ID
    in: header
    name: X-IBM-Client-Id
  clientSecret:
    type: apiKey
    description: Client Secret
    in: header
    name: X-IBM-Client-Secret
consumes:
- application/xml
- application/json
produces:
- application/xml
- application/json
parameters:
  X-RMG-Auth-Token:
    name: X-RMG-Auth-Token
    type: string
    required: true
    in: header
    description: Authorisation token required to invoke this operation. Can be retrieved
      by invoking the **/token** operation.
  X-RMG-Security-Username:
    name: X-RMG-Security-Username
    type: string
    required: true
    in: header
    description: User Name
  X-RMG-Security-Password:
    name: X-RMG-Security-Password
    type: string
    required: true
    in: header
    description: Password in plain text
x-ibm-endpoints:
- endpointUrl: https://api.royalmail.net
  description: Custom API Endpoint
  type:
  - production
  - development
...
