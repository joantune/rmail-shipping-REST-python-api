# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rmail_apiv4.api_client import ApiClient


class ShippingAccountsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v4_shipping_accounts_carrier_code_shipping_account_id_delete(self, carrier_code, shipping_account_id, **kwargs):  # noqa: E501
        """Delete Account  # noqa: E501

        Delete a specific shipping account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_carrier_code_shipping_account_id_delete(carrier_code, shipping_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str carrier_code: Carrier Code (required)
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v4_shipping_accounts_carrier_code_shipping_account_id_delete_with_http_info(carrier_code, shipping_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v4_shipping_accounts_carrier_code_shipping_account_id_delete_with_http_info(carrier_code, shipping_account_id, **kwargs)  # noqa: E501
            return data

    def v4_shipping_accounts_carrier_code_shipping_account_id_delete_with_http_info(self, carrier_code, shipping_account_id, **kwargs):  # noqa: E501
        """Delete Account  # noqa: E501

        Delete a specific shipping account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_carrier_code_shipping_account_id_delete_with_http_info(carrier_code, shipping_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str carrier_code: Carrier Code (required)
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['carrier_code', 'shipping_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_shipping_accounts_carrier_code_shipping_account_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'carrier_code' is set
        if ('carrier_code' not in params or
                params['carrier_code'] is None):
            raise ValueError("Missing the required parameter `carrier_code` when calling `v4_shipping_accounts_carrier_code_shipping_account_id_delete`")  # noqa: E501
        # verify the required parameter 'shipping_account_id' is set
        if ('shipping_account_id' not in params or
                params['shipping_account_id'] is None):
            raise ValueError("Missing the required parameter `shipping_account_id` when calling `v4_shipping_accounts_carrier_code_shipping_account_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'carrier_code' in params:
            path_params['carrierCode'] = params['carrier_code']  # noqa: E501
        if 'shipping_account_id' in params:
            path_params['shippingAccountId'] = params['shipping_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v4/shippingAccounts/{carrierCode}/{shippingAccountId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_shipping_accounts_carrier_code_shipping_account_id_unlink_locations_put(self, carrier_code, shipping_account_id, **kwargs):  # noqa: E501
        """Unlink Locations  # noqa: E501

        Unlink one or more shipping location from a specific carrier shipping account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_carrier_code_shipping_account_id_unlink_locations_put(carrier_code, shipping_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str carrier_code: Carrier Code (required)
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param list[ShippingLocationIdRequest] body: Shipping Locations
The locations to remove from the account.
At least one location must be provided.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v4_shipping_accounts_carrier_code_shipping_account_id_unlink_locations_put_with_http_info(carrier_code, shipping_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v4_shipping_accounts_carrier_code_shipping_account_id_unlink_locations_put_with_http_info(carrier_code, shipping_account_id, **kwargs)  # noqa: E501
            return data

    def v4_shipping_accounts_carrier_code_shipping_account_id_unlink_locations_put_with_http_info(self, carrier_code, shipping_account_id, **kwargs):  # noqa: E501
        """Unlink Locations  # noqa: E501

        Unlink one or more shipping location from a specific carrier shipping account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_carrier_code_shipping_account_id_unlink_locations_put_with_http_info(carrier_code, shipping_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str carrier_code: Carrier Code (required)
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param list[ShippingLocationIdRequest] body: Shipping Locations
The locations to remove from the account.
At least one location must be provided.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['carrier_code', 'shipping_account_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_shipping_accounts_carrier_code_shipping_account_id_unlink_locations_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'carrier_code' is set
        if ('carrier_code' not in params or
                params['carrier_code'] is None):
            raise ValueError("Missing the required parameter `carrier_code` when calling `v4_shipping_accounts_carrier_code_shipping_account_id_unlink_locations_put`")  # noqa: E501
        # verify the required parameter 'shipping_account_id' is set
        if ('shipping_account_id' not in params or
                params['shipping_account_id'] is None):
            raise ValueError("Missing the required parameter `shipping_account_id` when calling `v4_shipping_accounts_carrier_code_shipping_account_id_unlink_locations_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'carrier_code' in params:
            path_params['carrierCode'] = params['carrier_code']  # noqa: E501
        if 'shipping_account_id' in params:
            path_params['shippingAccountId'] = params['shipping_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v4/shippingAccounts/{carrierCode}/{shippingAccountId}/unlinkLocations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_shipping_accounts_get(self, **kwargs):  # noqa: E501
        """Get Accounts  # noqa: E501

        Provides a list of all shipping accounts for all carriers (created on your customer account). <br />Information about the associated carrier, account number, account type, and contact details is included in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_term: Search Term
        :param int page_size: The maximum number of records per page.
        :param int page_number: The number of the requested page, starting at 1.
        :param ShippingAccountsSortBy sort_by: Sort By <br />Default: Name
        :param OrderDirection sort_dir: Sort Direction <br />Default: Ascending
        :return: ShippingAccountsPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v4_shipping_accounts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v4_shipping_accounts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v4_shipping_accounts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Accounts  # noqa: E501

        Provides a list of all shipping accounts for all carriers (created on your customer account). <br />Information about the associated carrier, account number, account type, and contact details is included in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_term: Search Term
        :param int page_size: The maximum number of records per page.
        :param int page_number: The number of the requested page, starting at 1.
        :param ShippingAccountsSortBy sort_by: Sort By <br />Default: Name
        :param OrderDirection sort_dir: Sort Direction <br />Default: Ascending
        :return: ShippingAccountsPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_term', 'page_size', 'page_number', 'sort_by', 'sort_dir']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_shipping_accounts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_term' in params:
            query_params.append(('searchTerm', params['search_term']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sortDir', params['sort_dir']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v4/shippingAccounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShippingAccountsPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_shipping_accounts_rm_get(self, **kwargs):  # noqa: E501
        """Get Carrier Accounts  # noqa: E501

        Provides a list of Royal Mail shipping accounts only. <br />Information about the account number, account type, and contact details is included in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_term: Search Term
        :param int page_size: The maximum number of records per page.
        :param int page_number: The number of the requested page, starting at 1.
        :param ShippingAccountsSortBy sort_by: Sort By <br />Default: Name
        :param OrderDirection sort_dir: Sort Direction <br />Default: Ascending
        :return: RoyalMailShippingAccountShippingAccountsPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v4_shipping_accounts_rm_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v4_shipping_accounts_rm_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v4_shipping_accounts_rm_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Carrier Accounts  # noqa: E501

        Provides a list of Royal Mail shipping accounts only. <br />Information about the account number, account type, and contact details is included in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_term: Search Term
        :param int page_size: The maximum number of records per page.
        :param int page_number: The number of the requested page, starting at 1.
        :param ShippingAccountsSortBy sort_by: Sort By <br />Default: Name
        :param OrderDirection sort_dir: Sort Direction <br />Default: Ascending
        :return: RoyalMailShippingAccountShippingAccountsPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_term', 'page_size', 'page_number', 'sort_by', 'sort_dir']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_shipping_accounts_rm_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_term' in params:
            query_params.append(('searchTerm', params['search_term']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sortDir', params['sort_dir']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v4/shippingAccounts/rm', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoyalMailShippingAccountShippingAccountsPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_shipping_accounts_rm_post(self, **kwargs):  # noqa: E501
        """Add Account  # noqa: E501

        Add a shipping account for Royal Mail and link it with an existing shipping location. <br />Ensure to have required carrier details ready like Royal Mail account number, Posting Location, OBA access codes and receiving hub, so that you can use the account for shipping with Royal Mail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RoyalMailAddShippingAccountRequest body: Add Shipping Account Request
        :return: AddShippingAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v4_shipping_accounts_rm_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v4_shipping_accounts_rm_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v4_shipping_accounts_rm_post_with_http_info(self, **kwargs):  # noqa: E501
        """Add Account  # noqa: E501

        Add a shipping account for Royal Mail and link it with an existing shipping location. <br />Ensure to have required carrier details ready like Royal Mail account number, Posting Location, OBA access codes and receiving hub, so that you can use the account for shipping with Royal Mail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RoyalMailAddShippingAccountRequest body: Add Shipping Account Request
        :return: AddShippingAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_shipping_accounts_rm_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v4/shippingAccounts/rm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddShippingAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_shipping_accounts_rm_shipping_account_id_get(self, shipping_account_id, **kwargs):  # noqa: E501
        """Get Account  # noqa: E501

        Provides details for a Royal Mail account. <br />Information about the account number, alias, account type, and contact details is included in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_shipping_account_id_get(shipping_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :return: RoyalMailShippingAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v4_shipping_accounts_rm_shipping_account_id_get_with_http_info(shipping_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v4_shipping_accounts_rm_shipping_account_id_get_with_http_info(shipping_account_id, **kwargs)  # noqa: E501
            return data

    def v4_shipping_accounts_rm_shipping_account_id_get_with_http_info(self, shipping_account_id, **kwargs):  # noqa: E501
        """Get Account  # noqa: E501

        Provides details for a Royal Mail account. <br />Information about the account number, alias, account type, and contact details is included in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_shipping_account_id_get_with_http_info(shipping_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :return: RoyalMailShippingAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shipping_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_shipping_accounts_rm_shipping_account_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shipping_account_id' is set
        if ('shipping_account_id' not in params or
                params['shipping_account_id'] is None):
            raise ValueError("Missing the required parameter `shipping_account_id` when calling `v4_shipping_accounts_rm_shipping_account_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipping_account_id' in params:
            path_params['shippingAccountId'] = params['shipping_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v4/shippingAccounts/rm/{shippingAccountId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoyalMailShippingAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_shipping_accounts_rm_shipping_account_id_link_locations_post(self, shipping_account_id, **kwargs):  # noqa: E501
        """Link Locations  # noqa: E501

        Link one or more shipping locations with a Royal Mail shipping account. <br />Ensure to have required carrier details ready: Royal Mail Posting Location number, OBA access codes and receiving hub, so that you can link it successfully.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_shipping_account_id_link_locations_post(shipping_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param list[RoyalMailLinkShippingAccountLocation] body: Shipping Locations
The locations to associate with this shipping account.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v4_shipping_accounts_rm_shipping_account_id_link_locations_post_with_http_info(shipping_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v4_shipping_accounts_rm_shipping_account_id_link_locations_post_with_http_info(shipping_account_id, **kwargs)  # noqa: E501
            return data

    def v4_shipping_accounts_rm_shipping_account_id_link_locations_post_with_http_info(self, shipping_account_id, **kwargs):  # noqa: E501
        """Link Locations  # noqa: E501

        Link one or more shipping locations with a Royal Mail shipping account. <br />Ensure to have required carrier details ready: Royal Mail Posting Location number, OBA access codes and receiving hub, so that you can link it successfully.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_shipping_account_id_link_locations_post_with_http_info(shipping_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param list[RoyalMailLinkShippingAccountLocation] body: Shipping Locations
The locations to associate with this shipping account.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shipping_account_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_shipping_accounts_rm_shipping_account_id_link_locations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shipping_account_id' is set
        if ('shipping_account_id' not in params or
                params['shipping_account_id'] is None):
            raise ValueError("Missing the required parameter `shipping_account_id` when calling `v4_shipping_accounts_rm_shipping_account_id_link_locations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipping_account_id' in params:
            path_params['shippingAccountId'] = params['shipping_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v4/shippingAccounts/rm/{shippingAccountId}/linkLocations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_shipping_accounts_rm_shipping_account_id_put(self, shipping_account_id, **kwargs):  # noqa: E501
        """Update Account  # noqa: E501

        Update shipping account details. <br />Note: All required fields must be populated in the request, regardless if they need updating or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_shipping_account_id_put(shipping_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param RoyalMailUpdateShippingAccountRequest body: Shipping Account Details
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v4_shipping_accounts_rm_shipping_account_id_put_with_http_info(shipping_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v4_shipping_accounts_rm_shipping_account_id_put_with_http_info(shipping_account_id, **kwargs)  # noqa: E501
            return data

    def v4_shipping_accounts_rm_shipping_account_id_put_with_http_info(self, shipping_account_id, **kwargs):  # noqa: E501
        """Update Account  # noqa: E501

        Update shipping account details. <br />Note: All required fields must be populated in the request, regardless if they need updating or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_shipping_account_id_put_with_http_info(shipping_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param RoyalMailUpdateShippingAccountRequest body: Shipping Account Details
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shipping_account_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_shipping_accounts_rm_shipping_account_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shipping_account_id' is set
        if ('shipping_account_id' not in params or
                params['shipping_account_id'] is None):
            raise ValueError("Missing the required parameter `shipping_account_id` when calling `v4_shipping_accounts_rm_shipping_account_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipping_account_id' in params:
            path_params['shippingAccountId'] = params['shipping_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v4/shippingAccounts/rm/{shippingAccountId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_shipping_accounts_rm_shipping_account_id_shipping_locations_get(self, shipping_account_id, **kwargs):  # noqa: E501
        """Get Associated Locations  # noqa: E501

        Provides a list of all shipping locations associated with a Royal Mail shipping account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_shipping_account_id_shipping_locations_get(shipping_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param str search_term: Search Term
        :param int page_size: The maximum number of records per page.
        :param int page_number: The number of the requested page, starting at 1.
        :param ShippingLocationsSortBy sort_by: Sort By <br />Default: Name
        :param OrderDirection sort_dir: Sort Direction <br />Default: Ascending
        :return: RoyalMailViewShippingAccountLocationShippingLocationsForAccountPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v4_shipping_accounts_rm_shipping_account_id_shipping_locations_get_with_http_info(shipping_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v4_shipping_accounts_rm_shipping_account_id_shipping_locations_get_with_http_info(shipping_account_id, **kwargs)  # noqa: E501
            return data

    def v4_shipping_accounts_rm_shipping_account_id_shipping_locations_get_with_http_info(self, shipping_account_id, **kwargs):  # noqa: E501
        """Get Associated Locations  # noqa: E501

        Provides a list of all shipping locations associated with a Royal Mail shipping account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_shipping_account_id_shipping_locations_get_with_http_info(shipping_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param str search_term: Search Term
        :param int page_size: The maximum number of records per page.
        :param int page_number: The number of the requested page, starting at 1.
        :param ShippingLocationsSortBy sort_by: Sort By <br />Default: Name
        :param OrderDirection sort_dir: Sort Direction <br />Default: Ascending
        :return: RoyalMailViewShippingAccountLocationShippingLocationsForAccountPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shipping_account_id', 'search_term', 'page_size', 'page_number', 'sort_by', 'sort_dir']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_shipping_accounts_rm_shipping_account_id_shipping_locations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shipping_account_id' is set
        if ('shipping_account_id' not in params or
                params['shipping_account_id'] is None):
            raise ValueError("Missing the required parameter `shipping_account_id` when calling `v4_shipping_accounts_rm_shipping_account_id_shipping_locations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipping_account_id' in params:
            path_params['shippingAccountId'] = params['shipping_account_id']  # noqa: E501

        query_params = []
        if 'search_term' in params:
            query_params.append(('searchTerm', params['search_term']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sortDir', params['sort_dir']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v4/shippingAccounts/rm/{shippingAccountId}/shippingLocations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoyalMailViewShippingAccountLocationShippingLocationsForAccountPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_get(self, shipping_account_id, shipping_location_id, **kwargs):  # noqa: E501
        """Get Associated Location  # noqa: E501

        Provides information for a specific shipping location linked to a Royal Mail shipping account including location alias, Royal Mail specific details, timezone, address, when it was last updated, and by who.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_get(shipping_account_id, shipping_location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param str shipping_location_id: Shipping Location Identifier <br />PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :return: RoyalMailViewShippingAccountLocationShippingLocationForAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_get_with_http_info(shipping_account_id, shipping_location_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_get_with_http_info(shipping_account_id, shipping_location_id, **kwargs)  # noqa: E501
            return data

    def v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_get_with_http_info(self, shipping_account_id, shipping_location_id, **kwargs):  # noqa: E501
        """Get Associated Location  # noqa: E501

        Provides information for a specific shipping location linked to a Royal Mail shipping account including location alias, Royal Mail specific details, timezone, address, when it was last updated, and by who.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_get_with_http_info(shipping_account_id, shipping_location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param str shipping_location_id: Shipping Location Identifier <br />PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :return: RoyalMailViewShippingAccountLocationShippingLocationForAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shipping_account_id', 'shipping_location_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shipping_account_id' is set
        if ('shipping_account_id' not in params or
                params['shipping_account_id'] is None):
            raise ValueError("Missing the required parameter `shipping_account_id` when calling `v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_get`")  # noqa: E501
        # verify the required parameter 'shipping_location_id' is set
        if ('shipping_location_id' not in params or
                params['shipping_location_id'] is None):
            raise ValueError("Missing the required parameter `shipping_location_id` when calling `v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipping_account_id' in params:
            path_params['shippingAccountId'] = params['shipping_account_id']  # noqa: E501
        if 'shipping_location_id' in params:
            path_params['shippingLocationId'] = params['shipping_location_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v4/shippingAccounts/rm/{shippingAccountId}/shippingLocations/{shippingLocationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoyalMailViewShippingAccountLocationShippingLocationForAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_put(self, shipping_account_id, shipping_location_id, **kwargs):  # noqa: E501
        """Update Associated Location  # noqa: E501

        Update a shipping location associated with a specific Royal Mail shipping account with carrier specific details like Posting Location, OBA access code and receiving hub. <br />Note: All required fields must be populated in the request, regardless if they need updating or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_put(shipping_account_id, shipping_location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param str shipping_location_id: Shipping Location Identifier <br />PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param RoyalMailUpdateShippingAccountLocation body: Location Details
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_put_with_http_info(shipping_account_id, shipping_location_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_put_with_http_info(shipping_account_id, shipping_location_id, **kwargs)  # noqa: E501
            return data

    def v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_put_with_http_info(self, shipping_account_id, shipping_location_id, **kwargs):  # noqa: E501
        """Update Associated Location  # noqa: E501

        Update a shipping location associated with a specific Royal Mail shipping account with carrier specific details like Posting Location, OBA access code and receiving hub. <br />Note: All required fields must be populated in the request, regardless if they need updating or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_put_with_http_info(shipping_account_id, shipping_location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipping_account_id: Shipping Account Identifier <br />PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param str shipping_location_id: Shipping Location Identifier <br />PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
        :param RoyalMailUpdateShippingAccountLocation body: Location Details
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shipping_account_id', 'shipping_location_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shipping_account_id' is set
        if ('shipping_account_id' not in params or
                params['shipping_account_id'] is None):
            raise ValueError("Missing the required parameter `shipping_account_id` when calling `v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_put`")  # noqa: E501
        # verify the required parameter 'shipping_location_id' is set
        if ('shipping_location_id' not in params or
                params['shipping_location_id'] is None):
            raise ValueError("Missing the required parameter `shipping_location_id` when calling `v4_shipping_accounts_rm_shipping_account_id_shipping_locations_shipping_location_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipping_account_id' in params:
            path_params['shippingAccountId'] = params['shipping_account_id']  # noqa: E501
        if 'shipping_location_id' in params:
            path_params['shippingLocationId'] = params['shipping_location_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v4/shippingAccounts/rm/{shippingAccountId}/shippingLocations/{shippingLocationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
