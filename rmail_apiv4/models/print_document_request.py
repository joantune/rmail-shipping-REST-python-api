# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrintDocumentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_type': 'DocumentType',
        'number_of_copies': 'int',
        'eori_number': 'str',
        'vat_number': 'str',
        'reason_for_export': 'str',
        'name': 'str',
        'position': 'str',
        'signature_image': 'str',
        'company_stamp_image': 'str'
    }

    attribute_map = {
        'document_type': 'DocumentType',
        'number_of_copies': 'NumberOfCopies',
        'eori_number': 'EoriNumber',
        'vat_number': 'VatNumber',
        'reason_for_export': 'ReasonForExport',
        'name': 'Name',
        'position': 'Position',
        'signature_image': 'SignatureImage',
        'company_stamp_image': 'CompanyStampImage'
    }

    def __init__(self, document_type=None, number_of_copies=1, eori_number=None, vat_number=None, reason_for_export=None, name=None, position=None, signature_image=None, company_stamp_image=None):  # noqa: E501
        """PrintDocumentRequest - a model defined in Swagger"""  # noqa: E501
        self._document_type = None
        self._number_of_copies = None
        self._eori_number = None
        self._vat_number = None
        self._reason_for_export = None
        self._name = None
        self._position = None
        self._signature_image = None
        self._company_stamp_image = None
        self.discriminator = None
        if document_type is not None:
            self.document_type = document_type
        if number_of_copies is not None:
            self.number_of_copies = number_of_copies
        if eori_number is not None:
            self.eori_number = eori_number
        if vat_number is not None:
            self.vat_number = vat_number
        if reason_for_export is not None:
            self.reason_for_export = reason_for_export
        if name is not None:
            self.name = name
        if position is not None:
            self.position = position
        if signature_image is not None:
            self.signature_image = signature_image
        if company_stamp_image is not None:
            self.company_stamp_image = company_stamp_image

    @property
    def document_type(self):
        """Gets the document_type of this PrintDocumentRequest.  # noqa: E501


        :return: The document_type of this PrintDocumentRequest.  # noqa: E501
        :rtype: DocumentType
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this PrintDocumentRequest.


        :param document_type: The document_type of this PrintDocumentRequest.  # noqa: E501
        :type: DocumentType
        """

        self._document_type = document_type

    @property
    def number_of_copies(self):
        """Gets the number_of_copies of this PrintDocumentRequest.  # noqa: E501

        Number of Copies  # noqa: E501

        :return: The number_of_copies of this PrintDocumentRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_of_copies

    @number_of_copies.setter
    def number_of_copies(self, number_of_copies):
        """Sets the number_of_copies of this PrintDocumentRequest.

        Number of Copies  # noqa: E501

        :param number_of_copies: The number_of_copies of this PrintDocumentRequest.  # noqa: E501
        :type: int
        """

        self._number_of_copies = number_of_copies

    @property
    def eori_number(self):
        """Gets the eori_number of this PrintDocumentRequest.  # noqa: E501

        EORI Number <br />Shipper/Receiver's EORI number starts with the ISO Alpha-2 Country Code followed by a maximum 15 characters. For Northern Ireland starts with XI <br />Overrides the shipper's EORI number on the shipment if provided. <br />If both an EORI and VAT number exist, then only the EORI Number is printed on the CN23.  # noqa: E501

        :return: The eori_number of this PrintDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._eori_number

    @eori_number.setter
    def eori_number(self, eori_number):
        """Sets the eori_number of this PrintDocumentRequest.

        EORI Number <br />Shipper/Receiver's EORI number starts with the ISO Alpha-2 Country Code followed by a maximum 15 characters. For Northern Ireland starts with XI <br />Overrides the shipper's EORI number on the shipment if provided. <br />If both an EORI and VAT number exist, then only the EORI Number is printed on the CN23.  # noqa: E501

        :param eori_number: The eori_number of this PrintDocumentRequest.  # noqa: E501
        :type: str
        """

        self._eori_number = eori_number

    @property
    def vat_number(self):
        """Gets the vat_number of this PrintDocumentRequest.  # noqa: E501

        VAT Number <br />Overrides the shipper's VAT number on the shipment if provided.  # noqa: E501

        :return: The vat_number of this PrintDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this PrintDocumentRequest.

        VAT Number <br />Overrides the shipper's VAT number on the shipment if provided.  # noqa: E501

        :param vat_number: The vat_number of this PrintDocumentRequest.  # noqa: E501
        :type: str
        """

        self._vat_number = vat_number

    @property
    def reason_for_export(self):
        """Gets the reason_for_export of this PrintDocumentRequest.  # noqa: E501

        Reason for Export <br />Overrides the shipment's Reason for Export if provided. <br />If the carrier is UPU affiliated, then the allowed Reason for Exports are: <br />**Gift** <br />**Commercial Sample** <br />**Documents** <br />**Sale of Goods** <br />**Return of Goods** <br />**Mixed Content** <br />**Other**  # noqa: E501

        :return: The reason_for_export of this PrintDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_export

    @reason_for_export.setter
    def reason_for_export(self, reason_for_export):
        """Sets the reason_for_export of this PrintDocumentRequest.

        Reason for Export <br />Overrides the shipment's Reason for Export if provided. <br />If the carrier is UPU affiliated, then the allowed Reason for Exports are: <br />**Gift** <br />**Commercial Sample** <br />**Documents** <br />**Sale of Goods** <br />**Return of Goods** <br />**Mixed Content** <br />**Other**  # noqa: E501

        :param reason_for_export: The reason_for_export of this PrintDocumentRequest.  # noqa: E501
        :type: str
        """

        self._reason_for_export = reason_for_export

    @property
    def name(self):
        """Gets the name of this PrintDocumentRequest.  # noqa: E501

        Shipper's Name <br />Override the shipment's shipper's company/contact name if provided.  # noqa: E501

        :return: The name of this PrintDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrintDocumentRequest.

        Shipper's Name <br />Override the shipment's shipper's company/contact name if provided.  # noqa: E501

        :param name: The name of this PrintDocumentRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def position(self):
        """Gets the position of this PrintDocumentRequest.  # noqa: E501

        Position <br />The shipper's job title in the sender's company. <br />*Note: The field can only be used with the proforma and commercial invoice. It will be ignored for CN23s.*  # noqa: E501

        :return: The position of this PrintDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PrintDocumentRequest.

        Position <br />The shipper's job title in the sender's company. <br />*Note: The field can only be used with the proforma and commercial invoice. It will be ignored for CN23s.*  # noqa: E501

        :param position: The position of this PrintDocumentRequest.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def signature_image(self):
        """Gets the signature_image of this PrintDocumentRequest.  # noqa: E501

        Signature Image <br />Base 64 encoded PNG or JPEG. Maximum image size supported is 240 x 34 pixels. <br />*Note: The field can only be used with the proforma and commercial invoice. It will be ignored for CN23s.*  # noqa: E501

        :return: The signature_image of this PrintDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._signature_image

    @signature_image.setter
    def signature_image(self, signature_image):
        """Sets the signature_image of this PrintDocumentRequest.

        Signature Image <br />Base 64 encoded PNG or JPEG. Maximum image size supported is 240 x 34 pixels. <br />*Note: The field can only be used with the proforma and commercial invoice. It will be ignored for CN23s.*  # noqa: E501

        :param signature_image: The signature_image of this PrintDocumentRequest.  # noqa: E501
        :type: str
        """

        self._signature_image = signature_image

    @property
    def company_stamp_image(self):
        """Gets the company_stamp_image of this PrintDocumentRequest.  # noqa: E501

        Company Stamp Image <br />Base 64 encoded PNG or JPEG. Maximum image size supported is 600 x 66 pixels. <br />*Note: The field can only be used with the proforma and commercial invoice. It will be ignored for CN23s.*  # noqa: E501

        :return: The company_stamp_image of this PrintDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_stamp_image

    @company_stamp_image.setter
    def company_stamp_image(self, company_stamp_image):
        """Sets the company_stamp_image of this PrintDocumentRequest.

        Company Stamp Image <br />Base 64 encoded PNG or JPEG. Maximum image size supported is 600 x 66 pixels. <br />*Note: The field can only be used with the proforma and commercial invoice. It will be ignored for CN23s.*  # noqa: E501

        :param company_stamp_image: The company_stamp_image of this PrintDocumentRequest.  # noqa: E501
        :type: str
        """

        self._company_stamp_image = company_stamp_image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrintDocumentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrintDocumentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
