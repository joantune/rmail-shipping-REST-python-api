# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipment_id': 'str',
        'tracking_number': 'str',
        'carrier_tracking_url': 'str',
        'label': 'str',
        'label_format': 'RoyalMailLabelFormat',
        'carrier_details': 'RoyalMailShipmentResponseCarrierSpecifics'
    }

    attribute_map = {
        'shipment_id': 'ShipmentId',
        'tracking_number': 'TrackingNumber',
        'carrier_tracking_url': 'CarrierTrackingUrl',
        'label': 'Label',
        'label_format': 'LabelFormat',
        'carrier_details': 'CarrierDetails'
    }

    def __init__(self, shipment_id=None, tracking_number=None, carrier_tracking_url=None, label=None, label_format=None, carrier_details=None):  # noqa: E501
        """RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse - a model defined in Swagger"""  # noqa: E501
        self._shipment_id = None
        self._tracking_number = None
        self._carrier_tracking_url = None
        self._label = None
        self._label_format = None
        self._carrier_details = None
        self.discriminator = None
        self.shipment_id = shipment_id
        if tracking_number is not None:
            self.tracking_number = tracking_number
        if carrier_tracking_url is not None:
            self.carrier_tracking_url = carrier_tracking_url
        if label is not None:
            self.label = label
        self.label_format = label_format
        if carrier_details is not None:
            self.carrier_details = carrier_details

    @property
    def shipment_id(self):
        """Gets the shipment_id of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501

        Shipment Id  # noqa: E501

        :return: The shipment_id of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.

        Shipment Id  # noqa: E501

        :param shipment_id: The shipment_id of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501
        :type: str
        """
        if shipment_id is None:
            raise ValueError("Invalid value for `shipment_id`, must not be `None`")  # noqa: E501

        self._shipment_id = shipment_id

    @property
    def tracking_number(self):
        """Gets the tracking_number of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501

        Tracking Number  # noqa: E501

        :return: The tracking_number of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.

        Tracking Number  # noqa: E501

        :param tracking_number: The tracking_number of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501
        :type: str
        """

        self._tracking_number = tracking_number

    @property
    def carrier_tracking_url(self):
        """Gets the carrier_tracking_url of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501

        Carrier Tracking URL  # noqa: E501

        :return: The carrier_tracking_url of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501
        :rtype: str
        """
        return self._carrier_tracking_url

    @carrier_tracking_url.setter
    def carrier_tracking_url(self, carrier_tracking_url):
        """Sets the carrier_tracking_url of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.

        Carrier Tracking URL  # noqa: E501

        :param carrier_tracking_url: The carrier_tracking_url of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501
        :type: str
        """

        self._carrier_tracking_url = carrier_tracking_url

    @property
    def label(self):
        """Gets the label of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501

        Label <br />Base 64 Encoded String of the given label format.  # noqa: E501

        :return: The label of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.

        Label <br />Base 64 Encoded String of the given label format.  # noqa: E501

        :param label: The label of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def label_format(self):
        """Gets the label_format of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501


        :return: The label_format of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501
        :rtype: RoyalMailLabelFormat
        """
        return self._label_format

    @label_format.setter
    def label_format(self, label_format):
        """Sets the label_format of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.


        :param label_format: The label_format of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501
        :type: RoyalMailLabelFormat
        """
        if label_format is None:
            raise ValueError("Invalid value for `label_format`, must not be `None`")  # noqa: E501

        self._label_format = label_format

    @property
    def carrier_details(self):
        """Gets the carrier_details of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501


        :return: The carrier_details of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501
        :rtype: RoyalMailShipmentResponseCarrierSpecifics
        """
        return self._carrier_details

    @carrier_details.setter
    def carrier_details(self, carrier_details):
        """Sets the carrier_details of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.


        :param carrier_details: The carrier_details of this RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse.  # noqa: E501
        :type: RoyalMailShipmentResponseCarrierSpecifics
        """

        self._carrier_details = carrier_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
