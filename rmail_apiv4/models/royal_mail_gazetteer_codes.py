# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoyalMailGazetteerCodes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'part1': 'str',
        'part2': 'str',
        'part3': 'str',
        'part4': 'str'
    }

    attribute_map = {
        'part1': 'Part1',
        'part2': 'Part2',
        'part3': 'Part3',
        'part4': 'Part4'
    }

    def __init__(self, part1=None, part2=None, part3=None, part4=None):  # noqa: E501
        """RoyalMailGazetteerCodes - a model defined in Swagger"""  # noqa: E501
        self._part1 = None
        self._part2 = None
        self._part3 = None
        self._part4 = None
        self.discriminator = None
        self.part1 = part1
        self.part2 = part2
        if part3 is not None:
            self.part3 = part3
        if part4 is not None:
            self.part4 = part4

    @property
    def part1(self):
        """Gets the part1 of this RoyalMailGazetteerCodes.  # noqa: E501

        First Part of the Gazetteer code.  # noqa: E501

        :return: The part1 of this RoyalMailGazetteerCodes.  # noqa: E501
        :rtype: str
        """
        return self._part1

    @part1.setter
    def part1(self, part1):
        """Sets the part1 of this RoyalMailGazetteerCodes.

        First Part of the Gazetteer code.  # noqa: E501

        :param part1: The part1 of this RoyalMailGazetteerCodes.  # noqa: E501
        :type: str
        """
        if part1 is None:
            raise ValueError("Invalid value for `part1`, must not be `None`")  # noqa: E501

        self._part1 = part1

    @property
    def part2(self):
        """Gets the part2 of this RoyalMailGazetteerCodes.  # noqa: E501

        Second Part of the Gazetteer code.  # noqa: E501

        :return: The part2 of this RoyalMailGazetteerCodes.  # noqa: E501
        :rtype: str
        """
        return self._part2

    @part2.setter
    def part2(self, part2):
        """Sets the part2 of this RoyalMailGazetteerCodes.

        Second Part of the Gazetteer code.  # noqa: E501

        :param part2: The part2 of this RoyalMailGazetteerCodes.  # noqa: E501
        :type: str
        """
        if part2 is None:
            raise ValueError("Invalid value for `part2`, must not be `None`")  # noqa: E501

        self._part2 = part2

    @property
    def part3(self):
        """Gets the part3 of this RoyalMailGazetteerCodes.  # noqa: E501

        Third Part of the Gazetteer code.  # noqa: E501

        :return: The part3 of this RoyalMailGazetteerCodes.  # noqa: E501
        :rtype: str
        """
        return self._part3

    @part3.setter
    def part3(self, part3):
        """Sets the part3 of this RoyalMailGazetteerCodes.

        Third Part of the Gazetteer code.  # noqa: E501

        :param part3: The part3 of this RoyalMailGazetteerCodes.  # noqa: E501
        :type: str
        """

        self._part3 = part3

    @property
    def part4(self):
        """Gets the part4 of this RoyalMailGazetteerCodes.  # noqa: E501

        Fourth Part of the Gazetteer code.  # noqa: E501

        :return: The part4 of this RoyalMailGazetteerCodes.  # noqa: E501
        :rtype: str
        """
        return self._part4

    @part4.setter
    def part4(self, part4):
        """Sets the part4 of this RoyalMailGazetteerCodes.

        Fourth Part of the Gazetteer code.  # noqa: E501

        :param part4: The part4 of this RoyalMailGazetteerCodes.  # noqa: E501
        :type: str
        """

        self._part4 = part4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoyalMailGazetteerCodes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoyalMailGazetteerCodes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
