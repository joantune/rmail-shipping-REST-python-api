# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PreAllocateTrackingNumberRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipping_location_id': 'str',
        'shipping_account_id': 'str',
        'service_code': 'str',
        'service_level': 'str',
        'service_enhancement_code': 'RoyalMailPreAllocatedTrackingNumberEnhancementCode',
        'destination': 'DestinationDetails'
    }

    attribute_map = {
        'shipping_location_id': 'ShippingLocationId',
        'shipping_account_id': 'ShippingAccountId',
        'service_code': 'ServiceCode',
        'service_level': 'ServiceLevel',
        'service_enhancement_code': 'ServiceEnhancementCode',
        'destination': 'Destination'
    }

    def __init__(self, shipping_location_id=None, shipping_account_id=None, service_code=None, service_level=None, service_enhancement_code=None, destination=None):  # noqa: E501
        """PreAllocateTrackingNumberRequest - a model defined in Swagger"""  # noqa: E501
        self._shipping_location_id = None
        self._shipping_account_id = None
        self._service_code = None
        self._service_level = None
        self._service_enhancement_code = None
        self._destination = None
        self.discriminator = None
        if shipping_location_id is not None:
            self.shipping_location_id = shipping_location_id
        self.shipping_account_id = shipping_account_id
        self.service_code = service_code
        if service_level is not None:
            self.service_level = service_level
        if service_enhancement_code is not None:
            self.service_enhancement_code = service_enhancement_code
        if destination is not None:
            self.destination = destination

    @property
    def shipping_location_id(self):
        """Gets the shipping_location_id of this PreAllocateTrackingNumberRequest.  # noqa: E501

        Shipping Location the shipment is being shipped from. This can be populated with either the Shipping Location ID assigned by PRO SHIPPING or the Shipping Location Alias set when the Shipping Location was created. Both can be viewed in the Shipping Location GUI. <br />Mandatory if there is more than one Shipping Location available for the Shipping Account  # noqa: E501

        :return: The shipping_location_id of this PreAllocateTrackingNumberRequest.  # noqa: E501
        :rtype: str
        """
        return self._shipping_location_id

    @shipping_location_id.setter
    def shipping_location_id(self, shipping_location_id):
        """Sets the shipping_location_id of this PreAllocateTrackingNumberRequest.

        Shipping Location the shipment is being shipped from. This can be populated with either the Shipping Location ID assigned by PRO SHIPPING or the Shipping Location Alias set when the Shipping Location was created. Both can be viewed in the Shipping Location GUI. <br />Mandatory if there is more than one Shipping Location available for the Shipping Account  # noqa: E501

        :param shipping_location_id: The shipping_location_id of this PreAllocateTrackingNumberRequest.  # noqa: E501
        :type: str
        """

        self._shipping_location_id = shipping_location_id

    @property
    def shipping_account_id(self):
        """Gets the shipping_account_id of this PreAllocateTrackingNumberRequest.  # noqa: E501

        Shipping Account the shipment is being created for. This can be populated with either the Shipping Account ID assigned by PRO SHIPPING Shipping Account ID or the Shipping Account Alias set when the Shipping Account was created.Both can be viewed in the Shipping Account GUI.  # noqa: E501

        :return: The shipping_account_id of this PreAllocateTrackingNumberRequest.  # noqa: E501
        :rtype: str
        """
        return self._shipping_account_id

    @shipping_account_id.setter
    def shipping_account_id(self, shipping_account_id):
        """Sets the shipping_account_id of this PreAllocateTrackingNumberRequest.

        Shipping Account the shipment is being created for. This can be populated with either the Shipping Account ID assigned by PRO SHIPPING Shipping Account ID or the Shipping Account Alias set when the Shipping Account was created.Both can be viewed in the Shipping Account GUI.  # noqa: E501

        :param shipping_account_id: The shipping_account_id of this PreAllocateTrackingNumberRequest.  # noqa: E501
        :type: str
        """
        if shipping_account_id is None:
            raise ValueError("Invalid value for `shipping_account_id`, must not be `None`")  # noqa: E501

        self._shipping_account_id = shipping_account_id

    @property
    def service_code(self):
        """Gets the service_code of this PreAllocateTrackingNumberRequest.  # noqa: E501

        The code of the shipping service used to deliver the shipment.  # noqa: E501

        :return: The service_code of this PreAllocateTrackingNumberRequest.  # noqa: E501
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this PreAllocateTrackingNumberRequest.

        The code of the shipping service used to deliver the shipment.  # noqa: E501

        :param service_code: The service_code of this PreAllocateTrackingNumberRequest.  # noqa: E501
        :type: str
        """
        if service_code is None:
            raise ValueError("Invalid value for `service_code`, must not be `None`")  # noqa: E501

        self._service_code = service_code

    @property
    def service_level(self):
        """Gets the service_level of this PreAllocateTrackingNumberRequest.  # noqa: E501

        The Royal Mail service level of the service specified in the ServiceCode field. <br />Valid values are 01-99. <br />Defaults to lowest service level available for the specified service if not provided.  # noqa: E501

        :return: The service_level of this PreAllocateTrackingNumberRequest.  # noqa: E501
        :rtype: str
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level):
        """Sets the service_level of this PreAllocateTrackingNumberRequest.

        The Royal Mail service level of the service specified in the ServiceCode field. <br />Valid values are 01-99. <br />Defaults to lowest service level available for the specified service if not provided.  # noqa: E501

        :param service_level: The service_level of this PreAllocateTrackingNumberRequest.  # noqa: E501
        :type: str
        """

        self._service_level = service_level

    @property
    def service_enhancement_code(self):
        """Gets the service_enhancement_code of this PreAllocateTrackingNumberRequest.  # noqa: E501


        :return: The service_enhancement_code of this PreAllocateTrackingNumberRequest.  # noqa: E501
        :rtype: RoyalMailPreAllocatedTrackingNumberEnhancementCode
        """
        return self._service_enhancement_code

    @service_enhancement_code.setter
    def service_enhancement_code(self, service_enhancement_code):
        """Sets the service_enhancement_code of this PreAllocateTrackingNumberRequest.


        :param service_enhancement_code: The service_enhancement_code of this PreAllocateTrackingNumberRequest.  # noqa: E501
        :type: RoyalMailPreAllocatedTrackingNumberEnhancementCode
        """

        self._service_enhancement_code = service_enhancement_code

    @property
    def destination(self):
        """Gets the destination of this PreAllocateTrackingNumberRequest.  # noqa: E501


        :return: The destination of this PreAllocateTrackingNumberRequest.  # noqa: E501
        :rtype: DestinationDetails
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this PreAllocateTrackingNumberRequest.


        :param destination: The destination of this PreAllocateTrackingNumberRequest.  # noqa: E501
        :type: DestinationDetails
        """

        self._destination = destination

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreAllocateTrackingNumberRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreAllocateTrackingNumberRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
