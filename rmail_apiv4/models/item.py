# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Item(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku_code': 'str',
        'package_occurrence': 'int',
        'quantity': 'int',
        'description': 'str',
        'value': 'float',
        'weight': 'float',
        'hs_code': 'str',
        'country_of_origin': 'str'
    }

    attribute_map = {
        'sku_code': 'SkuCode',
        'package_occurrence': 'PackageOccurrence',
        'quantity': 'Quantity',
        'description': 'Description',
        'value': 'Value',
        'weight': 'Weight',
        'hs_code': 'HSCode',
        'country_of_origin': 'CountryOfOrigin'
    }

    def __init__(self, sku_code=None, package_occurrence=None, quantity=None, description=None, value=None, weight=None, hs_code=None, country_of_origin=None):  # noqa: E501
        """Item - a model defined in Swagger"""  # noqa: E501
        self._sku_code = None
        self._package_occurrence = None
        self._quantity = None
        self._description = None
        self._value = None
        self._weight = None
        self._hs_code = None
        self._country_of_origin = None
        self.discriminator = None
        if sku_code is not None:
            self.sku_code = sku_code
        if package_occurrence is not None:
            self.package_occurrence = package_occurrence
        self.quantity = quantity
        if description is not None:
            self.description = description
        if value is not None:
            self.value = value
        if weight is not None:
            self.weight = weight
        if hs_code is not None:
            self.hs_code = hs_code
        if country_of_origin is not None:
            self.country_of_origin = country_of_origin

    @property
    def sku_code(self):
        """Gets the sku_code of this Item.  # noqa: E501

        Stock Keeping Unit number of the item.  # noqa: E501

        :return: The sku_code of this Item.  # noqa: E501
        :rtype: str
        """
        return self._sku_code

    @sku_code.setter
    def sku_code(self, sku_code):
        """Sets the sku_code of this Item.

        Stock Keeping Unit number of the item.  # noqa: E501

        :param sku_code: The sku_code of this Item.  # noqa: E501
        :type: str
        """

        self._sku_code = sku_code

    @property
    def package_occurrence(self):
        """Gets the package_occurrence of this Item.  # noqa: E501

        Used to assign this item to a specific package. <br />The Package Occurrence provided here must exist on one of the packages in the Package element.        <br />Note: For dutiable multi-package shipments that are not using a consignment service, items must be assigned to a package so that accurate customs information is given. <br />Therefore, if the shipment contains more than one package, and it isn't using a consignment service, then Package Occurrence is required.  # noqa: E501

        :return: The package_occurrence of this Item.  # noqa: E501
        :rtype: int
        """
        return self._package_occurrence

    @package_occurrence.setter
    def package_occurrence(self, package_occurrence):
        """Sets the package_occurrence of this Item.

        Used to assign this item to a specific package. <br />The Package Occurrence provided here must exist on one of the packages in the Package element.        <br />Note: For dutiable multi-package shipments that are not using a consignment service, items must be assigned to a package so that accurate customs information is given. <br />Therefore, if the shipment contains more than one package, and it isn't using a consignment service, then Package Occurrence is required.  # noqa: E501

        :param package_occurrence: The package_occurrence of this Item.  # noqa: E501
        :type: int
        """

        self._package_occurrence = package_occurrence

    @property
    def quantity(self):
        """Gets the quantity of this Item.  # noqa: E501

        The quantity of these items in the package.  # noqa: E501

        :return: The quantity of this Item.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item.

        The quantity of these items in the package.  # noqa: E501

        :param quantity: The quantity of this Item.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def description(self):
        """Gets the description of this Item.  # noqa: E501

        Description of the item. This must describe the specific item being shipped rather than the general nature of the goods e.g. 'skirt' instead of 'ladies clothing'.  # noqa: E501

        :return: The description of this Item.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Item.

        Description of the item. This must describe the specific item being shipped rather than the general nature of the goods e.g. 'skirt' instead of 'ladies clothing'.  # noqa: E501

        :param description: The description of this Item.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def value(self):
        """Gets the value of this Item.  # noqa: E501

        The value of a single instance of the item, in the currency provided for the shipment in the CurrencyCode field.  # noqa: E501

        :return: The value of this Item.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Item.

        The value of a single instance of the item, in the currency provided for the shipment in the CurrencyCode field.  # noqa: E501

        :param value: The value of this Item.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def weight(self):
        """Gets the weight of this Item.  # noqa: E501

        The weight of a single instance of the item, in the unit of measure provided in the WeightUnitOfMeasure element (defaults to KG). <br />Required for dutiable shipments.  <br />For non-dutiable shipments, a weight of 0 is accepted. For dutiable shipments, an item weight of 1 gram or greater must be provided.  <br />The maximum weight accepted is 1000 KG.  # noqa: E501

        :return: The weight of this Item.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Item.

        The weight of a single instance of the item, in the unit of measure provided in the WeightUnitOfMeasure element (defaults to KG). <br />Required for dutiable shipments.  <br />For non-dutiable shipments, a weight of 0 is accepted. For dutiable shipments, an item weight of 1 gram or greater must be provided.  <br />The maximum weight accepted is 1000 KG.  # noqa: E501

        :param weight: The weight of this Item.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def hs_code(self):
        """Gets the hs_code of this Item.  # noqa: E501

        The Harmonized Commodity Description and Coding System Code. <br />Used by Customs to calculate potential duties and taxes. <br />May be required for dutiable shipments, depending on the carrier and destination country. <br />The number of characters required for the HS Code may vary depending on the service and destination country. <br />Dots and spaces in the HS Code are accepted. <br />For more information on HS Codes and to find the correct HS Codes for your items, see https://www.gov.uk/trade-tariff  # noqa: E501

        :return: The hs_code of this Item.  # noqa: E501
        :rtype: str
        """
        return self._hs_code

    @hs_code.setter
    def hs_code(self, hs_code):
        """Sets the hs_code of this Item.

        The Harmonized Commodity Description and Coding System Code. <br />Used by Customs to calculate potential duties and taxes. <br />May be required for dutiable shipments, depending on the carrier and destination country. <br />The number of characters required for the HS Code may vary depending on the service and destination country. <br />Dots and spaces in the HS Code are accepted. <br />For more information on HS Codes and to find the correct HS Codes for your items, see https://www.gov.uk/trade-tariff  # noqa: E501

        :param hs_code: The hs_code of this Item.  # noqa: E501
        :type: str
        """

        self._hs_code = hs_code

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this Item.  # noqa: E501

        Country the item was produced/manufactured in.  <br />2 Digit ISO Country Code, per ISO 3166 Standard. <br />May be required on dutiable shipments, depending on the carrier and destination country.  # noqa: E501

        :return: The country_of_origin of this Item.  # noqa: E501
        :rtype: str
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this Item.

        Country the item was produced/manufactured in.  <br />2 Digit ISO Country Code, per ISO 3166 Standard. <br />May be required on dutiable shipments, depending on the carrier and destination country.  # noqa: E501

        :param country_of_origin: The country_of_origin of this Item.  # noqa: E501
        :type: str
        """

        self._country_of_origin = country_of_origin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Item, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
