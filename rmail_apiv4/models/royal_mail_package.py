# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoyalMailPackage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_occurrence': 'int',
        'package_type': 'RoyalMailPackageTypeCode',
        'declared_weight': 'float',
        'declared_value': 'float',
        'dimensions': 'Dimensions'
    }

    attribute_map = {
        'package_occurrence': 'PackageOccurrence',
        'package_type': 'PackageType',
        'declared_weight': 'DeclaredWeight',
        'declared_value': 'DeclaredValue',
        'dimensions': 'Dimensions'
    }

    def __init__(self, package_occurrence=None, package_type=None, declared_weight=None, declared_value=None, dimensions=None):  # noqa: E501
        """RoyalMailPackage - a model defined in Swagger"""  # noqa: E501
        self._package_occurrence = None
        self._package_type = None
        self._declared_weight = None
        self._declared_value = None
        self._dimensions = None
        self.discriminator = None
        if package_occurrence is not None:
            self.package_occurrence = package_occurrence
        if package_type is not None:
            self.package_type = package_type
        if declared_weight is not None:
            self.declared_weight = declared_weight
        if declared_value is not None:
            self.declared_value = declared_value
        if dimensions is not None:
            self.dimensions = dimensions

    @property
    def package_occurrence(self):
        """Gets the package_occurrence of this RoyalMailPackage.  # noqa: E501

        Used to match a returned Package ID to this package. <br />Can also be used to assign items to this package. <br />If provided, each package occurrence must be unique. <br />Note: For dutiable multi-package shipments that are not using a consignment service, items must be assigned to a package so that accurate customs information is given. <br />Therefore, if the shipment contains more than one package, and it isn't using a consignment service, then Package Occurrence is required.  # noqa: E501

        :return: The package_occurrence of this RoyalMailPackage.  # noqa: E501
        :rtype: int
        """
        return self._package_occurrence

    @package_occurrence.setter
    def package_occurrence(self, package_occurrence):
        """Sets the package_occurrence of this RoyalMailPackage.

        Used to match a returned Package ID to this package. <br />Can also be used to assign items to this package. <br />If provided, each package occurrence must be unique. <br />Note: For dutiable multi-package shipments that are not using a consignment service, items must be assigned to a package so that accurate customs information is given. <br />Therefore, if the shipment contains more than one package, and it isn't using a consignment service, then Package Occurrence is required.  # noqa: E501

        :param package_occurrence: The package_occurrence of this RoyalMailPackage.  # noqa: E501
        :type: int
        """

        self._package_occurrence = package_occurrence

    @property
    def package_type(self):
        """Gets the package_type of this RoyalMailPackage.  # noqa: E501


        :return: The package_type of this RoyalMailPackage.  # noqa: E501
        :rtype: RoyalMailPackageTypeCode
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this RoyalMailPackage.


        :param package_type: The package_type of this RoyalMailPackage.  # noqa: E501
        :type: RoyalMailPackageTypeCode
        """

        self._package_type = package_type

    @property
    def declared_weight(self):
        """Gets the declared_weight of this RoyalMailPackage.  # noqa: E501

        The total weight of this package in the unit of measure specified by WeightUnitOfMeasure (defaults to KG). <br />The minimum weight allowed is 1 gram. <br />The maximum weight is dependent on the carrier / service / destination. <br />Mandatory for shipments using non-consignment services.  # noqa: E501

        :return: The declared_weight of this RoyalMailPackage.  # noqa: E501
        :rtype: float
        """
        return self._declared_weight

    @declared_weight.setter
    def declared_weight(self, declared_weight):
        """Sets the declared_weight of this RoyalMailPackage.

        The total weight of this package in the unit of measure specified by WeightUnitOfMeasure (defaults to KG). <br />The minimum weight allowed is 1 gram. <br />The maximum weight is dependent on the carrier / service / destination. <br />Mandatory for shipments using non-consignment services.  # noqa: E501

        :param declared_weight: The declared_weight of this RoyalMailPackage.  # noqa: E501
        :type: float
        """

        self._declared_weight = declared_weight

    @property
    def declared_value(self):
        """Gets the declared_value of this RoyalMailPackage.  # noqa: E501

        The declared value of the total package in the currency specified. <br />If provided, the value must be equal or greater than the sum of all item values assigned to this package. <br />If not provided it defaults to the sum of all item values. <br />Used for shipment using non-consignment services, but not mandatory.  # noqa: E501

        :return: The declared_value of this RoyalMailPackage.  # noqa: E501
        :rtype: float
        """
        return self._declared_value

    @declared_value.setter
    def declared_value(self, declared_value):
        """Sets the declared_value of this RoyalMailPackage.

        The declared value of the total package in the currency specified. <br />If provided, the value must be equal or greater than the sum of all item values assigned to this package. <br />If not provided it defaults to the sum of all item values. <br />Used for shipment using non-consignment services, but not mandatory.  # noqa: E501

        :param declared_value: The declared_value of this RoyalMailPackage.  # noqa: E501
        :type: float
        """

        self._declared_value = declared_value

    @property
    def dimensions(self):
        """Gets the dimensions of this RoyalMailPackage.  # noqa: E501


        :return: The dimensions of this RoyalMailPackage.  # noqa: E501
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this RoyalMailPackage.


        :param dimensions: The dimensions of this RoyalMailPackage.  # noqa: E501
        :type: Dimensions
        """

        self._dimensions = dimensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoyalMailPackage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoyalMailPackage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
