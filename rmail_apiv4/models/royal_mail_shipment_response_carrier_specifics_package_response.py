# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoyalMailShipmentResponseCarrierSpecificsPackageResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_occurrence': 'int',
        'tracking_number': 'str',
        'carrier_tracking_url': 'str',
        'carrier_details': 'RoyalMailShipmentResponseCarrierSpecifics',
        'shipment_id': 'str'
    }

    attribute_map = {
        'package_occurrence': 'PackageOccurrence',
        'tracking_number': 'TrackingNumber',
        'carrier_tracking_url': 'CarrierTrackingUrl',
        'carrier_details': 'CarrierDetails',
        'shipment_id': 'ShipmentId'
    }

    def __init__(self, package_occurrence=None, tracking_number=None, carrier_tracking_url=None, carrier_details=None, shipment_id=None):  # noqa: E501
        """RoyalMailShipmentResponseCarrierSpecificsPackageResponse - a model defined in Swagger"""  # noqa: E501
        self._package_occurrence = None
        self._tracking_number = None
        self._carrier_tracking_url = None
        self._carrier_details = None
        self._shipment_id = None
        self.discriminator = None
        if package_occurrence is not None:
            self.package_occurrence = package_occurrence
        if tracking_number is not None:
            self.tracking_number = tracking_number
        if carrier_tracking_url is not None:
            self.carrier_tracking_url = carrier_tracking_url
        if carrier_details is not None:
            self.carrier_details = carrier_details
        if shipment_id is not None:
            self.shipment_id = shipment_id

    @property
    def package_occurrence(self):
        """Gets the package_occurrence of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501

        Package Occurrence <br />The package occurrence you gave to the package, or if not provided, the default package occurrence.  # noqa: E501

        :return: The package_occurrence of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501
        :rtype: int
        """
        return self._package_occurrence

    @package_occurrence.setter
    def package_occurrence(self, package_occurrence):
        """Sets the package_occurrence of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.

        Package Occurrence <br />The package occurrence you gave to the package, or if not provided, the default package occurrence.  # noqa: E501

        :param package_occurrence: The package_occurrence of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501
        :type: int
        """

        self._package_occurrence = package_occurrence

    @property
    def tracking_number(self):
        """Gets the tracking_number of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501

        Tracking Number <br />The tracking number for this package occurrence.  # noqa: E501

        :return: The tracking_number of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.

        Tracking Number <br />The tracking number for this package occurrence.  # noqa: E501

        :param tracking_number: The tracking_number of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501
        :type: str
        """

        self._tracking_number = tracking_number

    @property
    def carrier_tracking_url(self):
        """Gets the carrier_tracking_url of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501

        Tracking URL <br />The carrier's tracking URL. <br />Only present if available.  # noqa: E501

        :return: The carrier_tracking_url of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._carrier_tracking_url

    @carrier_tracking_url.setter
    def carrier_tracking_url(self, carrier_tracking_url):
        """Sets the carrier_tracking_url of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.

        Tracking URL <br />The carrier's tracking URL. <br />Only present if available.  # noqa: E501

        :param carrier_tracking_url: The carrier_tracking_url of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501
        :type: str
        """

        self._carrier_tracking_url = carrier_tracking_url

    @property
    def carrier_details(self):
        """Gets the carrier_details of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501


        :return: The carrier_details of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501
        :rtype: RoyalMailShipmentResponseCarrierSpecifics
        """
        return self._carrier_details

    @carrier_details.setter
    def carrier_details(self, carrier_details):
        """Sets the carrier_details of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.


        :param carrier_details: The carrier_details of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501
        :type: RoyalMailShipmentResponseCarrierSpecifics
        """

        self._carrier_details = carrier_details

    @property
    def shipment_id(self):
        """Gets the shipment_id of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501

        Shipment Id <br />Only populated if the service is a non-consignment service.  # noqa: E501

        :return: The shipment_id of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.

        Shipment Id <br />Only populated if the service is a non-consignment service.  # noqa: E501

        :param shipment_id: The shipment_id of this RoyalMailShipmentResponseCarrierSpecificsPackageResponse.  # noqa: E501
        :type: str
        """

        self._shipment_id = shipment_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoyalMailShipmentResponseCarrierSpecificsPackageResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoyalMailShipmentResponseCarrierSpecificsPackageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
