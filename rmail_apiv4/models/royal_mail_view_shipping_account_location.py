# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoyalMailViewShippingAccountLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'receiving_hub_description': 'str',
        'account_location_status': 'RoyalMailAccountLocationStatus',
        'posting_location_code': 'str',
        'oba_access_code': 'str',
        'receiving_hub_code': 'str'
    }

    attribute_map = {
        'receiving_hub_description': 'ReceivingHubDescription',
        'account_location_status': 'AccountLocationStatus',
        'posting_location_code': 'PostingLocationCode',
        'oba_access_code': 'ObaAccessCode',
        'receiving_hub_code': 'ReceivingHubCode'
    }

    def __init__(self, receiving_hub_description=None, account_location_status=None, posting_location_code=None, oba_access_code=None, receiving_hub_code=None):  # noqa: E501
        """RoyalMailViewShippingAccountLocation - a model defined in Swagger"""  # noqa: E501
        self._receiving_hub_description = None
        self._account_location_status = None
        self._posting_location_code = None
        self._oba_access_code = None
        self._receiving_hub_code = None
        self.discriminator = None
        self.receiving_hub_description = receiving_hub_description
        if account_location_status is not None:
            self.account_location_status = account_location_status
        self.posting_location_code = posting_location_code
        if oba_access_code is not None:
            self.oba_access_code = oba_access_code
        self.receiving_hub_code = receiving_hub_code

    @property
    def receiving_hub_description(self):
        """Gets the receiving_hub_description of this RoyalMailViewShippingAccountLocation.  # noqa: E501

        Receiving Hub Description <br />The name and postcodes covered by the Receiving Hub as per the Gazetteer file.  # noqa: E501

        :return: The receiving_hub_description of this RoyalMailViewShippingAccountLocation.  # noqa: E501
        :rtype: str
        """
        return self._receiving_hub_description

    @receiving_hub_description.setter
    def receiving_hub_description(self, receiving_hub_description):
        """Sets the receiving_hub_description of this RoyalMailViewShippingAccountLocation.

        Receiving Hub Description <br />The name and postcodes covered by the Receiving Hub as per the Gazetteer file.  # noqa: E501

        :param receiving_hub_description: The receiving_hub_description of this RoyalMailViewShippingAccountLocation.  # noqa: E501
        :type: str
        """
        if receiving_hub_description is None:
            raise ValueError("Invalid value for `receiving_hub_description`, must not be `None`")  # noqa: E501

        self._receiving_hub_description = receiving_hub_description

    @property
    def account_location_status(self):
        """Gets the account_location_status of this RoyalMailViewShippingAccountLocation.  # noqa: E501


        :return: The account_location_status of this RoyalMailViewShippingAccountLocation.  # noqa: E501
        :rtype: RoyalMailAccountLocationStatus
        """
        return self._account_location_status

    @account_location_status.setter
    def account_location_status(self, account_location_status):
        """Sets the account_location_status of this RoyalMailViewShippingAccountLocation.


        :param account_location_status: The account_location_status of this RoyalMailViewShippingAccountLocation.  # noqa: E501
        :type: RoyalMailAccountLocationStatus
        """

        self._account_location_status = account_location_status

    @property
    def posting_location_code(self):
        """Gets the posting_location_code of this RoyalMailViewShippingAccountLocation.  # noqa: E501

        Posting Location Code <br />The number assigned to this Location by Royal Mail.  # noqa: E501

        :return: The posting_location_code of this RoyalMailViewShippingAccountLocation.  # noqa: E501
        :rtype: str
        """
        return self._posting_location_code

    @posting_location_code.setter
    def posting_location_code(self, posting_location_code):
        """Sets the posting_location_code of this RoyalMailViewShippingAccountLocation.

        Posting Location Code <br />The number assigned to this Location by Royal Mail.  # noqa: E501

        :param posting_location_code: The posting_location_code of this RoyalMailViewShippingAccountLocation.  # noqa: E501
        :type: str
        """
        if posting_location_code is None:
            raise ValueError("Invalid value for `posting_location_code`, must not be `None`")  # noqa: E501

        self._posting_location_code = posting_location_code

    @property
    def oba_access_code(self):
        """Gets the oba_access_code of this RoyalMailViewShippingAccountLocation.  # noqa: E501

        OBA Access Code <br />A password for the account to access the OBA services. <br />A Royal Mail shipping account cannot be active unless the OBA Access code has been provided.  # noqa: E501

        :return: The oba_access_code of this RoyalMailViewShippingAccountLocation.  # noqa: E501
        :rtype: str
        """
        return self._oba_access_code

    @oba_access_code.setter
    def oba_access_code(self, oba_access_code):
        """Sets the oba_access_code of this RoyalMailViewShippingAccountLocation.

        OBA Access Code <br />A password for the account to access the OBA services. <br />A Royal Mail shipping account cannot be active unless the OBA Access code has been provided.  # noqa: E501

        :param oba_access_code: The oba_access_code of this RoyalMailViewShippingAccountLocation.  # noqa: E501
        :type: str
        """

        self._oba_access_code = oba_access_code

    @property
    def receiving_hub_code(self):
        """Gets the receiving_hub_code of this RoyalMailViewShippingAccountLocation.  # noqa: E501

        Receiving Hub Code <br />Receiving Hub/Regional Distribution Center used for this Shipping Location. <br />Must be an existing receiving hub code. <br />Please refer to Royal Mail ReceivingHubs for a list of possible receiving hubs.  # noqa: E501

        :return: The receiving_hub_code of this RoyalMailViewShippingAccountLocation.  # noqa: E501
        :rtype: str
        """
        return self._receiving_hub_code

    @receiving_hub_code.setter
    def receiving_hub_code(self, receiving_hub_code):
        """Sets the receiving_hub_code of this RoyalMailViewShippingAccountLocation.

        Receiving Hub Code <br />Receiving Hub/Regional Distribution Center used for this Shipping Location. <br />Must be an existing receiving hub code. <br />Please refer to Royal Mail ReceivingHubs for a list of possible receiving hubs.  # noqa: E501

        :param receiving_hub_code: The receiving_hub_code of this RoyalMailViewShippingAccountLocation.  # noqa: E501
        :type: str
        """
        if receiving_hub_code is None:
            raise ValueError("Invalid value for `receiving_hub_code`, must not be `None`")  # noqa: E501

        self._receiving_hub_code = receiving_hub_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoyalMailViewShippingAccountLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoyalMailViewShippingAccountLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
