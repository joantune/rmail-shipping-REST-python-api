# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoyalMailDataStreamDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary2_d_barcode_image': 'str',
        'primary2_d_barcode_data': 'str',
        'formatted_unique_id': 'str',
        'gazetteer_codes': 'RoyalMailGazetteerCodes',
        'primary1_d_barcode_image': 'str',
        'primary1_d_barcode_data': 'str',
        'high_volume_barcode_image': 'str',
        'high_volume_barcode_data': 'str'
    }

    attribute_map = {
        'primary2_d_barcode_image': 'Primary2DBarcodeImage',
        'primary2_d_barcode_data': 'Primary2DBarcodeData',
        'formatted_unique_id': 'FormattedUniqueId',
        'gazetteer_codes': 'GazetteerCodes',
        'primary1_d_barcode_image': 'Primary1DBarcodeImage',
        'primary1_d_barcode_data': 'Primary1DBarcodeData',
        'high_volume_barcode_image': 'HighVolumeBarcodeImage',
        'high_volume_barcode_data': 'HighVolumeBarcodeData'
    }

    def __init__(self, primary2_d_barcode_image=None, primary2_d_barcode_data=None, formatted_unique_id=None, gazetteer_codes=None, primary1_d_barcode_image=None, primary1_d_barcode_data=None, high_volume_barcode_image=None, high_volume_barcode_data=None):  # noqa: E501
        """RoyalMailDataStreamDetails - a model defined in Swagger"""  # noqa: E501
        self._primary2_d_barcode_image = None
        self._primary2_d_barcode_data = None
        self._formatted_unique_id = None
        self._gazetteer_codes = None
        self._primary1_d_barcode_image = None
        self._primary1_d_barcode_data = None
        self._high_volume_barcode_image = None
        self._high_volume_barcode_data = None
        self.discriminator = None
        self.primary2_d_barcode_image = primary2_d_barcode_image
        self.primary2_d_barcode_data = primary2_d_barcode_data
        self.formatted_unique_id = formatted_unique_id
        if gazetteer_codes is not None:
            self.gazetteer_codes = gazetteer_codes
        if primary1_d_barcode_image is not None:
            self.primary1_d_barcode_image = primary1_d_barcode_image
        if primary1_d_barcode_data is not None:
            self.primary1_d_barcode_data = primary1_d_barcode_data
        if high_volume_barcode_image is not None:
            self.high_volume_barcode_image = high_volume_barcode_image
        if high_volume_barcode_data is not None:
            self.high_volume_barcode_data = high_volume_barcode_data

    @property
    def primary2_d_barcode_image(self):
        """Gets the primary2_d_barcode_image of this RoyalMailDataStreamDetails.  # noqa: E501

        Primary 2D Barcode Image <br />Base64 Encoded PNG Image of the 2D data matrix barcode.  # noqa: E501

        :return: The primary2_d_barcode_image of this RoyalMailDataStreamDetails.  # noqa: E501
        :rtype: str
        """
        return self._primary2_d_barcode_image

    @primary2_d_barcode_image.setter
    def primary2_d_barcode_image(self, primary2_d_barcode_image):
        """Sets the primary2_d_barcode_image of this RoyalMailDataStreamDetails.

        Primary 2D Barcode Image <br />Base64 Encoded PNG Image of the 2D data matrix barcode.  # noqa: E501

        :param primary2_d_barcode_image: The primary2_d_barcode_image of this RoyalMailDataStreamDetails.  # noqa: E501
        :type: str
        """
        if primary2_d_barcode_image is None:
            raise ValueError("Invalid value for `primary2_d_barcode_image`, must not be `None`")  # noqa: E501

        self._primary2_d_barcode_image = primary2_d_barcode_image

    @property
    def primary2_d_barcode_data(self):
        """Gets the primary2_d_barcode_data of this RoyalMailDataStreamDetails.  # noqa: E501

        Primary 2D Barcode Data - Base 64 Encoded <br />Data required to create your own 2D data matrix barcode. Please decode before use.  # noqa: E501

        :return: The primary2_d_barcode_data of this RoyalMailDataStreamDetails.  # noqa: E501
        :rtype: str
        """
        return self._primary2_d_barcode_data

    @primary2_d_barcode_data.setter
    def primary2_d_barcode_data(self, primary2_d_barcode_data):
        """Sets the primary2_d_barcode_data of this RoyalMailDataStreamDetails.

        Primary 2D Barcode Data - Base 64 Encoded <br />Data required to create your own 2D data matrix barcode. Please decode before use.  # noqa: E501

        :param primary2_d_barcode_data: The primary2_d_barcode_data of this RoyalMailDataStreamDetails.  # noqa: E501
        :type: str
        """
        if primary2_d_barcode_data is None:
            raise ValueError("Invalid value for `primary2_d_barcode_data`, must not be `None`")  # noqa: E501

        self._primary2_d_barcode_data = primary2_d_barcode_data

    @property
    def formatted_unique_id(self):
        """Gets the formatted_unique_id of this RoyalMailDataStreamDetails.  # noqa: E501

        Formatted Unique Id <br />Label for 2D data matrix barcode.  # noqa: E501

        :return: The formatted_unique_id of this RoyalMailDataStreamDetails.  # noqa: E501
        :rtype: str
        """
        return self._formatted_unique_id

    @formatted_unique_id.setter
    def formatted_unique_id(self, formatted_unique_id):
        """Sets the formatted_unique_id of this RoyalMailDataStreamDetails.

        Formatted Unique Id <br />Label for 2D data matrix barcode.  # noqa: E501

        :param formatted_unique_id: The formatted_unique_id of this RoyalMailDataStreamDetails.  # noqa: E501
        :type: str
        """
        if formatted_unique_id is None:
            raise ValueError("Invalid value for `formatted_unique_id`, must not be `None`")  # noqa: E501

        self._formatted_unique_id = formatted_unique_id

    @property
    def gazetteer_codes(self):
        """Gets the gazetteer_codes of this RoyalMailDataStreamDetails.  # noqa: E501


        :return: The gazetteer_codes of this RoyalMailDataStreamDetails.  # noqa: E501
        :rtype: RoyalMailGazetteerCodes
        """
        return self._gazetteer_codes

    @gazetteer_codes.setter
    def gazetteer_codes(self, gazetteer_codes):
        """Sets the gazetteer_codes of this RoyalMailDataStreamDetails.


        :param gazetteer_codes: The gazetteer_codes of this RoyalMailDataStreamDetails.  # noqa: E501
        :type: RoyalMailGazetteerCodes
        """

        self._gazetteer_codes = gazetteer_codes

    @property
    def primary1_d_barcode_image(self):
        """Gets the primary1_d_barcode_image of this RoyalMailDataStreamDetails.  # noqa: E501

        Primary 1D Barcode Image <br />Only populated where the service requires the barcode on the label. <br />Base64 Encoded PNG Image of the barcode.  # noqa: E501

        :return: The primary1_d_barcode_image of this RoyalMailDataStreamDetails.  # noqa: E501
        :rtype: str
        """
        return self._primary1_d_barcode_image

    @primary1_d_barcode_image.setter
    def primary1_d_barcode_image(self, primary1_d_barcode_image):
        """Sets the primary1_d_barcode_image of this RoyalMailDataStreamDetails.

        Primary 1D Barcode Image <br />Only populated where the service requires the barcode on the label. <br />Base64 Encoded PNG Image of the barcode.  # noqa: E501

        :param primary1_d_barcode_image: The primary1_d_barcode_image of this RoyalMailDataStreamDetails.  # noqa: E501
        :type: str
        """

        self._primary1_d_barcode_image = primary1_d_barcode_image

    @property
    def primary1_d_barcode_data(self):
        """Gets the primary1_d_barcode_data of this RoyalMailDataStreamDetails.  # noqa: E501

        Primary 1D Barcode Data <br />Only populated where the service requires the barcode on the label. <br />Data required to create your own barcode.  # noqa: E501

        :return: The primary1_d_barcode_data of this RoyalMailDataStreamDetails.  # noqa: E501
        :rtype: str
        """
        return self._primary1_d_barcode_data

    @primary1_d_barcode_data.setter
    def primary1_d_barcode_data(self, primary1_d_barcode_data):
        """Sets the primary1_d_barcode_data of this RoyalMailDataStreamDetails.

        Primary 1D Barcode Data <br />Only populated where the service requires the barcode on the label. <br />Data required to create your own barcode.  # noqa: E501

        :param primary1_d_barcode_data: The primary1_d_barcode_data of this RoyalMailDataStreamDetails.  # noqa: E501
        :type: str
        """

        self._primary1_d_barcode_data = primary1_d_barcode_data

    @property
    def high_volume_barcode_image(self):
        """Gets the high_volume_barcode_image of this RoyalMailDataStreamDetails.  # noqa: E501

        High Volume Barcode Image <br />Only populated where the service (Tracked High Volume) requires the barcode on the label. <br />Base64 Encoded PNG Image of the barcode.  # noqa: E501

        :return: The high_volume_barcode_image of this RoyalMailDataStreamDetails.  # noqa: E501
        :rtype: str
        """
        return self._high_volume_barcode_image

    @high_volume_barcode_image.setter
    def high_volume_barcode_image(self, high_volume_barcode_image):
        """Sets the high_volume_barcode_image of this RoyalMailDataStreamDetails.

        High Volume Barcode Image <br />Only populated where the service (Tracked High Volume) requires the barcode on the label. <br />Base64 Encoded PNG Image of the barcode.  # noqa: E501

        :param high_volume_barcode_image: The high_volume_barcode_image of this RoyalMailDataStreamDetails.  # noqa: E501
        :type: str
        """

        self._high_volume_barcode_image = high_volume_barcode_image

    @property
    def high_volume_barcode_data(self):
        """Gets the high_volume_barcode_data of this RoyalMailDataStreamDetails.  # noqa: E501

        High Volume Barcode Data <br />Only populated where the service (Tracked High Volume) requires the barcode on the label. <br />Data required to create your own barcode.  # noqa: E501

        :return: The high_volume_barcode_data of this RoyalMailDataStreamDetails.  # noqa: E501
        :rtype: str
        """
        return self._high_volume_barcode_data

    @high_volume_barcode_data.setter
    def high_volume_barcode_data(self, high_volume_barcode_data):
        """Sets the high_volume_barcode_data of this RoyalMailDataStreamDetails.

        High Volume Barcode Data <br />Only populated where the service (Tracked High Volume) requires the barcode on the label. <br />Data required to create your own barcode.  # noqa: E501

        :param high_volume_barcode_data: The high_volume_barcode_data of this RoyalMailDataStreamDetails.  # noqa: E501
        :type: str
        """

        self._high_volume_barcode_data = high_volume_barcode_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoyalMailDataStreamDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoyalMailDataStreamDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
