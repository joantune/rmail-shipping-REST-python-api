# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoyalMailShipmentRequestCarrierSpecifics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_level': 'str',
        'ebay_vtn': 'str',
        'service_enhancements': 'list[RoyalMailServiceEnhancement]',
        'offline_barcode': 'RoyalMailOfflineBarcode',
        'pre_allocated_tracking_number': 'str'
    }

    attribute_map = {
        'service_level': 'ServiceLevel',
        'ebay_vtn': 'EbayVtn',
        'service_enhancements': 'ServiceEnhancements',
        'offline_barcode': 'OfflineBarcode',
        'pre_allocated_tracking_number': 'PreAllocatedTrackingNumber'
    }

    def __init__(self, service_level=None, ebay_vtn=None, service_enhancements=None, offline_barcode=None, pre_allocated_tracking_number=None):  # noqa: E501
        """RoyalMailShipmentRequestCarrierSpecifics - a model defined in Swagger"""  # noqa: E501
        self._service_level = None
        self._ebay_vtn = None
        self._service_enhancements = None
        self._offline_barcode = None
        self._pre_allocated_tracking_number = None
        self.discriminator = None
        if service_level is not None:
            self.service_level = service_level
        if ebay_vtn is not None:
            self.ebay_vtn = ebay_vtn
        if service_enhancements is not None:
            self.service_enhancements = service_enhancements
        if offline_barcode is not None:
            self.offline_barcode = offline_barcode
        if pre_allocated_tracking_number is not None:
            self.pre_allocated_tracking_number = pre_allocated_tracking_number

    @property
    def service_level(self):
        """Gets the service_level of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501

        The Royal Mail service level of the service specified in the ServiceCode field.  <br />Valid values are 01-99. <br />Defaults to lowest service level available for the specified service if not provided.  # noqa: E501

        :return: The service_level of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501
        :rtype: str
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level):
        """Sets the service_level of this RoyalMailShipmentRequestCarrierSpecifics.

        The Royal Mail service level of the service specified in the ServiceCode field.  <br />Valid values are 01-99. <br />Defaults to lowest service level available for the specified service if not provided.  # noqa: E501

        :param service_level: The service_level of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501
        :type: str
        """

        self._service_level = service_level

    @property
    def ebay_vtn(self):
        """Gets the ebay_vtn of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501

        The eBay Virtual Tracking Number. This should be provided for all shipments that relate to orders created on eBay, so that the shipment tracking data can be made available on eBay.  # noqa: E501

        :return: The ebay_vtn of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501
        :rtype: str
        """
        return self._ebay_vtn

    @ebay_vtn.setter
    def ebay_vtn(self, ebay_vtn):
        """Sets the ebay_vtn of this RoyalMailShipmentRequestCarrierSpecifics.

        The eBay Virtual Tracking Number. This should be provided for all shipments that relate to orders created on eBay, so that the shipment tracking data can be made available on eBay.  # noqa: E501

        :param ebay_vtn: The ebay_vtn of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501
        :type: str
        """

        self._ebay_vtn = ebay_vtn

    @property
    def service_enhancements(self):
        """Gets the service_enhancements of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501

        Service Enhancements <br />Any enhancements that you would like to add to the requested service. <br />A maximum of 4 service enhancements can be used per shipment.  # noqa: E501

        :return: The service_enhancements of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501
        :rtype: list[RoyalMailServiceEnhancement]
        """
        return self._service_enhancements

    @service_enhancements.setter
    def service_enhancements(self, service_enhancements):
        """Sets the service_enhancements of this RoyalMailShipmentRequestCarrierSpecifics.

        Service Enhancements <br />Any enhancements that you would like to add to the requested service. <br />A maximum of 4 service enhancements can be used per shipment.  # noqa: E501

        :param service_enhancements: The service_enhancements of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501
        :type: list[RoyalMailServiceEnhancement]
        """

        self._service_enhancements = service_enhancements

    @property
    def offline_barcode(self):
        """Gets the offline_barcode of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501


        :return: The offline_barcode of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501
        :rtype: RoyalMailOfflineBarcode
        """
        return self._offline_barcode

    @offline_barcode.setter
    def offline_barcode(self, offline_barcode):
        """Sets the offline_barcode of this RoyalMailShipmentRequestCarrierSpecifics.


        :param offline_barcode: The offline_barcode of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501
        :type: RoyalMailOfflineBarcode
        """

        self._offline_barcode = offline_barcode

    @property
    def pre_allocated_tracking_number(self):
        """Gets the pre_allocated_tracking_number of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501

        The pre-allocated tracking number to use for the shipment. Shipping Account, Shipping Location, Service Code, Destination Country and Postcode where required for the Country of Destination must match the one sent when the pre-allocation barcode was requested.  # noqa: E501

        :return: The pre_allocated_tracking_number of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501
        :rtype: str
        """
        return self._pre_allocated_tracking_number

    @pre_allocated_tracking_number.setter
    def pre_allocated_tracking_number(self, pre_allocated_tracking_number):
        """Sets the pre_allocated_tracking_number of this RoyalMailShipmentRequestCarrierSpecifics.

        The pre-allocated tracking number to use for the shipment. Shipping Account, Shipping Location, Service Code, Destination Country and Postcode where required for the Country of Destination must match the one sent when the pre-allocation barcode was requested.  # noqa: E501

        :param pre_allocated_tracking_number: The pre_allocated_tracking_number of this RoyalMailShipmentRequestCarrierSpecifics.  # noqa: E501
        :type: str
        """

        self._pre_allocated_tracking_number = pre_allocated_tracking_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoyalMailShipmentRequestCarrierSpecifics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoyalMailShipmentRequestCarrierSpecifics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
