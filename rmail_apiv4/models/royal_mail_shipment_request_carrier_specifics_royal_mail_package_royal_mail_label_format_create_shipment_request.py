# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipment_information': 'RoyalMailLabelFormatShipmentInformation',
        'shipper': 'Shipper',
        'destination': 'Destination',
        'carrier_specifics': 'RoyalMailShipmentRequestCarrierSpecifics',
        'packages': 'list[RoyalMailPackage]',
        'items': 'list[Item]',
        'customs': 'Customs',
        'return_to_sender': 'ReturnToSender'
    }

    attribute_map = {
        'shipment_information': 'ShipmentInformation',
        'shipper': 'Shipper',
        'destination': 'Destination',
        'carrier_specifics': 'CarrierSpecifics',
        'packages': 'Packages',
        'items': 'Items',
        'customs': 'Customs',
        'return_to_sender': 'ReturnToSender'
    }

    def __init__(self, shipment_information=None, shipper=None, destination=None, carrier_specifics=None, packages=None, items=None, customs=None, return_to_sender=None):  # noqa: E501
        """RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest - a model defined in Swagger"""  # noqa: E501
        self._shipment_information = None
        self._shipper = None
        self._destination = None
        self._carrier_specifics = None
        self._packages = None
        self._items = None
        self._customs = None
        self._return_to_sender = None
        self.discriminator = None
        self.shipment_information = shipment_information
        self.shipper = shipper
        self.destination = destination
        if carrier_specifics is not None:
            self.carrier_specifics = carrier_specifics
        self.packages = packages
        if items is not None:
            self.items = items
        if customs is not None:
            self.customs = customs
        if return_to_sender is not None:
            self.return_to_sender = return_to_sender

    @property
    def shipment_information(self):
        """Gets the shipment_information of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501


        :return: The shipment_information of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :rtype: RoyalMailLabelFormatShipmentInformation
        """
        return self._shipment_information

    @shipment_information.setter
    def shipment_information(self, shipment_information):
        """Sets the shipment_information of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.


        :param shipment_information: The shipment_information of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :type: RoyalMailLabelFormatShipmentInformation
        """
        if shipment_information is None:
            raise ValueError("Invalid value for `shipment_information`, must not be `None`")  # noqa: E501

        self._shipment_information = shipment_information

    @property
    def shipper(self):
        """Gets the shipper of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501


        :return: The shipper of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :rtype: Shipper
        """
        return self._shipper

    @shipper.setter
    def shipper(self, shipper):
        """Sets the shipper of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.


        :param shipper: The shipper of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :type: Shipper
        """
        if shipper is None:
            raise ValueError("Invalid value for `shipper`, must not be `None`")  # noqa: E501

        self._shipper = shipper

    @property
    def destination(self):
        """Gets the destination of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501


        :return: The destination of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :rtype: Destination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.


        :param destination: The destination of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :type: Destination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def carrier_specifics(self):
        """Gets the carrier_specifics of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501


        :return: The carrier_specifics of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :rtype: RoyalMailShipmentRequestCarrierSpecifics
        """
        return self._carrier_specifics

    @carrier_specifics.setter
    def carrier_specifics(self, carrier_specifics):
        """Sets the carrier_specifics of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.


        :param carrier_specifics: The carrier_specifics of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :type: RoyalMailShipmentRequestCarrierSpecifics
        """

        self._carrier_specifics = carrier_specifics

    @property
    def packages(self):
        """Gets the packages of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501

        Shipment Packages <br />The packages that are being sent in this shipment. <br />There must be at least 1 package. <br />A maximum of 99 packages is allowed.  # noqa: E501

        :return: The packages of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :rtype: list[RoyalMailPackage]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.

        Shipment Packages <br />The packages that are being sent in this shipment. <br />There must be at least 1 package. <br />A maximum of 99 packages is allowed.  # noqa: E501

        :param packages: The packages of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :type: list[RoyalMailPackage]
        """
        if packages is None:
            raise ValueError("Invalid value for `packages`, must not be `None`")  # noqa: E501

        self._packages = packages

    @property
    def items(self):
        """Gets the items of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501

        Shipment Items <br />The items contained in the shipment, i.e. the goods/products being shipped  <br />Item information is required for dutiable shipments for customs purposes. <br />Non-Dutiable shipments and 'Documents Only' (DOX) shipments do not require item information. <br />If Item Verification check on shipment creation is enabled, the maximum number of distinct items that will be verified in one shipment is 15.  # noqa: E501

        :return: The items of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :rtype: list[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.

        Shipment Items <br />The items contained in the shipment, i.e. the goods/products being shipped  <br />Item information is required for dutiable shipments for customs purposes. <br />Non-Dutiable shipments and 'Documents Only' (DOX) shipments do not require item information. <br />If Item Verification check on shipment creation is enabled, the maximum number of distinct items that will be verified in one shipment is 15.  # noqa: E501

        :param items: The items of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :type: list[Item]
        """

        self._items = items

    @property
    def customs(self):
        """Gets the customs of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501


        :return: The customs of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :rtype: Customs
        """
        return self._customs

    @customs.setter
    def customs(self, customs):
        """Sets the customs of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.


        :param customs: The customs of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :type: Customs
        """

        self._customs = customs

    @property
    def return_to_sender(self):
        """Gets the return_to_sender of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501


        :return: The return_to_sender of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :rtype: ReturnToSender
        """
        return self._return_to_sender

    @return_to_sender.setter
    def return_to_sender(self, return_to_sender):
        """Sets the return_to_sender of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.


        :param return_to_sender: The return_to_sender of this RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest.  # noqa: E501
        :type: ReturnToSender
        """

        self._return_to_sender = return_to_sender

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
