# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShipmentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipping_account_id': 'str',
        'shipment_id': 'str',
        'tracking_number': 'str',
        'barcode_number': 'str',
        'reference1': 'str',
        'shipment_date': 'date',
        'status': 'str',
        'manifest_number': 'str',
        'container_id': 'str',
        'carrier': 'str',
        'destination_country_code': 'str',
        'last_updated_by': 'str',
        'last_updated_date_utc': 'datetime'
    }

    attribute_map = {
        'shipping_account_id': 'ShippingAccountId',
        'shipment_id': 'ShipmentId',
        'tracking_number': 'TrackingNumber',
        'barcode_number': 'BarcodeNumber',
        'reference1': 'Reference1',
        'shipment_date': 'ShipmentDate',
        'status': 'Status',
        'manifest_number': 'ManifestNumber',
        'container_id': 'ContainerId',
        'carrier': 'Carrier',
        'destination_country_code': 'DestinationCountryCode',
        'last_updated_by': 'LastUpdatedBy',
        'last_updated_date_utc': 'LastUpdatedDateUtc'
    }

    def __init__(self, shipping_account_id=None, shipment_id=None, tracking_number=None, barcode_number=None, reference1=None, shipment_date=None, status=None, manifest_number=None, container_id=None, carrier=None, destination_country_code=None, last_updated_by=None, last_updated_date_utc=None):  # noqa: E501
        """ShipmentResponse - a model defined in Swagger"""  # noqa: E501
        self._shipping_account_id = None
        self._shipment_id = None
        self._tracking_number = None
        self._barcode_number = None
        self._reference1 = None
        self._shipment_date = None
        self._status = None
        self._manifest_number = None
        self._container_id = None
        self._carrier = None
        self._destination_country_code = None
        self._last_updated_by = None
        self._last_updated_date_utc = None
        self.discriminator = None
        if shipping_account_id is not None:
            self.shipping_account_id = shipping_account_id
        if shipment_id is not None:
            self.shipment_id = shipment_id
        if tracking_number is not None:
            self.tracking_number = tracking_number
        if barcode_number is not None:
            self.barcode_number = barcode_number
        if reference1 is not None:
            self.reference1 = reference1
        if shipment_date is not None:
            self.shipment_date = shipment_date
        if status is not None:
            self.status = status
        if manifest_number is not None:
            self.manifest_number = manifest_number
        if container_id is not None:
            self.container_id = container_id
        if carrier is not None:
            self.carrier = carrier
        if destination_country_code is not None:
            self.destination_country_code = destination_country_code
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if last_updated_date_utc is not None:
            self.last_updated_date_utc = last_updated_date_utc

    @property
    def shipping_account_id(self):
        """Gets the shipping_account_id of this ShipmentResponse.  # noqa: E501

        Shipping Account Id  # noqa: E501

        :return: The shipping_account_id of this ShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._shipping_account_id

    @shipping_account_id.setter
    def shipping_account_id(self, shipping_account_id):
        """Sets the shipping_account_id of this ShipmentResponse.

        Shipping Account Id  # noqa: E501

        :param shipping_account_id: The shipping_account_id of this ShipmentResponse.  # noqa: E501
        :type: str
        """

        self._shipping_account_id = shipping_account_id

    @property
    def shipment_id(self):
        """Gets the shipment_id of this ShipmentResponse.  # noqa: E501

        Shipment Id  # noqa: E501

        :return: The shipment_id of this ShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this ShipmentResponse.

        Shipment Id  # noqa: E501

        :param shipment_id: The shipment_id of this ShipmentResponse.  # noqa: E501
        :type: str
        """

        self._shipment_id = shipment_id

    @property
    def tracking_number(self):
        """Gets the tracking_number of this ShipmentResponse.  # noqa: E501

        Tracking Number  # noqa: E501

        :return: The tracking_number of this ShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this ShipmentResponse.

        Tracking Number  # noqa: E501

        :param tracking_number: The tracking_number of this ShipmentResponse.  # noqa: E501
        :type: str
        """

        self._tracking_number = tracking_number

    @property
    def barcode_number(self):
        """Gets the barcode_number of this ShipmentResponse.  # noqa: E501

        Barcode Number  # noqa: E501

        :return: The barcode_number of this ShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._barcode_number

    @barcode_number.setter
    def barcode_number(self, barcode_number):
        """Sets the barcode_number of this ShipmentResponse.

        Barcode Number  # noqa: E501

        :param barcode_number: The barcode_number of this ShipmentResponse.  # noqa: E501
        :type: str
        """

        self._barcode_number = barcode_number

    @property
    def reference1(self):
        """Gets the reference1 of this ShipmentResponse.  # noqa: E501

        Reference 1  # noqa: E501

        :return: The reference1 of this ShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._reference1

    @reference1.setter
    def reference1(self, reference1):
        """Sets the reference1 of this ShipmentResponse.

        Reference 1  # noqa: E501

        :param reference1: The reference1 of this ShipmentResponse.  # noqa: E501
        :type: str
        """

        self._reference1 = reference1

    @property
    def shipment_date(self):
        """Gets the shipment_date of this ShipmentResponse.  # noqa: E501

        Shipment Date  # noqa: E501

        :return: The shipment_date of this ShipmentResponse.  # noqa: E501
        :rtype: date
        """
        return self._shipment_date

    @shipment_date.setter
    def shipment_date(self, shipment_date):
        """Sets the shipment_date of this ShipmentResponse.

        Shipment Date  # noqa: E501

        :param shipment_date: The shipment_date of this ShipmentResponse.  # noqa: E501
        :type: date
        """

        self._shipment_date = shipment_date

    @property
    def status(self):
        """Gets the status of this ShipmentResponse.  # noqa: E501

        Status  # noqa: E501

        :return: The status of this ShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ShipmentResponse.

        Status  # noqa: E501

        :param status: The status of this ShipmentResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def manifest_number(self):
        """Gets the manifest_number of this ShipmentResponse.  # noqa: E501

        Manifest Number  # noqa: E501

        :return: The manifest_number of this ShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._manifest_number

    @manifest_number.setter
    def manifest_number(self, manifest_number):
        """Sets the manifest_number of this ShipmentResponse.

        Manifest Number  # noqa: E501

        :param manifest_number: The manifest_number of this ShipmentResponse.  # noqa: E501
        :type: str
        """

        self._manifest_number = manifest_number

    @property
    def container_id(self):
        """Gets the container_id of this ShipmentResponse.  # noqa: E501

        Container Id  # noqa: E501

        :return: The container_id of this ShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this ShipmentResponse.

        Container Id  # noqa: E501

        :param container_id: The container_id of this ShipmentResponse.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def carrier(self):
        """Gets the carrier of this ShipmentResponse.  # noqa: E501

        Carrier Code  # noqa: E501

        :return: The carrier of this ShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this ShipmentResponse.

        Carrier Code  # noqa: E501

        :param carrier: The carrier of this ShipmentResponse.  # noqa: E501
        :type: str
        """

        self._carrier = carrier

    @property
    def destination_country_code(self):
        """Gets the destination_country_code of this ShipmentResponse.  # noqa: E501

        Destination Country Code  # noqa: E501

        :return: The destination_country_code of this ShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._destination_country_code

    @destination_country_code.setter
    def destination_country_code(self, destination_country_code):
        """Sets the destination_country_code of this ShipmentResponse.

        Destination Country Code  # noqa: E501

        :param destination_country_code: The destination_country_code of this ShipmentResponse.  # noqa: E501
        :type: str
        """

        self._destination_country_code = destination_country_code

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this ShipmentResponse.  # noqa: E501

        Last Updated By  # noqa: E501

        :return: The last_updated_by of this ShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this ShipmentResponse.

        Last Updated By  # noqa: E501

        :param last_updated_by: The last_updated_by of this ShipmentResponse.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def last_updated_date_utc(self):
        """Gets the last_updated_date_utc of this ShipmentResponse.  # noqa: E501

        Last Updated Date UTC  # noqa: E501

        :return: The last_updated_date_utc of this ShipmentResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_date_utc

    @last_updated_date_utc.setter
    def last_updated_date_utc(self, last_updated_date_utc):
        """Sets the last_updated_date_utc of this ShipmentResponse.

        Last Updated Date UTC  # noqa: E501

        :param last_updated_date_utc: The last_updated_date_utc of this ShipmentResponse.  # noqa: E501
        :type: datetime
        """

        self._last_updated_date_utc = last_updated_date_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
