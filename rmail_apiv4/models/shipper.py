# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Shipper(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipping_account_id': 'str',
        'shipping_location_id': 'str',
        'reference1': 'str',
        'reference2': 'str',
        'department_number': 'str',
        'eori_number': 'str',
        'vat_number': 'str',
        'address': 'ShipperAddress'
    }

    attribute_map = {
        'shipping_account_id': 'ShippingAccountId',
        'shipping_location_id': 'ShippingLocationId',
        'reference1': 'Reference1',
        'reference2': 'Reference2',
        'department_number': 'DepartmentNumber',
        'eori_number': 'EoriNumber',
        'vat_number': 'VatNumber',
        'address': 'Address'
    }

    def __init__(self, shipping_account_id=None, shipping_location_id=None, reference1=None, reference2=None, department_number=None, eori_number=None, vat_number=None, address=None):  # noqa: E501
        """Shipper - a model defined in Swagger"""  # noqa: E501
        self._shipping_account_id = None
        self._shipping_location_id = None
        self._reference1 = None
        self._reference2 = None
        self._department_number = None
        self._eori_number = None
        self._vat_number = None
        self._address = None
        self.discriminator = None
        self.shipping_account_id = shipping_account_id
        if shipping_location_id is not None:
            self.shipping_location_id = shipping_location_id
        if reference1 is not None:
            self.reference1 = reference1
        if reference2 is not None:
            self.reference2 = reference2
        if department_number is not None:
            self.department_number = department_number
        if eori_number is not None:
            self.eori_number = eori_number
        if vat_number is not None:
            self.vat_number = vat_number
        if address is not None:
            self.address = address

    @property
    def shipping_account_id(self):
        """Gets the shipping_account_id of this Shipper.  # noqa: E501

        Shipping Account the shipment is being created for. This can be populated with either the Shipping Account ID assigned by PRO SHIPPING Shipping Account ID or the Shipping Account Alias set when the Shipping Account was created. Both can be viewed in the Shipping Account GUI.  # noqa: E501

        :return: The shipping_account_id of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._shipping_account_id

    @shipping_account_id.setter
    def shipping_account_id(self, shipping_account_id):
        """Sets the shipping_account_id of this Shipper.

        Shipping Account the shipment is being created for. This can be populated with either the Shipping Account ID assigned by PRO SHIPPING Shipping Account ID or the Shipping Account Alias set when the Shipping Account was created. Both can be viewed in the Shipping Account GUI.  # noqa: E501

        :param shipping_account_id: The shipping_account_id of this Shipper.  # noqa: E501
        :type: str
        """
        if shipping_account_id is None:
            raise ValueError("Invalid value for `shipping_account_id`, must not be `None`")  # noqa: E501

        self._shipping_account_id = shipping_account_id

    @property
    def shipping_location_id(self):
        """Gets the shipping_location_id of this Shipper.  # noqa: E501

        Shipping Location the shipment is being shipped from. This can be populated with either the Shipping Location ID assigned by PRO SHIPPING or the Shipping Location Alias set when the Shipping Location was created.Both can be viewed in the Shipping Location GUI. <br />Mandatory if there is more than one Shipping Location available for the Shipping Account.  # noqa: E501

        :return: The shipping_location_id of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._shipping_location_id

    @shipping_location_id.setter
    def shipping_location_id(self, shipping_location_id):
        """Sets the shipping_location_id of this Shipper.

        Shipping Location the shipment is being shipped from. This can be populated with either the Shipping Location ID assigned by PRO SHIPPING or the Shipping Location Alias set when the Shipping Location was created.Both can be viewed in the Shipping Location GUI. <br />Mandatory if there is more than one Shipping Location available for the Shipping Account.  # noqa: E501

        :param shipping_location_id: The shipping_location_id of this Shipper.  # noqa: E501
        :type: str
        """

        self._shipping_location_id = shipping_location_id

    @property
    def reference1(self):
        """Gets the reference1 of this Shipper.  # noqa: E501

        The shipper's reference for this shipment - this is usually the shipper's order number that was provided to the consumer at the time the order was made.  # noqa: E501

        :return: The reference1 of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._reference1

    @reference1.setter
    def reference1(self, reference1):
        """Sets the reference1 of this Shipper.

        The shipper's reference for this shipment - this is usually the shipper's order number that was provided to the consumer at the time the order was made.  # noqa: E501

        :param reference1: The reference1 of this Shipper.  # noqa: E501
        :type: str
        """

        self._reference1 = reference1

    @property
    def reference2(self):
        """Gets the reference2 of this Shipper.  # noqa: E501

        Optional second reference for this shipment.  # noqa: E501

        :return: The reference2 of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._reference2

    @reference2.setter
    def reference2(self, reference2):
        """Sets the reference2 of this Shipper.

        Optional second reference for this shipment.  # noqa: E501

        :param reference2: The reference2 of this Shipper.  # noqa: E501
        :type: str
        """

        self._reference2 = reference2

    @property
    def department_number(self):
        """Gets the department_number of this Shipper.  # noqa: E501

        Department Number <br />If provided for a Royal Mail shipment, Department Number must be exactly 10 characters and must be an existing Department Number that has been setup with Royal Mail.  # noqa: E501

        :return: The department_number of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._department_number

    @department_number.setter
    def department_number(self, department_number):
        """Sets the department_number of this Shipper.

        Department Number <br />If provided for a Royal Mail shipment, Department Number must be exactly 10 characters and must be an existing Department Number that has been setup with Royal Mail.  # noqa: E501

        :param department_number: The department_number of this Shipper.  # noqa: E501
        :type: str
        """

        self._department_number = department_number

    @property
    def eori_number(self):
        """Gets the eori_number of this Shipper.  # noqa: E501

        Shipper's Economic Operators and Registration Identification (EORI) number. If a Shipper EORI number is used for the shipment, it must be provided here and not in the Customs element.  <br />Shipper's EORI number starts with the ISO Alpha-2 Country Code followed by a maximum 15 characters. For Northern Ireland starts with XI  # noqa: E501

        :return: The eori_number of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._eori_number

    @eori_number.setter
    def eori_number(self, eori_number):
        """Sets the eori_number of this Shipper.

        Shipper's Economic Operators and Registration Identification (EORI) number. If a Shipper EORI number is used for the shipment, it must be provided here and not in the Customs element.  <br />Shipper's EORI number starts with the ISO Alpha-2 Country Code followed by a maximum 15 characters. For Northern Ireland starts with XI  # noqa: E501

        :param eori_number: The eori_number of this Shipper.  # noqa: E501
        :type: str
        """

        self._eori_number = eori_number

    @property
    def vat_number(self):
        """Gets the vat_number of this Shipper.  # noqa: E501

        Shipper's Value Added Tax (VAT) Number. If a Shipper VAT number is used for the shipment, it must be provided here and not in the Customs element.  # noqa: E501

        :return: The vat_number of this Shipper.  # noqa: E501
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this Shipper.

        Shipper's Value Added Tax (VAT) Number. If a Shipper VAT number is used for the shipment, it must be provided here and not in the Customs element.  # noqa: E501

        :param vat_number: The vat_number of this Shipper.  # noqa: E501
        :type: str
        """

        self._vat_number = vat_number

    @property
    def address(self):
        """Gets the address of this Shipper.  # noqa: E501


        :return: The address of this Shipper.  # noqa: E501
        :rtype: ShipperAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Shipper.


        :param address: The address of this Shipper.  # noqa: E501
        :type: ShipperAddress
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Shipper, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Shipper):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
