# coding: utf-8

"""
    PRO SHIPPING API

    # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->   # noqa: E501

    OpenAPI spec version: v4.0-RM
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Customs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reason_for_export': 'str',
        'incoterms': 'TermsOfTrade',
        'pre_registration_number': 'str',
        'pre_registration_type': 'str',
        'shipping_charges': 'float',
        'other_charges': 'float',
        'quoted_landed_cost': 'float',
        'invoice_number': 'str',
        'invoice_date': 'date',
        'export_licence_required': 'bool',
        'airn': 'str'
    }

    attribute_map = {
        'reason_for_export': 'ReasonForExport',
        'incoterms': 'Incoterms',
        'pre_registration_number': 'PreRegistrationNumber',
        'pre_registration_type': 'PreRegistrationType',
        'shipping_charges': 'ShippingCharges',
        'other_charges': 'OtherCharges',
        'quoted_landed_cost': 'QuotedLandedCost',
        'invoice_number': 'InvoiceNumber',
        'invoice_date': 'InvoiceDate',
        'export_licence_required': 'ExportLicenceRequired',
        'airn': 'Airn'
    }

    def __init__(self, reason_for_export=None, incoterms=None, pre_registration_number=None, pre_registration_type=None, shipping_charges=None, other_charges=None, quoted_landed_cost=None, invoice_number=None, invoice_date=None, export_licence_required=None, airn=None):  # noqa: E501
        """Customs - a model defined in Swagger"""  # noqa: E501
        self._reason_for_export = None
        self._incoterms = None
        self._pre_registration_number = None
        self._pre_registration_type = None
        self._shipping_charges = None
        self._other_charges = None
        self._quoted_landed_cost = None
        self._invoice_number = None
        self._invoice_date = None
        self._export_licence_required = None
        self._airn = None
        self.discriminator = None
        if reason_for_export is not None:
            self.reason_for_export = reason_for_export
        if incoterms is not None:
            self.incoterms = incoterms
        if pre_registration_number is not None:
            self.pre_registration_number = pre_registration_number
        if pre_registration_type is not None:
            self.pre_registration_type = pre_registration_type
        if shipping_charges is not None:
            self.shipping_charges = shipping_charges
        if other_charges is not None:
            self.other_charges = other_charges
        if quoted_landed_cost is not None:
            self.quoted_landed_cost = quoted_landed_cost
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if export_licence_required is not None:
            self.export_licence_required = export_licence_required
        if airn is not None:
            self.airn = airn

    @property
    def reason_for_export(self):
        """Gets the reason_for_export of this Customs.  # noqa: E501

        Used to provide the reason an international shipment is being sent e.g. Sale, Gift, Return etc.  <br />Mandatory for Royal Mail international shipments.  <br />If the carrier is UPU affiliated and the service is a postal service, then only the following values are accepted: <br />**Gift** <br />**Commercial Sample** <br />**Documents** <br />**Sale of Goods** <br />**Return of Goods** <br />**Mixed Content** <br />**Other**  # noqa: E501

        :return: The reason_for_export of this Customs.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_export

    @reason_for_export.setter
    def reason_for_export(self, reason_for_export):
        """Sets the reason_for_export of this Customs.

        Used to provide the reason an international shipment is being sent e.g. Sale, Gift, Return etc.  <br />Mandatory for Royal Mail international shipments.  <br />If the carrier is UPU affiliated and the service is a postal service, then only the following values are accepted: <br />**Gift** <br />**Commercial Sample** <br />**Documents** <br />**Sale of Goods** <br />**Return of Goods** <br />**Mixed Content** <br />**Other**  # noqa: E501

        :param reason_for_export: The reason_for_export of this Customs.  # noqa: E501
        :type: str
        """

        self._reason_for_export = reason_for_export

    @property
    def incoterms(self):
        """Gets the incoterms of this Customs.  # noqa: E501


        :return: The incoterms of this Customs.  # noqa: E501
        :rtype: TermsOfTrade
        """
        return self._incoterms

    @incoterms.setter
    def incoterms(self, incoterms):
        """Sets the incoterms of this Customs.


        :param incoterms: The incoterms of this Customs.  # noqa: E501
        :type: TermsOfTrade
        """

        self._incoterms = incoterms

    @property
    def pre_registration_number(self):
        """Gets the pre_registration_number of this Customs.  # noqa: E501

        Some countries operate a Tax Pre-Registration scheme (e.g., VOEC in Norway, GST in Australia). If you are registered for a Tax Pre-Registration scheme for the destination country and are shipping under the scheme rules then provide the pre-registration number for the destination country.  <br />A pre-registration number is only relevant if the shipment Incoterms are DDU (Delivery Duty Unpaid). <br />If not provided and the shipment incoterms are set to DDU, any pre-registration numbers set up for your account in the Customs Settings GUI will be used. <br />**NOTE**: VAT and EORI numbers should be provided in the  Shipper VatNumber and Shipper EoriNumber fields, not in the preRegistrationNumber fields.  # noqa: E501

        :return: The pre_registration_number of this Customs.  # noqa: E501
        :rtype: str
        """
        return self._pre_registration_number

    @pre_registration_number.setter
    def pre_registration_number(self, pre_registration_number):
        """Sets the pre_registration_number of this Customs.

        Some countries operate a Tax Pre-Registration scheme (e.g., VOEC in Norway, GST in Australia). If you are registered for a Tax Pre-Registration scheme for the destination country and are shipping under the scheme rules then provide the pre-registration number for the destination country.  <br />A pre-registration number is only relevant if the shipment Incoterms are DDU (Delivery Duty Unpaid). <br />If not provided and the shipment incoterms are set to DDU, any pre-registration numbers set up for your account in the Customs Settings GUI will be used. <br />**NOTE**: VAT and EORI numbers should be provided in the  Shipper VatNumber and Shipper EoriNumber fields, not in the preRegistrationNumber fields.  # noqa: E501

        :param pre_registration_number: The pre_registration_number of this Customs.  # noqa: E501
        :type: str
        """

        self._pre_registration_number = pre_registration_number

    @property
    def pre_registration_type(self):
        """Gets the pre_registration_type of this Customs.  # noqa: E501

        The type of pre-registration number provided in the PreRegistrationNumber element. <br />Required if a pre-registration number has been provided. <br />Ignored if there is no pre-registration number. <br />**NOTE:** VAT and EORI numbers should be provided in the  Shipper VatNumber and Shipper EoriNumber fields, not in the preRegistrationNumber and PreRegistrationType fields  # noqa: E501

        :return: The pre_registration_type of this Customs.  # noqa: E501
        :rtype: str
        """
        return self._pre_registration_type

    @pre_registration_type.setter
    def pre_registration_type(self, pre_registration_type):
        """Sets the pre_registration_type of this Customs.

        The type of pre-registration number provided in the PreRegistrationNumber element. <br />Required if a pre-registration number has been provided. <br />Ignored if there is no pre-registration number. <br />**NOTE:** VAT and EORI numbers should be provided in the  Shipper VatNumber and Shipper EoriNumber fields, not in the preRegistrationNumber and PreRegistrationType fields  # noqa: E501

        :param pre_registration_type: The pre_registration_type of this Customs.  # noqa: E501
        :type: str
        """

        self._pre_registration_type = pre_registration_type

    @property
    def shipping_charges(self):
        """Gets the shipping_charges of this Customs.  # noqa: E501

        Shipping Charges for International Shipments. <br />The postage amount paid by the customer. The amount can be 0.00 if the customer has been offered free delivery. <br />Used for the calculation of customs fees. <br />Any value should be in the currency specified in the ShipmentInformation/Currency field.  # noqa: E501

        :return: The shipping_charges of this Customs.  # noqa: E501
        :rtype: float
        """
        return self._shipping_charges

    @shipping_charges.setter
    def shipping_charges(self, shipping_charges):
        """Sets the shipping_charges of this Customs.

        Shipping Charges for International Shipments. <br />The postage amount paid by the customer. The amount can be 0.00 if the customer has been offered free delivery. <br />Used for the calculation of customs fees. <br />Any value should be in the currency specified in the ShipmentInformation/Currency field.  # noqa: E501

        :param shipping_charges: The shipping_charges of this Customs.  # noqa: E501
        :type: float
        """

        self._shipping_charges = shipping_charges

    @property
    def other_charges(self):
        """Gets the other_charges of this Customs.  # noqa: E501

        Insurance and Other Costs for International Shipments. <br />Used to declare any costs the customer has been charged in addition to the standard shipping cost, such as insurance. <br />This field can be left blank, or be 0.00 if no other charges have been levied.         <br />Any value should be in the currency specified in the ShipmentInformation/Currency field.  # noqa: E501

        :return: The other_charges of this Customs.  # noqa: E501
        :rtype: float
        """
        return self._other_charges

    @other_charges.setter
    def other_charges(self, other_charges):
        """Sets the other_charges of this Customs.

        Insurance and Other Costs for International Shipments. <br />Used to declare any costs the customer has been charged in addition to the standard shipping cost, such as insurance. <br />This field can be left blank, or be 0.00 if no other charges have been levied.         <br />Any value should be in the currency specified in the ShipmentInformation/Currency field.  # noqa: E501

        :param other_charges: The other_charges of this Customs.  # noqa: E501
        :type: float
        """

        self._other_charges = other_charges

    @property
    def quoted_landed_cost(self):
        """Gets the quoted_landed_cost of this Customs.  # noqa: E501

        The total cost quoted to the customer for delivering the shipment. This includes shipping charges, other charges and any customs taxes and duties charges that were quoted. <br />Required for some international destinations when the shipment incoterms are DDP. <br />Any value should be in the currency specified in the ShipmentInformation/Currency field.  # noqa: E501

        :return: The quoted_landed_cost of this Customs.  # noqa: E501
        :rtype: float
        """
        return self._quoted_landed_cost

    @quoted_landed_cost.setter
    def quoted_landed_cost(self, quoted_landed_cost):
        """Sets the quoted_landed_cost of this Customs.

        The total cost quoted to the customer for delivering the shipment. This includes shipping charges, other charges and any customs taxes and duties charges that were quoted. <br />Required for some international destinations when the shipment incoterms are DDP. <br />Any value should be in the currency specified in the ShipmentInformation/Currency field.  # noqa: E501

        :param quoted_landed_cost: The quoted_landed_cost of this Customs.  # noqa: E501
        :type: float
        """

        self._quoted_landed_cost = quoted_landed_cost

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Customs.  # noqa: E501

        Invoice Number for International Shipments. <br />When sending an item to an overseas address and a Commercial or Proforma invoice is available, the Invoice Number and Date should be provided where possible. This supports customs processing in certain circumstances. <br />Required if Invoice Date is provided. <br />If provided, this will be displayed on commercial invoices generated for the shipment.  # noqa: E501

        :return: The invoice_number of this Customs.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Customs.

        Invoice Number for International Shipments. <br />When sending an item to an overseas address and a Commercial or Proforma invoice is available, the Invoice Number and Date should be provided where possible. This supports customs processing in certain circumstances. <br />Required if Invoice Date is provided. <br />If provided, this will be displayed on commercial invoices generated for the shipment.  # noqa: E501

        :param invoice_number: The invoice_number of this Customs.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def invoice_date(self):
        """Gets the invoice_date of this Customs.  # noqa: E501

        If not provided, defaults to today's date. <br />Ignored if no Invoice Number provided. <br />Accepted Format: YYYY-MM-DD  # noqa: E501

        :return: The invoice_date of this Customs.  # noqa: E501
        :rtype: date
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this Customs.

        If not provided, defaults to today's date. <br />Ignored if no Invoice Number provided. <br />Accepted Format: YYYY-MM-DD  # noqa: E501

        :param invoice_date: The invoice_date of this Customs.  # noqa: E501
        :type: date
        """

        self._invoice_date = invoice_date

    @property
    def export_licence_required(self):
        """Gets the export_licence_required of this Customs.  # noqa: E501

        Used to flag shipments requiring an export license.  <br />An export license is neeed for a specific type of goods used predominantly for military purposes. <br />You can find out more about the type of items requiring an export licence on the UK Government website. <br />If an export licence is required, it should be affixed to the outside of the package.  # noqa: E501

        :return: The export_licence_required of this Customs.  # noqa: E501
        :rtype: bool
        """
        return self._export_licence_required

    @export_licence_required.setter
    def export_licence_required(self, export_licence_required):
        """Sets the export_licence_required of this Customs.

        Used to flag shipments requiring an export license.  <br />An export license is neeed for a specific type of goods used predominantly for military purposes. <br />You can find out more about the type of items requiring an export licence on the UK Government website. <br />If an export licence is required, it should be affixed to the outside of the package.  # noqa: E501

        :param export_licence_required: The export_licence_required of this Customs.  # noqa: E501
        :type: bool
        """

        self._export_licence_required = export_licence_required

    @property
    def airn(self):
        """Gets the airn of this Customs.  # noqa: E501

         The AIRN (Addressee Identification Reference Number) is the generic name given to a national identification number for the overseas recipient of an item. <br />The AIRN, when available, should be provided for items being exported to a destination where the customs/tax authority requests one. E.g. Russia and Brazil.  # noqa: E501

        :return: The airn of this Customs.  # noqa: E501
        :rtype: str
        """
        return self._airn

    @airn.setter
    def airn(self, airn):
        """Sets the airn of this Customs.

         The AIRN (Addressee Identification Reference Number) is the generic name given to a national identification number for the overseas recipient of an item. <br />The AIRN, when available, should be provided for items being exported to a destination where the customs/tax authority requests one. E.g. Russia and Brazil.  # noqa: E501

        :param airn: The airn of this Customs.  # noqa: E501
        :type: str
        """

        self._airn = airn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Customs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Customs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
